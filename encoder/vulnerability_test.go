/*
 * NETCAP - Traffic Analysis Framework
 * Copyright (c) 2017-2020 Philipp Mieden <dreadl0ck [at] protonmail [dot] ch>
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

package encoder

import (
	"fmt"
	"github.com/blevesearch/bleve"
	"github.com/dreadl0ck/netcap/types"
	"github.com/mgutz/ansi"
	"strings"
	"testing"
)

func TestVulnSearch(t *testing.T) {

	// Load vulnerabilities DB index
	indexName := "/usr/local/etc/netcap/dbs/exploits.bleve"
	var err error
	vulnerabilitiesIndex, err = bleve.Open(indexName)
	if err != nil {
		t.Fatal(err)
	}

	software := &types.Software{
		Timestamp:      "",
		Product:        "Apache",
		Vendor:         "",
		Version:        "2.4.7",
		DeviceProfiles: nil,
		SourceName:     "",
		DPIResults:     nil,
		Service:        "",
		Flows:          nil,
		SourceData:     "",
		Notes:          "",
	}

	searchResults := vulnerabilitiesLookupTest(software)
	if searchResults == nil {
		t.Fatal("no results")
	}

	//fmt.Println("search for ", software.Product, software.Vendor, software.Version)

	for _, v := range searchResults.Hits {

		var color string
		doc, _ := vulnerabilitiesIndex.Document(v.ID)
		if v.Score > 3 {
			color = ansi.Red
		}
		fmt.Println(color, "score", v.Score, &types.Vulnerability{
			Timestamp:   software.Timestamp,
			Software:    software,
			Description: strings.Trim(string(doc.Fields[2].Value()), "\""),
			File:        string(doc.Fields[1].Value()),
			ID:          string(doc.Fields[0].Value()),
		}, ansi.Reset)
	}
}