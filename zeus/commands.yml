# ________ ____  __ __  ______     
#  \___   // __ \|  |  \/  ___/    
#   /    /\  ___/|  |  /\___ \    
#  /_____ \\___  >____//____  >  
#        \/    \/           \/  
#                    Build System
#                          v0.8.4
#

# default language
language: bash

# globals for all commands
globals:
    # NETCAP version
    VERSION:  0.5

# command data
commands:
    
    ## Install all
    ##

    ## linker flags
    #   -w	disable DWARF generation
    #   -s	disable symbol table
    install:
        description: install netcap and netlabel to $PATH
        buildNumber: true
        help: Compiles and moves the netcap binary to /usr/local/bin
        exec: go build -ldflags "-s -w" -o /usr/local/bin/net -i github.com/dreadl0ck/netcap/cmd

    ## Debug Builds
    ##

    install-race:
        description: install a netcap build with race detection enabled
        buildNumber: true
        help: Install the race build to the default system location
        exec: GO111MODULE=on go build -ldflags "-s -w -X github.com/dreadl0ck/netcap.Version=v${VERSION}-race" -race -o /usr/local/bin/net -i github.com/dreadl0ck/netcap/cmd

    ## Containers
    ##

    build-alpine-docker:
        description: build all framework binaries for linux inside an apline docker container
        help: used to compile for linux on macOS because cross compilation is a pain with CGO
        dependencies:
            - clean
    
    build-ubuntu-docker:
        description: build all framework binaries for linux inside an ubuntu docker container
        help: used to compile for linux on macOS because cross compilation is a pain with CGO
        dependencies:
            - clean

    ## Release
    ##

    # run a prod release
    release:
        description: release a new version, bundle and publish on github
        dependencies:
            - gen-version
            - version-bump
            - check-version
            - gen-proto-release
        exec: goreleaser release --rm-dist

    # run a test release
    release-test:
        description: test run to release a new version
        dependencies:
            - gen-version
            - version-bump-test
            - gen-proto-release
        exec: goreleaser release --rm-dist --skip-publish --skip-validate; zeus version-bump-test-undo

    ## Utils
    ##

    clean:
        description: clean project
        exec: |
            rm -rf bin/*
            rm -f *.ncap *.pcap *.ncap.gz *.log

    # count lines of code
    cloc:
        description: count lines of code for the project
        exec: cloc --exclude-ext pb.go,py,rb,js,cpp,cc,rs,java,swift,c,cs,h cmd metrics label types utils io collector encoder netcap.go reader.go utils.go writer.go maltego resolvers dpi

    # generate protocol buffers for development
    gen-proto-dev:
        description: generate protocol buffers
        help: proto compiler must be installed with gogofaster plugin
        exec: protoc --gogofaster_out=types/. netcap.proto

    # generate protocol buffers for release
    gen-proto-release:
        description: generate protocol buffers
        help: proto compiler must be installed with all required plugins
        exec: |
            mkdir -p types/{python,java,swift,rust,cpp,csharp,js}
            protoc --gogofaster_out=types/. --python_out=types/python --java_out=types/java --swift_out=types/swift --rust_out=types/rust --cpp_out=types/cpp --csharp_out=types/csharp --js_out=types/js netcap.proto

    # the version defined in the globals section will be set via ldflags on each build
    # to ensure the correct version is also set for installation via go get
    # a version.go file is generated on each release with the corresponding version number
    gen-version:
        description: set the correct project version
        help: generates the version.go file
        exec: |
            echo -e "// Netcap is a framework for network traffic analysis. Learn more at https://netcap.io.\npackage netcap\n\n// Netcap version.\nvar Version = \"v${VERSION}\"\nvar Commit = \"$(git rev-parse HEAD | tr -d "\n")\"" > version.go
            sed "s/.*ENV VERSION.*/ENV VERSION ${VERSION}/" Dockerfile-ubuntu > Dockerfile-ubuntu-cp
            mv Dockerfile-ubuntu-cp Dockerfile-ubuntu
            sed "s/.*ENV VERSION.*/ENV VERSION ${VERSION}/" Dockerfile-alpine > Dockerfile-alpine-cp
            mv Dockerfile-alpine-cp Dockerfile-alpine

    # build and push the Alpine docker container
    build-linux:
        description: builds the alpine and ubuntu docker containers
    
    # check git version
    check-version:
        description: checks whether the version from the latest git tag matches the one set here
        exec: |
            if [[ $(git describe --abbrev=0) != "v${VERSION}" ]]; then
                echo "[ERROR] latest git tag does not match version $VERSION"
                exit 1
            fi

    # bump the git version tag
    version-bump:
        description: bump framework version and add git version tag
        exec: |
            read -p "[WARNING] This will bump the version to $VERSION, as configured in the zeus/commands.yml. Are you sure? Hit [Enter] to proceed"

            git status
            read -p "[WARNING] The following changes will be added to version control. Hit [Enter] to proceed"
            git add .
            git commit -m "v${VERSION} release"

            git tag -a v${VERSION} -m "v${VERSION} release"
            git push origin v${VERSION}

            echo "[INFO] version bumped to v${VERSION}"

    # bump the git version tag
    version-bump-test:
        description: bump framework version and add git version tag
        exec: |
            git tag -a v${VERSION} -m "v${VERSION} release test"
            echo "[INFO] added test tag v${VERSION}"

    # bump the git version tag
    version-bump-test-undo:
        description: bump framework version and add git version tag
        exec: |
            git tag -d v${VERSION}
            echo "[INFO] removed test tag v${VERSION}"
    
    static-analyze:
        description: run the golangci-lint static source code analyzer
        exec: golangci-lint run

    delete-tag:
        description: delete tag locally and remotely
        arguments:
            - tag:String
        exec: |
            git tag -d $tag
            # dont delete remote by default
            #git push --delete origin $tag

    download-test-pcaps:
        description: fetches the pcap files for the unit tests
        help: uses git, wget and 7za to download several test pcap files
        exec: |
            mkdir -p tests && cd tests
            wget https://weberblog.net/wp-content/uploads/2020/02/The-Ultimate-PCAP.7z
            7za x The-Ultimate-PCAP.7z
            git clone https://github.com/wireshark/wireshark
            gunzip wireshark/test/captures/*.gz
            git clone https://github.com/kbandla/pcaps
            git clone https://github.com/automayt/ICS-pcap
            mv tests/ICS-pcap/FINS\ \(OMRON\) tests/ICS-pcap/FINS-OMRON
            mv tests/ICS-pcap/ETHERNET_IP/digitalbond\ pcaps tests/ICS-pcap/ETHERNET_IP/digitalbond-pcaps
            mv tests/ICS-pcap/MODBUS/digitalbond\ pcaps tests/ICS-pcap/MODBUS/digitalbond-pcaps
            mv tests/ICS-pcap/DNP3/digitalbond\ pcaps tests/ICS-pcap/DNP3/digitalbond-pcaps
            git clone https://github.com/tatsui-geek/malware-traffic-analysis.net
            git clone https://github.com/rahard/pcapfiles.git
            git clone https://github.com/markofu/pcaps.git morepcaps
            rm -f morepcaps/PracticalPacketAnalysis/ppa-capture-files/http-fault-post.pcap
            git clone https://github.com/odedshimon/BruteShark

    test-pcaps:
        exec: |
            trap 'exit 0' INT
            redcolor()(set -o pipefail;"$@" 2>&1>&3|sed $'s,.*,\e[31m&\e[m,'>&2)3>&1
            for f in $(find tests -type f -name "*.pcap" -o -name "*.pcapng"); do
                echo "net capture -read "$f" -out "$f.net" -quiet -time -ignore-unknown"
                redcolor net capture -read "$f" -out "$f.net" -quiet -time -ignore-unknown || :
                rm -rf "$f.net"
            done

    test-pcaps-dev:
        exec: |
            trap 'exit 0' INT
            for f in $(find tests -type f -name "*.pcap" -o -name "*.pcapng"); do
                echo "$f -> net capture -read "$f" -out "$f.net""
                net capture -read "$f" -out "$f.net"
                rm -rf "$f.net"
            done

    merge-test-pcaps:
        exec: |
            rm -f tests/merged.pcapng
            while IFS= read -r line; do
                FILES+=("$line")
            done < <(find tests -type f -name "*.pcap" -o -name "*.pcapng" | sort)
            declare -p FILES
            mergecap -w tests/merged.pcapng "${FILES[@]}"
            du -h tests/merged.pcapng

    pack-dbs:
        description: pack all dbs that can be shared as a zip archive
        help: the resulting archive will be put into the resolvers folder
        exec: cd /usr/local/etc/netcap && zip -r resolver-dbs.zip /usr/local/etc/netcap/dbs -x *.mmdb *hosts* && cd - && cp /usr/local/etc/netcap/resolver-dbs.zip resolvers/resolver-dbs.zip

    install-bash-completion:
        description: install the bash-completion for netcap
        exec: cp cmd/net /usr/local/etc/bash_completion.d/net && . /usr/local/etc/bash_completion.d/net

    run-grafana:
        description: start grafana service locally
        exec: grafana-server --homepath /usr/local/opt/grafana/share/grafana

    run-prometheus:
        description: start prometheus daemon locally
        exec: prometheus --config.file prometheus/prometheus.yml