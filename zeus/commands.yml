# ________ ____  __ __  ______     
#  \___   // __ \|  |  \/  ___/    
#   /    /\  ___/|  |  /\___ \    
#  /_____ \\___  >____//____  >  
#        \/    \/           \/  
#                    Build System
#                          v0.8.4
#

# default language
language: bash

# globals for all commands
globals:
    # NETCAP version
    VERSION: 0.4.0

# command data
commands:
    
    ## Install all
    ##

    install:
        description: install netcap and netlabel to $PATH
        buildNumber: true
        help: Installs the applications to the default system location
        dependencies:
            - net.cap
            - net.label
            - net.collector
            - net.sensor
            - net.proxy
        exec: echo done

    ## Compile Framework Components
    ##

    net.cap:
        description: compile net.cap binary to $GOPATH/bin
        buildNumber: true
        exec: go build -ldflags "-X github.com/dreadl0ck/netcap.Version=v${VERSION}" -o $(go env GOPATH)/bin/net.cap -i github.com/dreadl0ck/netcap/cmd/cap

    net.label:
        description: compile net.label binary to $GOPATH/bin
        buildNumber: true
        exec: go build -ldflags "-X github.com/dreadl0ck/netcap.Version=v${VERSION}" -o $(go env GOPATH)/bin/net.label -i github.com/dreadl0ck/netcap/cmd/label

    net.sensor:
        description: compile net.sensor binary to $GOPATH/bin
        exec: go build -ldflags "-X github.com/dreadl0ck/netcap.Version=v${VERSION}" -o $(go env GOPATH)/bin/net.sensor -i github.com/dreadl0ck/netcap/cmd/sensor

    net.collector:
        description: compile net.collector binary to $GOPATH/bin
        exec: go build -ldflags "-X github.com/dreadl0ck/netcap.Version=v${VERSION}" -o $(go env GOPATH)/bin/net.collector -i github.com/dreadl0ck/netcap/cmd/collector

    net.proxy:
        description: compile net.proxy binary to $GOPATH/bin
        exec: go build -ldflags "-X github.com/dreadl0ck/netcap.Version=v${VERSION}" -o $(go env GOPATH)/bin/net.proxy -i github.com/dreadl0ck/netcap/cmd/proxy
    
    net.exporter:
        description: compile net.exporter binary to $GOPATH/bin
        exec: go build -ldflags "-X github.com/dreadl0ck/netcap.Version=v${VERSION}" -o $(go env GOPATH)/bin/net.exporter -i github.com/dreadl0ck/netcap/cmd/exporter

    ## Debug Builds
    ##

    install-race:
        description: install a netcap build with race detection enabled
        buildNumber: true
        help: Install the race build to the default system location
        exec: go build -ldflags "-X github.com/dreadl0ck/netcap.Version=v${VERSION}-race" -race -o $(go env GOPATH)/bin/netcap -i github.com/dreadl0ck/netcap/cmd

    ## Containers
    ##

    build-all-linux-docker:
        description: build all framework binaries for linux inside a docker container
        help: used to compile for linux on macOS because cross compilation is a pain with CGO
        dependencies:
            - clean

    ## Release
    ##

    # run a prod release
    release:
        description: release a new version, bundle and publish on github
        dependencies:
            - gen-version
            - check-version
        exec: goreleaser release --rm-dist

    # run a test release
    release-test:
        description: test run to release a new version
        dependencies:
            - gen-version
            - check-version
        exec: goreleaser release --rm-dist --skip-publish --skip-validate #--debug

    ## Utils
    ##

    # count lines of code
    cloc:
        description: count lines of code for the project
        exec: cloc --exclude-ext pb.go,py,rb cmd metrics label types utils io collector encoder netcap.go reader.go utils.go writer.go

    # generate protocol buffers
    gen-proto:
        description: generate protocol buffers
        help: proto compiler must be installed
        exec: protoc --gogofaster_out=types/. --ruby_out=types/ --python_out=types/ netcap.proto

    # the version defined in the globals section will be set via ldflags on each build
    # to ensure the correct version is also set for installation via go get
    # a version.go file is generated on each release with the corresponding version number
    gen-version:
        description: generate the version.go file
        exec: echo -e "// This file was generated. Do not edit.\npackage netcap\n\n// Netcap version.\nvar Version = \"v${VERSION}\"" > version.go

    # build and push the Alpine docker container
    build-docker-alpine:
        description: builds the alpine docker container
        exec: |
            cd docker
            echo "[INFO] building container for v${VERSION}"
            docker build -t dreadl0ck/netcap:v${VERSION} .
            # docker images
            echo "[INFO] pushing container to docker registry"
            docker push dreadl0ck/netcap
    
    # check git version
    check-version:
        description: checks whether the version from the latest git tag matches the one set here
        exec: |
            if [[ $(git describe --abbrev=0) != "v${VERSION}" ]]; then
                echo "[ERROR] latest git tag does not match version $VERSION"
                exit 1
            fi

    # remove all files in project bin folder
    clean:
        description: clean up to prepare for build
        exec: rm -rf bin/*

    # bump the git version tag
    version-bump:
        description: bump framework version and add git version tag
        exec: |
            read -p "[WARNING] This will bump the version to $VERSION, as configured in the zeus/commands.yml. Are you sure? Hit [Enter] to proceed"

            git add .
            git tag -a v${VERSION} -m "v${VERSION} release"
            git push origin v${VERSION}
            

            echo "[INFO] version bumped to v${VERSION}"