// Code generated by protoc-gen-go. DO NOT EDIT.
// source: netcap.proto

package types

/*
generated protocol buffer code will be put into the "types" package
*/

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Type int32

const (
	Type_NC_Header                      Type = 0
	Type_NC_Batch                       Type = 1
	Type_NC_Flow                        Type = 2
	Type_NC_Connection                  Type = 3
	Type_NC_LinkFlow                    Type = 4
	Type_NC_NetworkFlow                 Type = 5
	Type_NC_TransportFlow               Type = 6
	Type_NC_Ethernet                    Type = 7
	Type_NC_ARP                         Type = 8
	Type_NC_Dot1Q                       Type = 9
	Type_NC_Dot11                       Type = 10
	Type_NC_Dot11QOS                    Type = 11
	Type_NC_Dot11HTControl              Type = 12
	Type_NC_Dot11HTControlVHT           Type = 13
	Type_NC_Dot11HTControlHT            Type = 14
	Type_NC_Dot11HTControlMFB           Type = 15
	Type_NC_Dot11LinkAdapationControl   Type = 16
	Type_NC_Dot11ASEL                   Type = 17
	Type_NC_LinkLayerDiscovery          Type = 18
	Type_NC_LLDPChassisID               Type = 19
	Type_NC_LLDPPortID                  Type = 20
	Type_NC_LinkLayerDiscoveryValue     Type = 21
	Type_NC_EthernetCTP                 Type = 22
	Type_NC_EthernetCTPReply            Type = 23
	Type_NC_LinkLayerDiscoveryInfo      Type = 24
	Type_NC_LLDPSysCapabilities         Type = 25
	Type_NC_LLDPCapabilities            Type = 26
	Type_NC_LLDPMgmtAddress             Type = 27
	Type_NC_LLDPOrgSpecificTLV          Type = 28
	Type_NC_IPv4                        Type = 29
	Type_NC_IPv4Option                  Type = 30
	Type_NC_IPv6                        Type = 31
	Type_NC_ICMPv4                      Type = 32
	Type_NC_ICMPv6                      Type = 33
	Type_NC_ICMPv6NeighborAdvertisement Type = 34
	Type_NC_ICMPv6RouterAdvertisement   Type = 35
	Type_NC_ICMPv6Option                Type = 36
	Type_NC_UDP                         Type = 37
	Type_NC_TCP                         Type = 38
	Type_NC_TCPOption                   Type = 39
	Type_NC_SCTP                        Type = 40
	Type_NC_DNS                         Type = 41
	Type_NC_DNSResourceRecord           Type = 42
	Type_NC_DNSSOA                      Type = 43
	Type_NC_DNSSRV                      Type = 44
	Type_NC_DNSMX                       Type = 45
	Type_NC_DNSQuestion                 Type = 46
	Type_NC_DHCPv4                      Type = 47
	Type_NC_DHCPOption                  Type = 48
	Type_NC_DHCPv6                      Type = 49
	Type_NC_DHCPv6Option                Type = 50
	Type_NC_LLC                         Type = 51
	Type_NC_NTP                         Type = 52
	Type_NC_SIP                         Type = 53
	Type_NC_IGMP                        Type = 54
	Type_NC_IGMPv3GroupRecord           Type = 55
	Type_NC_IPv6HopByHop                Type = 56
	Type_NC_IPv6HopByHopOption          Type = 57
	Type_NC_IPv6HopByHopOptionAlignment Type = 58
	Type_NC_SNAP                        Type = 59
	Type_NC_ICMPv6Echo                  Type = 60
	Type_NC_ICMPv6NeighborSolicitation  Type = 61
	Type_NC_ICMPv6RouterSolicitation    Type = 62
	Type_NC_HTTP                        Type = 63
	Type_NC_TLSClientHello              Type = 64
	Type_NC_IPSecAH                     Type = 65
	Type_NC_IPSecESP                    Type = 66
	Type_NC_Geneve                      Type = 67
	Type_NC_IPv6Fragment                Type = 68
	Type_NC_VXLAN                       Type = 69
	Type_NC_USB                         Type = 70
	Type_NC_LCM                         Type = 71
	Type_NC_MPLS                        Type = 72
	Type_NC_ModbusTCP                   Type = 73
	Type_NC_OSPFv2                      Type = 74
	Type_NC_OSPFv3                      Type = 75
	Type_NC_BFD                         Type = 76
	Type_NC_GRE                         Type = 77
	Type_NC_FDDI                        Type = 78
	Type_NC_EAP                         Type = 79
	Type_NC_VRRPv2                      Type = 80
)

var Type_name = map[int32]string{
	0:  "NC_Header",
	1:  "NC_Batch",
	2:  "NC_Flow",
	3:  "NC_Connection",
	4:  "NC_LinkFlow",
	5:  "NC_NetworkFlow",
	6:  "NC_TransportFlow",
	7:  "NC_Ethernet",
	8:  "NC_ARP",
	9:  "NC_Dot1Q",
	10: "NC_Dot11",
	11: "NC_Dot11QOS",
	12: "NC_Dot11HTControl",
	13: "NC_Dot11HTControlVHT",
	14: "NC_Dot11HTControlHT",
	15: "NC_Dot11HTControlMFB",
	16: "NC_Dot11LinkAdapationControl",
	17: "NC_Dot11ASEL",
	18: "NC_LinkLayerDiscovery",
	19: "NC_LLDPChassisID",
	20: "NC_LLDPPortID",
	21: "NC_LinkLayerDiscoveryValue",
	22: "NC_EthernetCTP",
	23: "NC_EthernetCTPReply",
	24: "NC_LinkLayerDiscoveryInfo",
	25: "NC_LLDPSysCapabilities",
	26: "NC_LLDPCapabilities",
	27: "NC_LLDPMgmtAddress",
	28: "NC_LLDPOrgSpecificTLV",
	29: "NC_IPv4",
	30: "NC_IPv4Option",
	31: "NC_IPv6",
	32: "NC_ICMPv4",
	33: "NC_ICMPv6",
	34: "NC_ICMPv6NeighborAdvertisement",
	35: "NC_ICMPv6RouterAdvertisement",
	36: "NC_ICMPv6Option",
	37: "NC_UDP",
	38: "NC_TCP",
	39: "NC_TCPOption",
	40: "NC_SCTP",
	41: "NC_DNS",
	42: "NC_DNSResourceRecord",
	43: "NC_DNSSOA",
	44: "NC_DNSSRV",
	45: "NC_DNSMX",
	46: "NC_DNSQuestion",
	47: "NC_DHCPv4",
	48: "NC_DHCPOption",
	49: "NC_DHCPv6",
	50: "NC_DHCPv6Option",
	51: "NC_LLC",
	52: "NC_NTP",
	53: "NC_SIP",
	54: "NC_IGMP",
	55: "NC_IGMPv3GroupRecord",
	56: "NC_IPv6HopByHop",
	57: "NC_IPv6HopByHopOption",
	58: "NC_IPv6HopByHopOptionAlignment",
	59: "NC_SNAP",
	60: "NC_ICMPv6Echo",
	61: "NC_ICMPv6NeighborSolicitation",
	62: "NC_ICMPv6RouterSolicitation",
	63: "NC_HTTP",
	64: "NC_TLSClientHello",
	65: "NC_IPSecAH",
	66: "NC_IPSecESP",
	67: "NC_Geneve",
	68: "NC_IPv6Fragment",
	69: "NC_VXLAN",
	70: "NC_USB",
	71: "NC_LCM",
	72: "NC_MPLS",
	73: "NC_ModbusTCP",
	74: "NC_OSPFv2",
	75: "NC_OSPFv3",
	76: "NC_BFD",
	77: "NC_GRE",
	78: "NC_FDDI",
	79: "NC_EAP",
	80: "NC_VRRPv2",
}
var Type_value = map[string]int32{
	"NC_Header":                      0,
	"NC_Batch":                       1,
	"NC_Flow":                        2,
	"NC_Connection":                  3,
	"NC_LinkFlow":                    4,
	"NC_NetworkFlow":                 5,
	"NC_TransportFlow":               6,
	"NC_Ethernet":                    7,
	"NC_ARP":                         8,
	"NC_Dot1Q":                       9,
	"NC_Dot11":                       10,
	"NC_Dot11QOS":                    11,
	"NC_Dot11HTControl":              12,
	"NC_Dot11HTControlVHT":           13,
	"NC_Dot11HTControlHT":            14,
	"NC_Dot11HTControlMFB":           15,
	"NC_Dot11LinkAdapationControl":   16,
	"NC_Dot11ASEL":                   17,
	"NC_LinkLayerDiscovery":          18,
	"NC_LLDPChassisID":               19,
	"NC_LLDPPortID":                  20,
	"NC_LinkLayerDiscoveryValue":     21,
	"NC_EthernetCTP":                 22,
	"NC_EthernetCTPReply":            23,
	"NC_LinkLayerDiscoveryInfo":      24,
	"NC_LLDPSysCapabilities":         25,
	"NC_LLDPCapabilities":            26,
	"NC_LLDPMgmtAddress":             27,
	"NC_LLDPOrgSpecificTLV":          28,
	"NC_IPv4":                        29,
	"NC_IPv4Option":                  30,
	"NC_IPv6":                        31,
	"NC_ICMPv4":                      32,
	"NC_ICMPv6":                      33,
	"NC_ICMPv6NeighborAdvertisement": 34,
	"NC_ICMPv6RouterAdvertisement":   35,
	"NC_ICMPv6Option":                36,
	"NC_UDP":                         37,
	"NC_TCP":                         38,
	"NC_TCPOption":                   39,
	"NC_SCTP":                        40,
	"NC_DNS":                         41,
	"NC_DNSResourceRecord":           42,
	"NC_DNSSOA":                      43,
	"NC_DNSSRV":                      44,
	"NC_DNSMX":                       45,
	"NC_DNSQuestion":                 46,
	"NC_DHCPv4":                      47,
	"NC_DHCPOption":                  48,
	"NC_DHCPv6":                      49,
	"NC_DHCPv6Option":                50,
	"NC_LLC":                         51,
	"NC_NTP":                         52,
	"NC_SIP":                         53,
	"NC_IGMP":                        54,
	"NC_IGMPv3GroupRecord":           55,
	"NC_IPv6HopByHop":                56,
	"NC_IPv6HopByHopOption":          57,
	"NC_IPv6HopByHopOptionAlignment": 58,
	"NC_SNAP":                        59,
	"NC_ICMPv6Echo":                  60,
	"NC_ICMPv6NeighborSolicitation":  61,
	"NC_ICMPv6RouterSolicitation":    62,
	"NC_HTTP":                        63,
	"NC_TLSClientHello":              64,
	"NC_IPSecAH":                     65,
	"NC_IPSecESP":                    66,
	"NC_Geneve":                      67,
	"NC_IPv6Fragment":                68,
	"NC_VXLAN":                       69,
	"NC_USB":                         70,
	"NC_LCM":                         71,
	"NC_MPLS":                        72,
	"NC_ModbusTCP":                   73,
	"NC_OSPFv2":                      74,
	"NC_OSPFv3":                      75,
	"NC_BFD":                         76,
	"NC_GRE":                         77,
	"NC_FDDI":                        78,
	"NC_EAP":                         79,
	"NC_VRRPv2":                      80,
}

func (x Type) String() string {
	return proto.EnumName(Type_name, int32(x))
}
func (Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_netcap_62f6063ce3cb4a3e, []int{0}
}

type Header struct {
	Created              string   `protobuf:"bytes,1,opt,name=Created,proto3" json:"Created,omitempty"`
	InputSource          string   `protobuf:"bytes,2,opt,name=InputSource,proto3" json:"InputSource,omitempty"`
	Type                 Type     `protobuf:"varint,3,opt,name=Type,proto3,enum=types.Type" json:"Type,omitempty"`
	Version              string   `protobuf:"bytes,4,opt,name=Version,proto3" json:"Version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Header) Reset()         { *m = Header{} }
func (m *Header) String() string { return proto.CompactTextString(m) }
func (*Header) ProtoMessage()    {}
func (*Header) Descriptor() ([]byte, []int) {
	return fileDescriptor_netcap_62f6063ce3cb4a3e, []int{0}
}
func (m *Header) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Header.Unmarshal(m, b)
}
func (m *Header) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Header.Marshal(b, m, deterministic)
}
func (dst *Header) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Header.Merge(dst, src)
}
func (m *Header) XXX_Size() int {
	return xxx_messageInfo_Header.Size(m)
}
func (m *Header) XXX_DiscardUnknown() {
	xxx_messageInfo_Header.DiscardUnknown(m)
}

var xxx_messageInfo_Header proto.InternalMessageInfo

func (m *Header) GetCreated() string {
	if m != nil {
		return m.Created
	}
	return ""
}

func (m *Header) GetInputSource() string {
	if m != nil {
		return m.InputSource
	}
	return ""
}

func (m *Header) GetType() Type {
	if m != nil {
		return m.Type
	}
	return Type_NC_Header
}

func (m *Header) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type Batch struct {
	ClientID             string   `protobuf:"bytes,1,opt,name=ClientID,proto3" json:"ClientID,omitempty"`
	MessageType          Type     `protobuf:"varint,2,opt,name=MessageType,proto3,enum=types.Type" json:"MessageType,omitempty"`
	Size                 int32    `protobuf:"varint,3,opt,name=Size,proto3" json:"Size,omitempty"`
	Data                 []byte   `protobuf:"bytes,4,opt,name=Data,proto3" json:"Data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Batch) Reset()         { *m = Batch{} }
func (m *Batch) String() string { return proto.CompactTextString(m) }
func (*Batch) ProtoMessage()    {}
func (*Batch) Descriptor() ([]byte, []int) {
	return fileDescriptor_netcap_62f6063ce3cb4a3e, []int{1}
}
func (m *Batch) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Batch.Unmarshal(m, b)
}
func (m *Batch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Batch.Marshal(b, m, deterministic)
}
func (dst *Batch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Batch.Merge(dst, src)
}
func (m *Batch) XXX_Size() int {
	return xxx_messageInfo_Batch.Size(m)
}
func (m *Batch) XXX_DiscardUnknown() {
	xxx_messageInfo_Batch.DiscardUnknown(m)
}

var xxx_messageInfo_Batch proto.InternalMessageInfo

func (m *Batch) GetClientID() string {
	if m != nil {
		return m.ClientID
	}
	return ""
}

func (m *Batch) GetMessageType() Type {
	if m != nil {
		return m.MessageType
	}
	return Type_NC_Header
}

func (m *Batch) GetSize() int32 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *Batch) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// a flow is identified by its network layer and transport layer flows separated by a colon
// format: <networkFlow>:<tranportFlow>
// e.g: 172.16.11.104->201.11.212.81:2673->1511
type Flow struct {
	TimestampFirst       string   `protobuf:"bytes,1,opt,name=TimestampFirst,proto3" json:"TimestampFirst,omitempty"`
	LinkProto            string   `protobuf:"bytes,2,opt,name=LinkProto,proto3" json:"LinkProto,omitempty"`
	NetworkProto         string   `protobuf:"bytes,3,opt,name=NetworkProto,proto3" json:"NetworkProto,omitempty"`
	TransportProto       string   `protobuf:"bytes,4,opt,name=TransportProto,proto3" json:"TransportProto,omitempty"`
	ApplicationProto     string   `protobuf:"bytes,5,opt,name=ApplicationProto,proto3" json:"ApplicationProto,omitempty"`
	SrcMAC               string   `protobuf:"bytes,6,opt,name=SrcMAC,proto3" json:"SrcMAC,omitempty"`
	DstMAC               string   `protobuf:"bytes,7,opt,name=DstMAC,proto3" json:"DstMAC,omitempty"`
	SrcIP                string   `protobuf:"bytes,8,opt,name=SrcIP,proto3" json:"SrcIP,omitempty"`
	SrcPort              string   `protobuf:"bytes,9,opt,name=SrcPort,proto3" json:"SrcPort,omitempty"`
	DstIP                string   `protobuf:"bytes,10,opt,name=DstIP,proto3" json:"DstIP,omitempty"`
	DstPort              string   `protobuf:"bytes,11,opt,name=DstPort,proto3" json:"DstPort,omitempty"`
	Size                 int32    `protobuf:"varint,12,opt,name=Size,proto3" json:"Size,omitempty"`
	AppPayloadSize       int32    `protobuf:"varint,13,opt,name=AppPayloadSize,proto3" json:"AppPayloadSize,omitempty"`
	NumPackets           int32    `protobuf:"varint,14,opt,name=NumPackets,proto3" json:"NumPackets,omitempty"`
	UID                  string   `protobuf:"bytes,15,opt,name=UID,proto3" json:"UID,omitempty"`
	TimestampLast        string   `protobuf:"bytes,16,opt,name=TimestampLast,proto3" json:"TimestampLast,omitempty"`
	Duration             int64    `protobuf:"varint,17,opt,name=Duration,proto3" json:"Duration,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Flow) Reset()         { *m = Flow{} }
func (m *Flow) String() string { return proto.CompactTextString(m) }
func (*Flow) ProtoMessage()    {}
func (*Flow) Descriptor() ([]byte, []int) {
	return fileDescriptor_netcap_62f6063ce3cb4a3e, []int{2}
}
func (m *Flow) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Flow.Unmarshal(m, b)
}
func (m *Flow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Flow.Marshal(b, m, deterministic)
}
func (dst *Flow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Flow.Merge(dst, src)
}
func (m *Flow) XXX_Size() int {
	return xxx_messageInfo_Flow.Size(m)
}
func (m *Flow) XXX_DiscardUnknown() {
	xxx_messageInfo_Flow.DiscardUnknown(m)
}

var xxx_messageInfo_Flow proto.InternalMessageInfo

func (m *Flow) GetTimestampFirst() string {
	if m != nil {
		return m.TimestampFirst
	}
	return ""
}

func (m *Flow) GetLinkProto() string {
	if m != nil {
		return m.LinkProto
	}
	return ""
}

func (m *Flow) GetNetworkProto() string {
	if m != nil {
		return m.NetworkProto
	}
	return ""
}

func (m *Flow) GetTransportProto() string {
	if m != nil {
		return m.TransportProto
	}
	return ""
}

func (m *Flow) GetApplicationProto() string {
	if m != nil {
		return m.ApplicationProto
	}
	return ""
}

func (m *Flow) GetSrcMAC() string {
	if m != nil {
		return m.SrcMAC
	}
	return ""
}

func (m *Flow) GetDstMAC() string {
	if m != nil {
		return m.DstMAC
	}
	return ""
}

func (m *Flow) GetSrcIP() string {
	if m != nil {
		return m.SrcIP
	}
	return ""
}

func (m *Flow) GetSrcPort() string {
	if m != nil {
		return m.SrcPort
	}
	return ""
}

func (m *Flow) GetDstIP() string {
	if m != nil {
		return m.DstIP
	}
	return ""
}

func (m *Flow) GetDstPort() string {
	if m != nil {
		return m.DstPort
	}
	return ""
}

func (m *Flow) GetSize() int32 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *Flow) GetAppPayloadSize() int32 {
	if m != nil {
		return m.AppPayloadSize
	}
	return 0
}

func (m *Flow) GetNumPackets() int32 {
	if m != nil {
		return m.NumPackets
	}
	return 0
}

func (m *Flow) GetUID() string {
	if m != nil {
		return m.UID
	}
	return ""
}

func (m *Flow) GetTimestampLast() string {
	if m != nil {
		return m.TimestampLast
	}
	return ""
}

func (m *Flow) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

// a connection has the following attributes:
// Mac <-> Mac bidirectional Mac
// IP <-> IP bisdirectional IP
// Port <-> Port bidirectional Port
type Connection struct {
	TimestampFirst       string   `protobuf:"bytes,1,opt,name=TimestampFirst,proto3" json:"TimestampFirst,omitempty"`
	LinkProto            string   `protobuf:"bytes,2,opt,name=LinkProto,proto3" json:"LinkProto,omitempty"`
	NetworkProto         string   `protobuf:"bytes,3,opt,name=NetworkProto,proto3" json:"NetworkProto,omitempty"`
	TransportProto       string   `protobuf:"bytes,4,opt,name=TransportProto,proto3" json:"TransportProto,omitempty"`
	ApplicationProto     string   `protobuf:"bytes,5,opt,name=ApplicationProto,proto3" json:"ApplicationProto,omitempty"`
	SrcMAC               string   `protobuf:"bytes,6,opt,name=SrcMAC,proto3" json:"SrcMAC,omitempty"`
	DstMAC               string   `protobuf:"bytes,7,opt,name=DstMAC,proto3" json:"DstMAC,omitempty"`
	SrcIP                string   `protobuf:"bytes,8,opt,name=SrcIP,proto3" json:"SrcIP,omitempty"`
	SrcPort              string   `protobuf:"bytes,9,opt,name=SrcPort,proto3" json:"SrcPort,omitempty"`
	DstIP                string   `protobuf:"bytes,10,opt,name=DstIP,proto3" json:"DstIP,omitempty"`
	DstPort              string   `protobuf:"bytes,11,opt,name=DstPort,proto3" json:"DstPort,omitempty"`
	Size                 int32    `protobuf:"varint,12,opt,name=Size,proto3" json:"Size,omitempty"`
	AppPayloadSize       int32    `protobuf:"varint,13,opt,name=AppPayloadSize,proto3" json:"AppPayloadSize,omitempty"`
	NumPackets           int32    `protobuf:"varint,14,opt,name=NumPackets,proto3" json:"NumPackets,omitempty"`
	UID                  string   `protobuf:"bytes,15,opt,name=UID,proto3" json:"UID,omitempty"`
	TimestampLast        string   `protobuf:"bytes,16,opt,name=TimestampLast,proto3" json:"TimestampLast,omitempty"`
	Duration             int64    `protobuf:"varint,17,opt,name=Duration,proto3" json:"Duration,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Connection) Reset()         { *m = Connection{} }
func (m *Connection) String() string { return proto.CompactTextString(m) }
func (*Connection) ProtoMessage()    {}
func (*Connection) Descriptor() ([]byte, []int) {
	return fileDescriptor_netcap_62f6063ce3cb4a3e, []int{3}
}
func (m *Connection) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Connection.Unmarshal(m, b)
}
func (m *Connection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Connection.Marshal(b, m, deterministic)
}
func (dst *Connection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Connection.Merge(dst, src)
}
func (m *Connection) XXX_Size() int {
	return xxx_messageInfo_Connection.Size(m)
}
func (m *Connection) XXX_DiscardUnknown() {
	xxx_messageInfo_Connection.DiscardUnknown(m)
}

var xxx_messageInfo_Connection proto.InternalMessageInfo

func (m *Connection) GetTimestampFirst() string {
	if m != nil {
		return m.TimestampFirst
	}
	return ""
}

func (m *Connection) GetLinkProto() string {
	if m != nil {
		return m.LinkProto
	}
	return ""
}

func (m *Connection) GetNetworkProto() string {
	if m != nil {
		return m.NetworkProto
	}
	return ""
}

func (m *Connection) GetTransportProto() string {
	if m != nil {
		return m.TransportProto
	}
	return ""
}

func (m *Connection) GetApplicationProto() string {
	if m != nil {
		return m.ApplicationProto
	}
	return ""
}

func (m *Connection) GetSrcMAC() string {
	if m != nil {
		return m.SrcMAC
	}
	return ""
}

func (m *Connection) GetDstMAC() string {
	if m != nil {
		return m.DstMAC
	}
	return ""
}

func (m *Connection) GetSrcIP() string {
	if m != nil {
		return m.SrcIP
	}
	return ""
}

func (m *Connection) GetSrcPort() string {
	if m != nil {
		return m.SrcPort
	}
	return ""
}

func (m *Connection) GetDstIP() string {
	if m != nil {
		return m.DstIP
	}
	return ""
}

func (m *Connection) GetDstPort() string {
	if m != nil {
		return m.DstPort
	}
	return ""
}

func (m *Connection) GetSize() int32 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *Connection) GetAppPayloadSize() int32 {
	if m != nil {
		return m.AppPayloadSize
	}
	return 0
}

func (m *Connection) GetNumPackets() int32 {
	if m != nil {
		return m.NumPackets
	}
	return 0
}

func (m *Connection) GetUID() string {
	if m != nil {
		return m.UID
	}
	return ""
}

func (m *Connection) GetTimestampLast() string {
	if m != nil {
		return m.TimestampLast
	}
	return ""
}

func (m *Connection) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

type LinkFlow struct {
	TimestampFirst       string   `protobuf:"bytes,1,opt,name=TimestampFirst,proto3" json:"TimestampFirst,omitempty"`
	TimestampLast        string   `protobuf:"bytes,2,opt,name=TimestampLast,proto3" json:"TimestampLast,omitempty"`
	Proto                string   `protobuf:"bytes,3,opt,name=Proto,proto3" json:"Proto,omitempty"`
	SrcMAC               string   `protobuf:"bytes,4,opt,name=SrcMAC,proto3" json:"SrcMAC,omitempty"`
	DstMAC               string   `protobuf:"bytes,5,opt,name=DstMAC,proto3" json:"DstMAC,omitempty"`
	Size                 int64    `protobuf:"varint,6,opt,name=Size,proto3" json:"Size,omitempty"`
	NumPackets           int64    `protobuf:"varint,7,opt,name=NumPackets,proto3" json:"NumPackets,omitempty"`
	UID                  uint64   `protobuf:"varint,8,opt,name=UID,proto3" json:"UID,omitempty"`
	Duration             int64    `protobuf:"varint,9,opt,name=Duration,proto3" json:"Duration,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LinkFlow) Reset()         { *m = LinkFlow{} }
func (m *LinkFlow) String() string { return proto.CompactTextString(m) }
func (*LinkFlow) ProtoMessage()    {}
func (*LinkFlow) Descriptor() ([]byte, []int) {
	return fileDescriptor_netcap_62f6063ce3cb4a3e, []int{4}
}
func (m *LinkFlow) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LinkFlow.Unmarshal(m, b)
}
func (m *LinkFlow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LinkFlow.Marshal(b, m, deterministic)
}
func (dst *LinkFlow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LinkFlow.Merge(dst, src)
}
func (m *LinkFlow) XXX_Size() int {
	return xxx_messageInfo_LinkFlow.Size(m)
}
func (m *LinkFlow) XXX_DiscardUnknown() {
	xxx_messageInfo_LinkFlow.DiscardUnknown(m)
}

var xxx_messageInfo_LinkFlow proto.InternalMessageInfo

func (m *LinkFlow) GetTimestampFirst() string {
	if m != nil {
		return m.TimestampFirst
	}
	return ""
}

func (m *LinkFlow) GetTimestampLast() string {
	if m != nil {
		return m.TimestampLast
	}
	return ""
}

func (m *LinkFlow) GetProto() string {
	if m != nil {
		return m.Proto
	}
	return ""
}

func (m *LinkFlow) GetSrcMAC() string {
	if m != nil {
		return m.SrcMAC
	}
	return ""
}

func (m *LinkFlow) GetDstMAC() string {
	if m != nil {
		return m.DstMAC
	}
	return ""
}

func (m *LinkFlow) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *LinkFlow) GetNumPackets() int64 {
	if m != nil {
		return m.NumPackets
	}
	return 0
}

func (m *LinkFlow) GetUID() uint64 {
	if m != nil {
		return m.UID
	}
	return 0
}

func (m *LinkFlow) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

type NetworkFlow struct {
	TimestampFirst       string   `protobuf:"bytes,1,opt,name=TimestampFirst,proto3" json:"TimestampFirst,omitempty"`
	TimestampLast        string   `protobuf:"bytes,2,opt,name=TimestampLast,proto3" json:"TimestampLast,omitempty"`
	Proto                string   `protobuf:"bytes,3,opt,name=Proto,proto3" json:"Proto,omitempty"`
	SrcIP                string   `protobuf:"bytes,4,opt,name=SrcIP,proto3" json:"SrcIP,omitempty"`
	DstIP                string   `protobuf:"bytes,5,opt,name=DstIP,proto3" json:"DstIP,omitempty"`
	Size                 int64    `protobuf:"varint,6,opt,name=Size,proto3" json:"Size,omitempty"`
	NumPackets           int64    `protobuf:"varint,7,opt,name=NumPackets,proto3" json:"NumPackets,omitempty"`
	UID                  uint64   `protobuf:"varint,8,opt,name=UID,proto3" json:"UID,omitempty"`
	Duration             int64    `protobuf:"varint,9,opt,name=Duration,proto3" json:"Duration,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NetworkFlow) Reset()         { *m = NetworkFlow{} }
func (m *NetworkFlow) String() string { return proto.CompactTextString(m) }
func (*NetworkFlow) ProtoMessage()    {}
func (*NetworkFlow) Descriptor() ([]byte, []int) {
	return fileDescriptor_netcap_62f6063ce3cb4a3e, []int{5}
}
func (m *NetworkFlow) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkFlow.Unmarshal(m, b)
}
func (m *NetworkFlow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkFlow.Marshal(b, m, deterministic)
}
func (dst *NetworkFlow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkFlow.Merge(dst, src)
}
func (m *NetworkFlow) XXX_Size() int {
	return xxx_messageInfo_NetworkFlow.Size(m)
}
func (m *NetworkFlow) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkFlow.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkFlow proto.InternalMessageInfo

func (m *NetworkFlow) GetTimestampFirst() string {
	if m != nil {
		return m.TimestampFirst
	}
	return ""
}

func (m *NetworkFlow) GetTimestampLast() string {
	if m != nil {
		return m.TimestampLast
	}
	return ""
}

func (m *NetworkFlow) GetProto() string {
	if m != nil {
		return m.Proto
	}
	return ""
}

func (m *NetworkFlow) GetSrcIP() string {
	if m != nil {
		return m.SrcIP
	}
	return ""
}

func (m *NetworkFlow) GetDstIP() string {
	if m != nil {
		return m.DstIP
	}
	return ""
}

func (m *NetworkFlow) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *NetworkFlow) GetNumPackets() int64 {
	if m != nil {
		return m.NumPackets
	}
	return 0
}

func (m *NetworkFlow) GetUID() uint64 {
	if m != nil {
		return m.UID
	}
	return 0
}

func (m *NetworkFlow) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

type TransportFlow struct {
	TimestampFirst       string   `protobuf:"bytes,1,opt,name=TimestampFirst,proto3" json:"TimestampFirst,omitempty"`
	TimestampLast        string   `protobuf:"bytes,2,opt,name=TimestampLast,proto3" json:"TimestampLast,omitempty"`
	Proto                string   `protobuf:"bytes,3,opt,name=Proto,proto3" json:"Proto,omitempty"`
	SrcPort              int32    `protobuf:"varint,4,opt,name=SrcPort,proto3" json:"SrcPort,omitempty"`
	DstPort              int32    `protobuf:"varint,5,opt,name=DstPort,proto3" json:"DstPort,omitempty"`
	Size                 int64    `protobuf:"varint,6,opt,name=Size,proto3" json:"Size,omitempty"`
	NumPackets           int64    `protobuf:"varint,7,opt,name=NumPackets,proto3" json:"NumPackets,omitempty"`
	UID                  uint64   `protobuf:"varint,8,opt,name=UID,proto3" json:"UID,omitempty"`
	Duration             int64    `protobuf:"varint,9,opt,name=Duration,proto3" json:"Duration,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TransportFlow) Reset()         { *m = TransportFlow{} }
func (m *TransportFlow) String() string { return proto.CompactTextString(m) }
func (*TransportFlow) ProtoMessage()    {}
func (*TransportFlow) Descriptor() ([]byte, []int) {
	return fileDescriptor_netcap_62f6063ce3cb4a3e, []int{6}
}
func (m *TransportFlow) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransportFlow.Unmarshal(m, b)
}
func (m *TransportFlow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransportFlow.Marshal(b, m, deterministic)
}
func (dst *TransportFlow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransportFlow.Merge(dst, src)
}
func (m *TransportFlow) XXX_Size() int {
	return xxx_messageInfo_TransportFlow.Size(m)
}
func (m *TransportFlow) XXX_DiscardUnknown() {
	xxx_messageInfo_TransportFlow.DiscardUnknown(m)
}

var xxx_messageInfo_TransportFlow proto.InternalMessageInfo

func (m *TransportFlow) GetTimestampFirst() string {
	if m != nil {
		return m.TimestampFirst
	}
	return ""
}

func (m *TransportFlow) GetTimestampLast() string {
	if m != nil {
		return m.TimestampLast
	}
	return ""
}

func (m *TransportFlow) GetProto() string {
	if m != nil {
		return m.Proto
	}
	return ""
}

func (m *TransportFlow) GetSrcPort() int32 {
	if m != nil {
		return m.SrcPort
	}
	return 0
}

func (m *TransportFlow) GetDstPort() int32 {
	if m != nil {
		return m.DstPort
	}
	return 0
}

func (m *TransportFlow) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *TransportFlow) GetNumPackets() int64 {
	if m != nil {
		return m.NumPackets
	}
	return 0
}

func (m *TransportFlow) GetUID() uint64 {
	if m != nil {
		return m.UID
	}
	return 0
}

func (m *TransportFlow) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

type Ethernet struct {
	Timestamp            string   `protobuf:"bytes,1,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	SrcMAC               string   `protobuf:"bytes,2,opt,name=SrcMAC,proto3" json:"SrcMAC,omitempty"`
	DstMAC               string   `protobuf:"bytes,3,opt,name=DstMAC,proto3" json:"DstMAC,omitempty"`
	EthernetType         int32    `protobuf:"varint,4,opt,name=EthernetType,proto3" json:"EthernetType,omitempty"`
	PayloadEntropy       float64  `protobuf:"fixed64,5,opt,name=PayloadEntropy,proto3" json:"PayloadEntropy,omitempty"`
	PayloadSize          int32    `protobuf:"varint,6,opt,name=PayloadSize,proto3" json:"PayloadSize,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ethernet) Reset()         { *m = Ethernet{} }
func (m *Ethernet) String() string { return proto.CompactTextString(m) }
func (*Ethernet) ProtoMessage()    {}
func (*Ethernet) Descriptor() ([]byte, []int) {
	return fileDescriptor_netcap_62f6063ce3cb4a3e, []int{7}
}
func (m *Ethernet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ethernet.Unmarshal(m, b)
}
func (m *Ethernet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ethernet.Marshal(b, m, deterministic)
}
func (dst *Ethernet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ethernet.Merge(dst, src)
}
func (m *Ethernet) XXX_Size() int {
	return xxx_messageInfo_Ethernet.Size(m)
}
func (m *Ethernet) XXX_DiscardUnknown() {
	xxx_messageInfo_Ethernet.DiscardUnknown(m)
}

var xxx_messageInfo_Ethernet proto.InternalMessageInfo

func (m *Ethernet) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *Ethernet) GetSrcMAC() string {
	if m != nil {
		return m.SrcMAC
	}
	return ""
}

func (m *Ethernet) GetDstMAC() string {
	if m != nil {
		return m.DstMAC
	}
	return ""
}

func (m *Ethernet) GetEthernetType() int32 {
	if m != nil {
		return m.EthernetType
	}
	return 0
}

func (m *Ethernet) GetPayloadEntropy() float64 {
	if m != nil {
		return m.PayloadEntropy
	}
	return 0
}

func (m *Ethernet) GetPayloadSize() int32 {
	if m != nil {
		return m.PayloadSize
	}
	return 0
}

type ARP struct {
	Timestamp            string   `protobuf:"bytes,1,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	AddrType             int32    `protobuf:"varint,2,opt,name=AddrType,proto3" json:"AddrType,omitempty"`
	Protocol             int32    `protobuf:"varint,3,opt,name=Protocol,proto3" json:"Protocol,omitempty"`
	HwAddressSize        int32    `protobuf:"varint,4,opt,name=HwAddressSize,proto3" json:"HwAddressSize,omitempty"`
	ProtAddressSize      int32    `protobuf:"varint,5,opt,name=ProtAddressSize,proto3" json:"ProtAddressSize,omitempty"`
	Operation            int32    `protobuf:"varint,6,opt,name=Operation,proto3" json:"Operation,omitempty"`
	SrcHwAddress         []byte   `protobuf:"bytes,7,opt,name=SrcHwAddress,proto3" json:"SrcHwAddress,omitempty"`
	SrcProtAddress       []byte   `protobuf:"bytes,8,opt,name=SrcProtAddress,proto3" json:"SrcProtAddress,omitempty"`
	DstHwAddress         []byte   `protobuf:"bytes,9,opt,name=DstHwAddress,proto3" json:"DstHwAddress,omitempty"`
	DstProtAddress       []byte   `protobuf:"bytes,10,opt,name=DstProtAddress,proto3" json:"DstProtAddress,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ARP) Reset()         { *m = ARP{} }
func (m *ARP) String() string { return proto.CompactTextString(m) }
func (*ARP) ProtoMessage()    {}
func (*ARP) Descriptor() ([]byte, []int) {
	return fileDescriptor_netcap_62f6063ce3cb4a3e, []int{8}
}
func (m *ARP) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ARP.Unmarshal(m, b)
}
func (m *ARP) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ARP.Marshal(b, m, deterministic)
}
func (dst *ARP) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ARP.Merge(dst, src)
}
func (m *ARP) XXX_Size() int {
	return xxx_messageInfo_ARP.Size(m)
}
func (m *ARP) XXX_DiscardUnknown() {
	xxx_messageInfo_ARP.DiscardUnknown(m)
}

var xxx_messageInfo_ARP proto.InternalMessageInfo

func (m *ARP) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *ARP) GetAddrType() int32 {
	if m != nil {
		return m.AddrType
	}
	return 0
}

func (m *ARP) GetProtocol() int32 {
	if m != nil {
		return m.Protocol
	}
	return 0
}

func (m *ARP) GetHwAddressSize() int32 {
	if m != nil {
		return m.HwAddressSize
	}
	return 0
}

func (m *ARP) GetProtAddressSize() int32 {
	if m != nil {
		return m.ProtAddressSize
	}
	return 0
}

func (m *ARP) GetOperation() int32 {
	if m != nil {
		return m.Operation
	}
	return 0
}

func (m *ARP) GetSrcHwAddress() []byte {
	if m != nil {
		return m.SrcHwAddress
	}
	return nil
}

func (m *ARP) GetSrcProtAddress() []byte {
	if m != nil {
		return m.SrcProtAddress
	}
	return nil
}

func (m *ARP) GetDstHwAddress() []byte {
	if m != nil {
		return m.DstHwAddress
	}
	return nil
}

func (m *ARP) GetDstProtAddress() []byte {
	if m != nil {
		return m.DstProtAddress
	}
	return nil
}

// Dot1Q is the packet layer for 802.1Q VLAN headers.
type Dot1Q struct {
	Timestamp            string   `protobuf:"bytes,1,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	Priority             int32    `protobuf:"varint,2,opt,name=Priority,proto3" json:"Priority,omitempty"`
	DropEligible         bool     `protobuf:"varint,3,opt,name=DropEligible,proto3" json:"DropEligible,omitempty"`
	VLANIdentifier       int32    `protobuf:"varint,4,opt,name=VLANIdentifier,proto3" json:"VLANIdentifier,omitempty"`
	Type                 int32    `protobuf:"varint,5,opt,name=Type,proto3" json:"Type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Dot1Q) Reset()         { *m = Dot1Q{} }
func (m *Dot1Q) String() string { return proto.CompactTextString(m) }
func (*Dot1Q) ProtoMessage()    {}
func (*Dot1Q) Descriptor() ([]byte, []int) {
	return fileDescriptor_netcap_62f6063ce3cb4a3e, []int{9}
}
func (m *Dot1Q) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Dot1Q.Unmarshal(m, b)
}
func (m *Dot1Q) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Dot1Q.Marshal(b, m, deterministic)
}
func (dst *Dot1Q) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Dot1Q.Merge(dst, src)
}
func (m *Dot1Q) XXX_Size() int {
	return xxx_messageInfo_Dot1Q.Size(m)
}
func (m *Dot1Q) XXX_DiscardUnknown() {
	xxx_messageInfo_Dot1Q.DiscardUnknown(m)
}

var xxx_messageInfo_Dot1Q proto.InternalMessageInfo

func (m *Dot1Q) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *Dot1Q) GetPriority() int32 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func (m *Dot1Q) GetDropEligible() bool {
	if m != nil {
		return m.DropEligible
	}
	return false
}

func (m *Dot1Q) GetVLANIdentifier() int32 {
	if m != nil {
		return m.VLANIdentifier
	}
	return 0
}

func (m *Dot1Q) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

// Dot11 provides an IEEE 802.11 base packet header.
// See http://standards.ieee.org/findstds/standard/802.11-2012.html for excruciating detail.
type Dot11 struct {
	Timestamp            string          `protobuf:"bytes,1,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	Type                 int32           `protobuf:"varint,2,opt,name=Type,proto3" json:"Type,omitempty"`
	Proto                int32           `protobuf:"varint,3,opt,name=Proto,proto3" json:"Proto,omitempty"`
	Flags                int32           `protobuf:"varint,4,opt,name=Flags,proto3" json:"Flags,omitempty"`
	DurationID           int32           `protobuf:"varint,5,opt,name=DurationID,proto3" json:"DurationID,omitempty"`
	Address1             string          `protobuf:"bytes,6,opt,name=Address1,proto3" json:"Address1,omitempty"`
	Address2             string          `protobuf:"bytes,7,opt,name=Address2,proto3" json:"Address2,omitempty"`
	Address3             string          `protobuf:"bytes,8,opt,name=Address3,proto3" json:"Address3,omitempty"`
	Address4             string          `protobuf:"bytes,9,opt,name=Address4,proto3" json:"Address4,omitempty"`
	SequenceNumber       int32           `protobuf:"varint,10,opt,name=SequenceNumber,proto3" json:"SequenceNumber,omitempty"`
	FragmentNumber       int32           `protobuf:"varint,11,opt,name=FragmentNumber,proto3" json:"FragmentNumber,omitempty"`
	Checksum             uint32          `protobuf:"varint,12,opt,name=Checksum,proto3" json:"Checksum,omitempty"`
	QOS                  *Dot11QOS       `protobuf:"bytes,13,opt,name=QOS,proto3" json:"QOS,omitempty"`
	HTControl            *Dot11HTControl `protobuf:"bytes,14,opt,name=HTControl,proto3" json:"HTControl,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Dot11) Reset()         { *m = Dot11{} }
func (m *Dot11) String() string { return proto.CompactTextString(m) }
func (*Dot11) ProtoMessage()    {}
func (*Dot11) Descriptor() ([]byte, []int) {
	return fileDescriptor_netcap_62f6063ce3cb4a3e, []int{10}
}
func (m *Dot11) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Dot11.Unmarshal(m, b)
}
func (m *Dot11) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Dot11.Marshal(b, m, deterministic)
}
func (dst *Dot11) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Dot11.Merge(dst, src)
}
func (m *Dot11) XXX_Size() int {
	return xxx_messageInfo_Dot11.Size(m)
}
func (m *Dot11) XXX_DiscardUnknown() {
	xxx_messageInfo_Dot11.DiscardUnknown(m)
}

var xxx_messageInfo_Dot11 proto.InternalMessageInfo

func (m *Dot11) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *Dot11) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *Dot11) GetProto() int32 {
	if m != nil {
		return m.Proto
	}
	return 0
}

func (m *Dot11) GetFlags() int32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *Dot11) GetDurationID() int32 {
	if m != nil {
		return m.DurationID
	}
	return 0
}

func (m *Dot11) GetAddress1() string {
	if m != nil {
		return m.Address1
	}
	return ""
}

func (m *Dot11) GetAddress2() string {
	if m != nil {
		return m.Address2
	}
	return ""
}

func (m *Dot11) GetAddress3() string {
	if m != nil {
		return m.Address3
	}
	return ""
}

func (m *Dot11) GetAddress4() string {
	if m != nil {
		return m.Address4
	}
	return ""
}

func (m *Dot11) GetSequenceNumber() int32 {
	if m != nil {
		return m.SequenceNumber
	}
	return 0
}

func (m *Dot11) GetFragmentNumber() int32 {
	if m != nil {
		return m.FragmentNumber
	}
	return 0
}

func (m *Dot11) GetChecksum() uint32 {
	if m != nil {
		return m.Checksum
	}
	return 0
}

func (m *Dot11) GetQOS() *Dot11QOS {
	if m != nil {
		return m.QOS
	}
	return nil
}

func (m *Dot11) GetHTControl() *Dot11HTControl {
	if m != nil {
		return m.HTControl
	}
	return nil
}

type Dot11QOS struct {
	TID                  int32    `protobuf:"varint,1,opt,name=TID,proto3" json:"TID,omitempty"`
	EOSP                 bool     `protobuf:"varint,2,opt,name=EOSP,proto3" json:"EOSP,omitempty"`
	AckPolicy            int32    `protobuf:"varint,3,opt,name=AckPolicy,proto3" json:"AckPolicy,omitempty"`
	TXOP                 int32    `protobuf:"varint,4,opt,name=TXOP,proto3" json:"TXOP,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Dot11QOS) Reset()         { *m = Dot11QOS{} }
func (m *Dot11QOS) String() string { return proto.CompactTextString(m) }
func (*Dot11QOS) ProtoMessage()    {}
func (*Dot11QOS) Descriptor() ([]byte, []int) {
	return fileDescriptor_netcap_62f6063ce3cb4a3e, []int{11}
}
func (m *Dot11QOS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Dot11QOS.Unmarshal(m, b)
}
func (m *Dot11QOS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Dot11QOS.Marshal(b, m, deterministic)
}
func (dst *Dot11QOS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Dot11QOS.Merge(dst, src)
}
func (m *Dot11QOS) XXX_Size() int {
	return xxx_messageInfo_Dot11QOS.Size(m)
}
func (m *Dot11QOS) XXX_DiscardUnknown() {
	xxx_messageInfo_Dot11QOS.DiscardUnknown(m)
}

var xxx_messageInfo_Dot11QOS proto.InternalMessageInfo

func (m *Dot11QOS) GetTID() int32 {
	if m != nil {
		return m.TID
	}
	return 0
}

func (m *Dot11QOS) GetEOSP() bool {
	if m != nil {
		return m.EOSP
	}
	return false
}

func (m *Dot11QOS) GetAckPolicy() int32 {
	if m != nil {
		return m.AckPolicy
	}
	return 0
}

func (m *Dot11QOS) GetTXOP() int32 {
	if m != nil {
		return m.TXOP
	}
	return 0
}

type Dot11HTControl struct {
	ACConstraint         bool               `protobuf:"varint,1,opt,name=ACConstraint,proto3" json:"ACConstraint,omitempty"`
	RDGMorePPDU          bool               `protobuf:"varint,2,opt,name=RDGMorePPDU,proto3" json:"RDGMorePPDU,omitempty"`
	VHT                  *Dot11HTControlVHT `protobuf:"bytes,3,opt,name=VHT,proto3" json:"VHT,omitempty"`
	HT                   *Dot11HTControlHT  `protobuf:"bytes,4,opt,name=HT,proto3" json:"HT,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Dot11HTControl) Reset()         { *m = Dot11HTControl{} }
func (m *Dot11HTControl) String() string { return proto.CompactTextString(m) }
func (*Dot11HTControl) ProtoMessage()    {}
func (*Dot11HTControl) Descriptor() ([]byte, []int) {
	return fileDescriptor_netcap_62f6063ce3cb4a3e, []int{12}
}
func (m *Dot11HTControl) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Dot11HTControl.Unmarshal(m, b)
}
func (m *Dot11HTControl) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Dot11HTControl.Marshal(b, m, deterministic)
}
func (dst *Dot11HTControl) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Dot11HTControl.Merge(dst, src)
}
func (m *Dot11HTControl) XXX_Size() int {
	return xxx_messageInfo_Dot11HTControl.Size(m)
}
func (m *Dot11HTControl) XXX_DiscardUnknown() {
	xxx_messageInfo_Dot11HTControl.DiscardUnknown(m)
}

var xxx_messageInfo_Dot11HTControl proto.InternalMessageInfo

func (m *Dot11HTControl) GetACConstraint() bool {
	if m != nil {
		return m.ACConstraint
	}
	return false
}

func (m *Dot11HTControl) GetRDGMorePPDU() bool {
	if m != nil {
		return m.RDGMorePPDU
	}
	return false
}

func (m *Dot11HTControl) GetVHT() *Dot11HTControlVHT {
	if m != nil {
		return m.VHT
	}
	return nil
}

func (m *Dot11HTControl) GetHT() *Dot11HTControlHT {
	if m != nil {
		return m.HT
	}
	return nil
}

type Dot11HTControlVHT struct {
	MRQ                  bool               `protobuf:"varint,1,opt,name=MRQ,proto3" json:"MRQ,omitempty"`
	UnsolicitedMFB       bool               `protobuf:"varint,2,opt,name=UnsolicitedMFB,proto3" json:"UnsolicitedMFB,omitempty"`
	MSI                  int32              `protobuf:"varint,3,opt,name=MSI,proto3" json:"MSI,omitempty"`
	MFB                  *Dot11HTControlMFB `protobuf:"bytes,4,opt,name=MFB,proto3" json:"MFB,omitempty"`
	CompressedMSI        int32              `protobuf:"varint,5,opt,name=CompressedMSI,proto3" json:"CompressedMSI,omitempty"`
	STBCIndication       bool               `protobuf:"varint,6,opt,name=STBCIndication,proto3" json:"STBCIndication,omitempty"`
	MFSI                 int32              `protobuf:"varint,7,opt,name=MFSI,proto3" json:"MFSI,omitempty"`
	GID                  int32              `protobuf:"varint,8,opt,name=GID,proto3" json:"GID,omitempty"`
	CodingType           int32              `protobuf:"varint,9,opt,name=CodingType,proto3" json:"CodingType,omitempty"`
	FbTXBeamformed       bool               `protobuf:"varint,10,opt,name=FbTXBeamformed,proto3" json:"FbTXBeamformed,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Dot11HTControlVHT) Reset()         { *m = Dot11HTControlVHT{} }
func (m *Dot11HTControlVHT) String() string { return proto.CompactTextString(m) }
func (*Dot11HTControlVHT) ProtoMessage()    {}
func (*Dot11HTControlVHT) Descriptor() ([]byte, []int) {
	return fileDescriptor_netcap_62f6063ce3cb4a3e, []int{13}
}
func (m *Dot11HTControlVHT) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Dot11HTControlVHT.Unmarshal(m, b)
}
func (m *Dot11HTControlVHT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Dot11HTControlVHT.Marshal(b, m, deterministic)
}
func (dst *Dot11HTControlVHT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Dot11HTControlVHT.Merge(dst, src)
}
func (m *Dot11HTControlVHT) XXX_Size() int {
	return xxx_messageInfo_Dot11HTControlVHT.Size(m)
}
func (m *Dot11HTControlVHT) XXX_DiscardUnknown() {
	xxx_messageInfo_Dot11HTControlVHT.DiscardUnknown(m)
}

var xxx_messageInfo_Dot11HTControlVHT proto.InternalMessageInfo

func (m *Dot11HTControlVHT) GetMRQ() bool {
	if m != nil {
		return m.MRQ
	}
	return false
}

func (m *Dot11HTControlVHT) GetUnsolicitedMFB() bool {
	if m != nil {
		return m.UnsolicitedMFB
	}
	return false
}

func (m *Dot11HTControlVHT) GetMSI() int32 {
	if m != nil {
		return m.MSI
	}
	return 0
}

func (m *Dot11HTControlVHT) GetMFB() *Dot11HTControlMFB {
	if m != nil {
		return m.MFB
	}
	return nil
}

func (m *Dot11HTControlVHT) GetCompressedMSI() int32 {
	if m != nil {
		return m.CompressedMSI
	}
	return 0
}

func (m *Dot11HTControlVHT) GetSTBCIndication() bool {
	if m != nil {
		return m.STBCIndication
	}
	return false
}

func (m *Dot11HTControlVHT) GetMFSI() int32 {
	if m != nil {
		return m.MFSI
	}
	return 0
}

func (m *Dot11HTControlVHT) GetGID() int32 {
	if m != nil {
		return m.GID
	}
	return 0
}

func (m *Dot11HTControlVHT) GetCodingType() int32 {
	if m != nil {
		return m.CodingType
	}
	return 0
}

func (m *Dot11HTControlVHT) GetFbTXBeamformed() bool {
	if m != nil {
		return m.FbTXBeamformed
	}
	return false
}

type Dot11HTControlHT struct {
	LinkAdapationControl *Dot11LinkAdapationControl `protobuf:"bytes,1,opt,name=LinkAdapationControl,proto3" json:"LinkAdapationControl,omitempty"`
	CalibrationPosition  int32                      `protobuf:"varint,2,opt,name=CalibrationPosition,proto3" json:"CalibrationPosition,omitempty"`
	CalibrationSequence  int32                      `protobuf:"varint,3,opt,name=CalibrationSequence,proto3" json:"CalibrationSequence,omitempty"`
	CSISteering          int32                      `protobuf:"varint,4,opt,name=CSISteering,proto3" json:"CSISteering,omitempty"`
	NDPAnnouncement      bool                       `protobuf:"varint,5,opt,name=NDPAnnouncement,proto3" json:"NDPAnnouncement,omitempty"`
	DEI                  bool                       `protobuf:"varint,6,opt,name=DEI,proto3" json:"DEI,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *Dot11HTControlHT) Reset()         { *m = Dot11HTControlHT{} }
func (m *Dot11HTControlHT) String() string { return proto.CompactTextString(m) }
func (*Dot11HTControlHT) ProtoMessage()    {}
func (*Dot11HTControlHT) Descriptor() ([]byte, []int) {
	return fileDescriptor_netcap_62f6063ce3cb4a3e, []int{14}
}
func (m *Dot11HTControlHT) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Dot11HTControlHT.Unmarshal(m, b)
}
func (m *Dot11HTControlHT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Dot11HTControlHT.Marshal(b, m, deterministic)
}
func (dst *Dot11HTControlHT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Dot11HTControlHT.Merge(dst, src)
}
func (m *Dot11HTControlHT) XXX_Size() int {
	return xxx_messageInfo_Dot11HTControlHT.Size(m)
}
func (m *Dot11HTControlHT) XXX_DiscardUnknown() {
	xxx_messageInfo_Dot11HTControlHT.DiscardUnknown(m)
}

var xxx_messageInfo_Dot11HTControlHT proto.InternalMessageInfo

func (m *Dot11HTControlHT) GetLinkAdapationControl() *Dot11LinkAdapationControl {
	if m != nil {
		return m.LinkAdapationControl
	}
	return nil
}

func (m *Dot11HTControlHT) GetCalibrationPosition() int32 {
	if m != nil {
		return m.CalibrationPosition
	}
	return 0
}

func (m *Dot11HTControlHT) GetCalibrationSequence() int32 {
	if m != nil {
		return m.CalibrationSequence
	}
	return 0
}

func (m *Dot11HTControlHT) GetCSISteering() int32 {
	if m != nil {
		return m.CSISteering
	}
	return 0
}

func (m *Dot11HTControlHT) GetNDPAnnouncement() bool {
	if m != nil {
		return m.NDPAnnouncement
	}
	return false
}

func (m *Dot11HTControlHT) GetDEI() bool {
	if m != nil {
		return m.DEI
	}
	return false
}

type Dot11HTControlMFB struct {
	NumSTS               int32    `protobuf:"varint,1,opt,name=NumSTS,proto3" json:"NumSTS,omitempty"`
	VHTMCS               int32    `protobuf:"varint,2,opt,name=VHTMCS,proto3" json:"VHTMCS,omitempty"`
	BW                   int32    `protobuf:"varint,3,opt,name=BW,proto3" json:"BW,omitempty"`
	SNR                  int32    `protobuf:"varint,4,opt,name=SNR,proto3" json:"SNR,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Dot11HTControlMFB) Reset()         { *m = Dot11HTControlMFB{} }
func (m *Dot11HTControlMFB) String() string { return proto.CompactTextString(m) }
func (*Dot11HTControlMFB) ProtoMessage()    {}
func (*Dot11HTControlMFB) Descriptor() ([]byte, []int) {
	return fileDescriptor_netcap_62f6063ce3cb4a3e, []int{15}
}
func (m *Dot11HTControlMFB) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Dot11HTControlMFB.Unmarshal(m, b)
}
func (m *Dot11HTControlMFB) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Dot11HTControlMFB.Marshal(b, m, deterministic)
}
func (dst *Dot11HTControlMFB) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Dot11HTControlMFB.Merge(dst, src)
}
func (m *Dot11HTControlMFB) XXX_Size() int {
	return xxx_messageInfo_Dot11HTControlMFB.Size(m)
}
func (m *Dot11HTControlMFB) XXX_DiscardUnknown() {
	xxx_messageInfo_Dot11HTControlMFB.DiscardUnknown(m)
}

var xxx_messageInfo_Dot11HTControlMFB proto.InternalMessageInfo

func (m *Dot11HTControlMFB) GetNumSTS() int32 {
	if m != nil {
		return m.NumSTS
	}
	return 0
}

func (m *Dot11HTControlMFB) GetVHTMCS() int32 {
	if m != nil {
		return m.VHTMCS
	}
	return 0
}

func (m *Dot11HTControlMFB) GetBW() int32 {
	if m != nil {
		return m.BW
	}
	return 0
}

func (m *Dot11HTControlMFB) GetSNR() int32 {
	if m != nil {
		return m.SNR
	}
	return 0
}

type Dot11LinkAdapationControl struct {
	TRQ                  bool       `protobuf:"varint,1,opt,name=TRQ,proto3" json:"TRQ,omitempty"`
	MRQ                  bool       `protobuf:"varint,2,opt,name=MRQ,proto3" json:"MRQ,omitempty"`
	MSI                  int32      `protobuf:"varint,3,opt,name=MSI,proto3" json:"MSI,omitempty"`
	MFSI                 int32      `protobuf:"varint,4,opt,name=MFSI,proto3" json:"MFSI,omitempty"`
	MFB                  int32      `protobuf:"varint,6,opt,name=MFB,proto3" json:"MFB,omitempty"`
	ASEL                 *Dot11ASEL `protobuf:"bytes,5,opt,name=ASEL,proto3" json:"ASEL,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Dot11LinkAdapationControl) Reset()         { *m = Dot11LinkAdapationControl{} }
func (m *Dot11LinkAdapationControl) String() string { return proto.CompactTextString(m) }
func (*Dot11LinkAdapationControl) ProtoMessage()    {}
func (*Dot11LinkAdapationControl) Descriptor() ([]byte, []int) {
	return fileDescriptor_netcap_62f6063ce3cb4a3e, []int{16}
}
func (m *Dot11LinkAdapationControl) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Dot11LinkAdapationControl.Unmarshal(m, b)
}
func (m *Dot11LinkAdapationControl) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Dot11LinkAdapationControl.Marshal(b, m, deterministic)
}
func (dst *Dot11LinkAdapationControl) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Dot11LinkAdapationControl.Merge(dst, src)
}
func (m *Dot11LinkAdapationControl) XXX_Size() int {
	return xxx_messageInfo_Dot11LinkAdapationControl.Size(m)
}
func (m *Dot11LinkAdapationControl) XXX_DiscardUnknown() {
	xxx_messageInfo_Dot11LinkAdapationControl.DiscardUnknown(m)
}

var xxx_messageInfo_Dot11LinkAdapationControl proto.InternalMessageInfo

func (m *Dot11LinkAdapationControl) GetTRQ() bool {
	if m != nil {
		return m.TRQ
	}
	return false
}

func (m *Dot11LinkAdapationControl) GetMRQ() bool {
	if m != nil {
		return m.MRQ
	}
	return false
}

func (m *Dot11LinkAdapationControl) GetMSI() int32 {
	if m != nil {
		return m.MSI
	}
	return 0
}

func (m *Dot11LinkAdapationControl) GetMFSI() int32 {
	if m != nil {
		return m.MFSI
	}
	return 0
}

func (m *Dot11LinkAdapationControl) GetMFB() int32 {
	if m != nil {
		return m.MFB
	}
	return 0
}

func (m *Dot11LinkAdapationControl) GetASEL() *Dot11ASEL {
	if m != nil {
		return m.ASEL
	}
	return nil
}

type Dot11ASEL struct {
	Command              int32    `protobuf:"varint,1,opt,name=Command,proto3" json:"Command,omitempty"`
	Data                 int32    `protobuf:"varint,2,opt,name=Data,proto3" json:"Data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Dot11ASEL) Reset()         { *m = Dot11ASEL{} }
func (m *Dot11ASEL) String() string { return proto.CompactTextString(m) }
func (*Dot11ASEL) ProtoMessage()    {}
func (*Dot11ASEL) Descriptor() ([]byte, []int) {
	return fileDescriptor_netcap_62f6063ce3cb4a3e, []int{17}
}
func (m *Dot11ASEL) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Dot11ASEL.Unmarshal(m, b)
}
func (m *Dot11ASEL) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Dot11ASEL.Marshal(b, m, deterministic)
}
func (dst *Dot11ASEL) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Dot11ASEL.Merge(dst, src)
}
func (m *Dot11ASEL) XXX_Size() int {
	return xxx_messageInfo_Dot11ASEL.Size(m)
}
func (m *Dot11ASEL) XXX_DiscardUnknown() {
	xxx_messageInfo_Dot11ASEL.DiscardUnknown(m)
}

var xxx_messageInfo_Dot11ASEL proto.InternalMessageInfo

func (m *Dot11ASEL) GetCommand() int32 {
	if m != nil {
		return m.Command
	}
	return 0
}

func (m *Dot11ASEL) GetData() int32 {
	if m != nil {
		return m.Data
	}
	return 0
}

type LinkLayerDiscovery struct {
	Timestamp            string                     `protobuf:"bytes,1,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	ChassisID            *LLDPChassisID             `protobuf:"bytes,2,opt,name=ChassisID,proto3" json:"ChassisID,omitempty"`
	PortID               *LLDPPortID                `protobuf:"bytes,3,opt,name=PortID,proto3" json:"PortID,omitempty"`
	TTL                  int32                      `protobuf:"varint,4,opt,name=TTL,proto3" json:"TTL,omitempty"`
	Values               []*LinkLayerDiscoveryValue `protobuf:"bytes,5,rep,name=Values,proto3" json:"Values,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *LinkLayerDiscovery) Reset()         { *m = LinkLayerDiscovery{} }
func (m *LinkLayerDiscovery) String() string { return proto.CompactTextString(m) }
func (*LinkLayerDiscovery) ProtoMessage()    {}
func (*LinkLayerDiscovery) Descriptor() ([]byte, []int) {
	return fileDescriptor_netcap_62f6063ce3cb4a3e, []int{18}
}
func (m *LinkLayerDiscovery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LinkLayerDiscovery.Unmarshal(m, b)
}
func (m *LinkLayerDiscovery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LinkLayerDiscovery.Marshal(b, m, deterministic)
}
func (dst *LinkLayerDiscovery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LinkLayerDiscovery.Merge(dst, src)
}
func (m *LinkLayerDiscovery) XXX_Size() int {
	return xxx_messageInfo_LinkLayerDiscovery.Size(m)
}
func (m *LinkLayerDiscovery) XXX_DiscardUnknown() {
	xxx_messageInfo_LinkLayerDiscovery.DiscardUnknown(m)
}

var xxx_messageInfo_LinkLayerDiscovery proto.InternalMessageInfo

func (m *LinkLayerDiscovery) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *LinkLayerDiscovery) GetChassisID() *LLDPChassisID {
	if m != nil {
		return m.ChassisID
	}
	return nil
}

func (m *LinkLayerDiscovery) GetPortID() *LLDPPortID {
	if m != nil {
		return m.PortID
	}
	return nil
}

func (m *LinkLayerDiscovery) GetTTL() int32 {
	if m != nil {
		return m.TTL
	}
	return 0
}

func (m *LinkLayerDiscovery) GetValues() []*LinkLayerDiscoveryValue {
	if m != nil {
		return m.Values
	}
	return nil
}

type LLDPChassisID struct {
	Subtype              int32    `protobuf:"varint,1,opt,name=Subtype,proto3" json:"Subtype,omitempty"`
	ID                   []byte   `protobuf:"bytes,2,opt,name=ID,proto3" json:"ID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LLDPChassisID) Reset()         { *m = LLDPChassisID{} }
func (m *LLDPChassisID) String() string { return proto.CompactTextString(m) }
func (*LLDPChassisID) ProtoMessage()    {}
func (*LLDPChassisID) Descriptor() ([]byte, []int) {
	return fileDescriptor_netcap_62f6063ce3cb4a3e, []int{19}
}
func (m *LLDPChassisID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LLDPChassisID.Unmarshal(m, b)
}
func (m *LLDPChassisID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LLDPChassisID.Marshal(b, m, deterministic)
}
func (dst *LLDPChassisID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LLDPChassisID.Merge(dst, src)
}
func (m *LLDPChassisID) XXX_Size() int {
	return xxx_messageInfo_LLDPChassisID.Size(m)
}
func (m *LLDPChassisID) XXX_DiscardUnknown() {
	xxx_messageInfo_LLDPChassisID.DiscardUnknown(m)
}

var xxx_messageInfo_LLDPChassisID proto.InternalMessageInfo

func (m *LLDPChassisID) GetSubtype() int32 {
	if m != nil {
		return m.Subtype
	}
	return 0
}

func (m *LLDPChassisID) GetID() []byte {
	if m != nil {
		return m.ID
	}
	return nil
}

type LLDPPortID struct {
	Subtype              int32    `protobuf:"varint,1,opt,name=Subtype,proto3" json:"Subtype,omitempty"`
	ID                   []byte   `protobuf:"bytes,2,opt,name=ID,proto3" json:"ID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LLDPPortID) Reset()         { *m = LLDPPortID{} }
func (m *LLDPPortID) String() string { return proto.CompactTextString(m) }
func (*LLDPPortID) ProtoMessage()    {}
func (*LLDPPortID) Descriptor() ([]byte, []int) {
	return fileDescriptor_netcap_62f6063ce3cb4a3e, []int{20}
}
func (m *LLDPPortID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LLDPPortID.Unmarshal(m, b)
}
func (m *LLDPPortID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LLDPPortID.Marshal(b, m, deterministic)
}
func (dst *LLDPPortID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LLDPPortID.Merge(dst, src)
}
func (m *LLDPPortID) XXX_Size() int {
	return xxx_messageInfo_LLDPPortID.Size(m)
}
func (m *LLDPPortID) XXX_DiscardUnknown() {
	xxx_messageInfo_LLDPPortID.DiscardUnknown(m)
}

var xxx_messageInfo_LLDPPortID proto.InternalMessageInfo

func (m *LLDPPortID) GetSubtype() int32 {
	if m != nil {
		return m.Subtype
	}
	return 0
}

func (m *LLDPPortID) GetID() []byte {
	if m != nil {
		return m.ID
	}
	return nil
}

type LinkLayerDiscoveryValue struct {
	Type                 int32    `protobuf:"varint,1,opt,name=Type,proto3" json:"Type,omitempty"`
	Length               int32    `protobuf:"varint,2,opt,name=Length,proto3" json:"Length,omitempty"`
	Value                []byte   `protobuf:"bytes,3,opt,name=Value,proto3" json:"Value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LinkLayerDiscoveryValue) Reset()         { *m = LinkLayerDiscoveryValue{} }
func (m *LinkLayerDiscoveryValue) String() string { return proto.CompactTextString(m) }
func (*LinkLayerDiscoveryValue) ProtoMessage()    {}
func (*LinkLayerDiscoveryValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_netcap_62f6063ce3cb4a3e, []int{21}
}
func (m *LinkLayerDiscoveryValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LinkLayerDiscoveryValue.Unmarshal(m, b)
}
func (m *LinkLayerDiscoveryValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LinkLayerDiscoveryValue.Marshal(b, m, deterministic)
}
func (dst *LinkLayerDiscoveryValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LinkLayerDiscoveryValue.Merge(dst, src)
}
func (m *LinkLayerDiscoveryValue) XXX_Size() int {
	return xxx_messageInfo_LinkLayerDiscoveryValue.Size(m)
}
func (m *LinkLayerDiscoveryValue) XXX_DiscardUnknown() {
	xxx_messageInfo_LinkLayerDiscoveryValue.DiscardUnknown(m)
}

var xxx_messageInfo_LinkLayerDiscoveryValue proto.InternalMessageInfo

func (m *LinkLayerDiscoveryValue) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *LinkLayerDiscoveryValue) GetLength() int32 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *LinkLayerDiscoveryValue) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type EthernetCTP struct {
	Timestamp            string   `protobuf:"bytes,1,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	SkipCount            int32    `protobuf:"varint,2,opt,name=SkipCount,proto3" json:"SkipCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EthernetCTP) Reset()         { *m = EthernetCTP{} }
func (m *EthernetCTP) String() string { return proto.CompactTextString(m) }
func (*EthernetCTP) ProtoMessage()    {}
func (*EthernetCTP) Descriptor() ([]byte, []int) {
	return fileDescriptor_netcap_62f6063ce3cb4a3e, []int{22}
}
func (m *EthernetCTP) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EthernetCTP.Unmarshal(m, b)
}
func (m *EthernetCTP) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EthernetCTP.Marshal(b, m, deterministic)
}
func (dst *EthernetCTP) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EthernetCTP.Merge(dst, src)
}
func (m *EthernetCTP) XXX_Size() int {
	return xxx_messageInfo_EthernetCTP.Size(m)
}
func (m *EthernetCTP) XXX_DiscardUnknown() {
	xxx_messageInfo_EthernetCTP.DiscardUnknown(m)
}

var xxx_messageInfo_EthernetCTP proto.InternalMessageInfo

func (m *EthernetCTP) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *EthernetCTP) GetSkipCount() int32 {
	if m != nil {
		return m.SkipCount
	}
	return 0
}

type EthernetCTPReply struct {
	Timestamp            string   `protobuf:"bytes,1,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	Function             int32    `protobuf:"varint,2,opt,name=Function,proto3" json:"Function,omitempty"`
	ReceiptNumber        int32    `protobuf:"varint,3,opt,name=ReceiptNumber,proto3" json:"ReceiptNumber,omitempty"`
	Data                 []byte   `protobuf:"bytes,4,opt,name=Data,proto3" json:"Data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EthernetCTPReply) Reset()         { *m = EthernetCTPReply{} }
func (m *EthernetCTPReply) String() string { return proto.CompactTextString(m) }
func (*EthernetCTPReply) ProtoMessage()    {}
func (*EthernetCTPReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_netcap_62f6063ce3cb4a3e, []int{23}
}
func (m *EthernetCTPReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EthernetCTPReply.Unmarshal(m, b)
}
func (m *EthernetCTPReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EthernetCTPReply.Marshal(b, m, deterministic)
}
func (dst *EthernetCTPReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EthernetCTPReply.Merge(dst, src)
}
func (m *EthernetCTPReply) XXX_Size() int {
	return xxx_messageInfo_EthernetCTPReply.Size(m)
}
func (m *EthernetCTPReply) XXX_DiscardUnknown() {
	xxx_messageInfo_EthernetCTPReply.DiscardUnknown(m)
}

var xxx_messageInfo_EthernetCTPReply proto.InternalMessageInfo

func (m *EthernetCTPReply) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *EthernetCTPReply) GetFunction() int32 {
	if m != nil {
		return m.Function
	}
	return 0
}

func (m *EthernetCTPReply) GetReceiptNumber() int32 {
	if m != nil {
		return m.ReceiptNumber
	}
	return 0
}

func (m *EthernetCTPReply) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type LinkLayerDiscoveryInfo struct {
	Timestamp            string                     `protobuf:"bytes,1,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	PortDescription      string                     `protobuf:"bytes,2,opt,name=PortDescription,proto3" json:"PortDescription,omitempty"`
	SysName              string                     `protobuf:"bytes,3,opt,name=SysName,proto3" json:"SysName,omitempty"`
	SysDescription       string                     `protobuf:"bytes,4,opt,name=SysDescription,proto3" json:"SysDescription,omitempty"`
	SysCapabilities      *LLDPSysCapabilities       `protobuf:"bytes,5,opt,name=SysCapabilities,proto3" json:"SysCapabilities,omitempty"`
	MgmtAddress          *LLDPMgmtAddress           `protobuf:"bytes,6,opt,name=MgmtAddress,proto3" json:"MgmtAddress,omitempty"`
	OrgTLVs              []*LLDPOrgSpecificTLV      `protobuf:"bytes,7,rep,name=OrgTLVs,proto3" json:"OrgTLVs,omitempty"`
	Unknown              []*LinkLayerDiscoveryValue `protobuf:"bytes,8,rep,name=Unknown,proto3" json:"Unknown,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *LinkLayerDiscoveryInfo) Reset()         { *m = LinkLayerDiscoveryInfo{} }
func (m *LinkLayerDiscoveryInfo) String() string { return proto.CompactTextString(m) }
func (*LinkLayerDiscoveryInfo) ProtoMessage()    {}
func (*LinkLayerDiscoveryInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_netcap_62f6063ce3cb4a3e, []int{24}
}
func (m *LinkLayerDiscoveryInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LinkLayerDiscoveryInfo.Unmarshal(m, b)
}
func (m *LinkLayerDiscoveryInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LinkLayerDiscoveryInfo.Marshal(b, m, deterministic)
}
func (dst *LinkLayerDiscoveryInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LinkLayerDiscoveryInfo.Merge(dst, src)
}
func (m *LinkLayerDiscoveryInfo) XXX_Size() int {
	return xxx_messageInfo_LinkLayerDiscoveryInfo.Size(m)
}
func (m *LinkLayerDiscoveryInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_LinkLayerDiscoveryInfo.DiscardUnknown(m)
}

var xxx_messageInfo_LinkLayerDiscoveryInfo proto.InternalMessageInfo

func (m *LinkLayerDiscoveryInfo) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *LinkLayerDiscoveryInfo) GetPortDescription() string {
	if m != nil {
		return m.PortDescription
	}
	return ""
}

func (m *LinkLayerDiscoveryInfo) GetSysName() string {
	if m != nil {
		return m.SysName
	}
	return ""
}

func (m *LinkLayerDiscoveryInfo) GetSysDescription() string {
	if m != nil {
		return m.SysDescription
	}
	return ""
}

func (m *LinkLayerDiscoveryInfo) GetSysCapabilities() *LLDPSysCapabilities {
	if m != nil {
		return m.SysCapabilities
	}
	return nil
}

func (m *LinkLayerDiscoveryInfo) GetMgmtAddress() *LLDPMgmtAddress {
	if m != nil {
		return m.MgmtAddress
	}
	return nil
}

func (m *LinkLayerDiscoveryInfo) GetOrgTLVs() []*LLDPOrgSpecificTLV {
	if m != nil {
		return m.OrgTLVs
	}
	return nil
}

func (m *LinkLayerDiscoveryInfo) GetUnknown() []*LinkLayerDiscoveryValue {
	if m != nil {
		return m.Unknown
	}
	return nil
}

type LLDPSysCapabilities struct {
	SystemCap            *LLDPCapabilities `protobuf:"bytes,1,opt,name=SystemCap,proto3" json:"SystemCap,omitempty"`
	EnabledCap           *LLDPCapabilities `protobuf:"bytes,2,opt,name=EnabledCap,proto3" json:"EnabledCap,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *LLDPSysCapabilities) Reset()         { *m = LLDPSysCapabilities{} }
func (m *LLDPSysCapabilities) String() string { return proto.CompactTextString(m) }
func (*LLDPSysCapabilities) ProtoMessage()    {}
func (*LLDPSysCapabilities) Descriptor() ([]byte, []int) {
	return fileDescriptor_netcap_62f6063ce3cb4a3e, []int{25}
}
func (m *LLDPSysCapabilities) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LLDPSysCapabilities.Unmarshal(m, b)
}
func (m *LLDPSysCapabilities) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LLDPSysCapabilities.Marshal(b, m, deterministic)
}
func (dst *LLDPSysCapabilities) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LLDPSysCapabilities.Merge(dst, src)
}
func (m *LLDPSysCapabilities) XXX_Size() int {
	return xxx_messageInfo_LLDPSysCapabilities.Size(m)
}
func (m *LLDPSysCapabilities) XXX_DiscardUnknown() {
	xxx_messageInfo_LLDPSysCapabilities.DiscardUnknown(m)
}

var xxx_messageInfo_LLDPSysCapabilities proto.InternalMessageInfo

func (m *LLDPSysCapabilities) GetSystemCap() *LLDPCapabilities {
	if m != nil {
		return m.SystemCap
	}
	return nil
}

func (m *LLDPSysCapabilities) GetEnabledCap() *LLDPCapabilities {
	if m != nil {
		return m.EnabledCap
	}
	return nil
}

type LLDPCapabilities struct {
	Other                bool     `protobuf:"varint,1,opt,name=Other,proto3" json:"Other,omitempty"`
	Repeater             bool     `protobuf:"varint,2,opt,name=Repeater,proto3" json:"Repeater,omitempty"`
	Bridge               bool     `protobuf:"varint,3,opt,name=Bridge,proto3" json:"Bridge,omitempty"`
	WLANAP               bool     `protobuf:"varint,4,opt,name=WLANAP,proto3" json:"WLANAP,omitempty"`
	Router               bool     `protobuf:"varint,5,opt,name=Router,proto3" json:"Router,omitempty"`
	Phone                bool     `protobuf:"varint,6,opt,name=Phone,proto3" json:"Phone,omitempty"`
	DocSis               bool     `protobuf:"varint,7,opt,name=DocSis,proto3" json:"DocSis,omitempty"`
	StationOnly          bool     `protobuf:"varint,8,opt,name=StationOnly,proto3" json:"StationOnly,omitempty"`
	CVLAN                bool     `protobuf:"varint,9,opt,name=CVLAN,proto3" json:"CVLAN,omitempty"`
	SVLAN                bool     `protobuf:"varint,10,opt,name=SVLAN,proto3" json:"SVLAN,omitempty"`
	TMPR                 bool     `protobuf:"varint,11,opt,name=TMPR,proto3" json:"TMPR,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LLDPCapabilities) Reset()         { *m = LLDPCapabilities{} }
func (m *LLDPCapabilities) String() string { return proto.CompactTextString(m) }
func (*LLDPCapabilities) ProtoMessage()    {}
func (*LLDPCapabilities) Descriptor() ([]byte, []int) {
	return fileDescriptor_netcap_62f6063ce3cb4a3e, []int{26}
}
func (m *LLDPCapabilities) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LLDPCapabilities.Unmarshal(m, b)
}
func (m *LLDPCapabilities) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LLDPCapabilities.Marshal(b, m, deterministic)
}
func (dst *LLDPCapabilities) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LLDPCapabilities.Merge(dst, src)
}
func (m *LLDPCapabilities) XXX_Size() int {
	return xxx_messageInfo_LLDPCapabilities.Size(m)
}
func (m *LLDPCapabilities) XXX_DiscardUnknown() {
	xxx_messageInfo_LLDPCapabilities.DiscardUnknown(m)
}

var xxx_messageInfo_LLDPCapabilities proto.InternalMessageInfo

func (m *LLDPCapabilities) GetOther() bool {
	if m != nil {
		return m.Other
	}
	return false
}

func (m *LLDPCapabilities) GetRepeater() bool {
	if m != nil {
		return m.Repeater
	}
	return false
}

func (m *LLDPCapabilities) GetBridge() bool {
	if m != nil {
		return m.Bridge
	}
	return false
}

func (m *LLDPCapabilities) GetWLANAP() bool {
	if m != nil {
		return m.WLANAP
	}
	return false
}

func (m *LLDPCapabilities) GetRouter() bool {
	if m != nil {
		return m.Router
	}
	return false
}

func (m *LLDPCapabilities) GetPhone() bool {
	if m != nil {
		return m.Phone
	}
	return false
}

func (m *LLDPCapabilities) GetDocSis() bool {
	if m != nil {
		return m.DocSis
	}
	return false
}

func (m *LLDPCapabilities) GetStationOnly() bool {
	if m != nil {
		return m.StationOnly
	}
	return false
}

func (m *LLDPCapabilities) GetCVLAN() bool {
	if m != nil {
		return m.CVLAN
	}
	return false
}

func (m *LLDPCapabilities) GetSVLAN() bool {
	if m != nil {
		return m.SVLAN
	}
	return false
}

func (m *LLDPCapabilities) GetTMPR() bool {
	if m != nil {
		return m.TMPR
	}
	return false
}

type LLDPMgmtAddress struct {
	Subtype              int32    `protobuf:"varint,1,opt,name=Subtype,proto3" json:"Subtype,omitempty"`
	Address              []byte   `protobuf:"bytes,2,opt,name=Address,proto3" json:"Address,omitempty"`
	InterfaceSubtype     int32    `protobuf:"varint,3,opt,name=InterfaceSubtype,proto3" json:"InterfaceSubtype,omitempty"`
	InterfaceNumber      uint32   `protobuf:"varint,4,opt,name=InterfaceNumber,proto3" json:"InterfaceNumber,omitempty"`
	OID                  string   `protobuf:"bytes,5,opt,name=OID,proto3" json:"OID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LLDPMgmtAddress) Reset()         { *m = LLDPMgmtAddress{} }
func (m *LLDPMgmtAddress) String() string { return proto.CompactTextString(m) }
func (*LLDPMgmtAddress) ProtoMessage()    {}
func (*LLDPMgmtAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_netcap_62f6063ce3cb4a3e, []int{27}
}
func (m *LLDPMgmtAddress) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LLDPMgmtAddress.Unmarshal(m, b)
}
func (m *LLDPMgmtAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LLDPMgmtAddress.Marshal(b, m, deterministic)
}
func (dst *LLDPMgmtAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LLDPMgmtAddress.Merge(dst, src)
}
func (m *LLDPMgmtAddress) XXX_Size() int {
	return xxx_messageInfo_LLDPMgmtAddress.Size(m)
}
func (m *LLDPMgmtAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_LLDPMgmtAddress.DiscardUnknown(m)
}

var xxx_messageInfo_LLDPMgmtAddress proto.InternalMessageInfo

func (m *LLDPMgmtAddress) GetSubtype() int32 {
	if m != nil {
		return m.Subtype
	}
	return 0
}

func (m *LLDPMgmtAddress) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *LLDPMgmtAddress) GetInterfaceSubtype() int32 {
	if m != nil {
		return m.InterfaceSubtype
	}
	return 0
}

func (m *LLDPMgmtAddress) GetInterfaceNumber() uint32 {
	if m != nil {
		return m.InterfaceNumber
	}
	return 0
}

func (m *LLDPMgmtAddress) GetOID() string {
	if m != nil {
		return m.OID
	}
	return ""
}

type LLDPOrgSpecificTLV struct {
	OUI                  uint32   `protobuf:"varint,1,opt,name=OUI,proto3" json:"OUI,omitempty"`
	SubType              int32    `protobuf:"varint,2,opt,name=SubType,proto3" json:"SubType,omitempty"`
	Info                 []byte   `protobuf:"bytes,3,opt,name=Info,proto3" json:"Info,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LLDPOrgSpecificTLV) Reset()         { *m = LLDPOrgSpecificTLV{} }
func (m *LLDPOrgSpecificTLV) String() string { return proto.CompactTextString(m) }
func (*LLDPOrgSpecificTLV) ProtoMessage()    {}
func (*LLDPOrgSpecificTLV) Descriptor() ([]byte, []int) {
	return fileDescriptor_netcap_62f6063ce3cb4a3e, []int{28}
}
func (m *LLDPOrgSpecificTLV) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LLDPOrgSpecificTLV.Unmarshal(m, b)
}
func (m *LLDPOrgSpecificTLV) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LLDPOrgSpecificTLV.Marshal(b, m, deterministic)
}
func (dst *LLDPOrgSpecificTLV) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LLDPOrgSpecificTLV.Merge(dst, src)
}
func (m *LLDPOrgSpecificTLV) XXX_Size() int {
	return xxx_messageInfo_LLDPOrgSpecificTLV.Size(m)
}
func (m *LLDPOrgSpecificTLV) XXX_DiscardUnknown() {
	xxx_messageInfo_LLDPOrgSpecificTLV.DiscardUnknown(m)
}

var xxx_messageInfo_LLDPOrgSpecificTLV proto.InternalMessageInfo

func (m *LLDPOrgSpecificTLV) GetOUI() uint32 {
	if m != nil {
		return m.OUI
	}
	return 0
}

func (m *LLDPOrgSpecificTLV) GetSubType() int32 {
	if m != nil {
		return m.SubType
	}
	return 0
}

func (m *LLDPOrgSpecificTLV) GetInfo() []byte {
	if m != nil {
		return m.Info
	}
	return nil
}

type IPv4 struct {
	Timestamp            string        `protobuf:"bytes,1,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	Version              int32         `protobuf:"varint,2,opt,name=Version,proto3" json:"Version,omitempty"`
	IHL                  int32         `protobuf:"varint,3,opt,name=IHL,proto3" json:"IHL,omitempty"`
	TOS                  int32         `protobuf:"varint,4,opt,name=TOS,proto3" json:"TOS,omitempty"`
	Length               int32         `protobuf:"varint,5,opt,name=Length,proto3" json:"Length,omitempty"`
	Id                   int32         `protobuf:"varint,6,opt,name=Id,proto3" json:"Id,omitempty"`
	Flags                int32         `protobuf:"varint,7,opt,name=Flags,proto3" json:"Flags,omitempty"`
	FragOffset           int32         `protobuf:"varint,8,opt,name=FragOffset,proto3" json:"FragOffset,omitempty"`
	TTL                  int32         `protobuf:"varint,9,opt,name=TTL,proto3" json:"TTL,omitempty"`
	Protocol             int32         `protobuf:"varint,10,opt,name=Protocol,proto3" json:"Protocol,omitempty"`
	Checksum             int32         `protobuf:"varint,11,opt,name=Checksum,proto3" json:"Checksum,omitempty"`
	SrcIP                string        `protobuf:"bytes,12,opt,name=SrcIP,proto3" json:"SrcIP,omitempty"`
	DstIP                string        `protobuf:"bytes,13,opt,name=DstIP,proto3" json:"DstIP,omitempty"`
	Padding              []byte        `protobuf:"bytes,14,opt,name=Padding,proto3" json:"Padding,omitempty"`
	Options              []*IPv4Option `protobuf:"bytes,15,rep,name=Options,proto3" json:"Options,omitempty"`
	PayloadEntropy       float64       `protobuf:"fixed64,16,opt,name=PayloadEntropy,proto3" json:"PayloadEntropy,omitempty"`
	PayloadSize          int32         `protobuf:"varint,17,opt,name=PayloadSize,proto3" json:"PayloadSize,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *IPv4) Reset()         { *m = IPv4{} }
func (m *IPv4) String() string { return proto.CompactTextString(m) }
func (*IPv4) ProtoMessage()    {}
func (*IPv4) Descriptor() ([]byte, []int) {
	return fileDescriptor_netcap_62f6063ce3cb4a3e, []int{29}
}
func (m *IPv4) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IPv4.Unmarshal(m, b)
}
func (m *IPv4) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IPv4.Marshal(b, m, deterministic)
}
func (dst *IPv4) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IPv4.Merge(dst, src)
}
func (m *IPv4) XXX_Size() int {
	return xxx_messageInfo_IPv4.Size(m)
}
func (m *IPv4) XXX_DiscardUnknown() {
	xxx_messageInfo_IPv4.DiscardUnknown(m)
}

var xxx_messageInfo_IPv4 proto.InternalMessageInfo

func (m *IPv4) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *IPv4) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *IPv4) GetIHL() int32 {
	if m != nil {
		return m.IHL
	}
	return 0
}

func (m *IPv4) GetTOS() int32 {
	if m != nil {
		return m.TOS
	}
	return 0
}

func (m *IPv4) GetLength() int32 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *IPv4) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *IPv4) GetFlags() int32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *IPv4) GetFragOffset() int32 {
	if m != nil {
		return m.FragOffset
	}
	return 0
}

func (m *IPv4) GetTTL() int32 {
	if m != nil {
		return m.TTL
	}
	return 0
}

func (m *IPv4) GetProtocol() int32 {
	if m != nil {
		return m.Protocol
	}
	return 0
}

func (m *IPv4) GetChecksum() int32 {
	if m != nil {
		return m.Checksum
	}
	return 0
}

func (m *IPv4) GetSrcIP() string {
	if m != nil {
		return m.SrcIP
	}
	return ""
}

func (m *IPv4) GetDstIP() string {
	if m != nil {
		return m.DstIP
	}
	return ""
}

func (m *IPv4) GetPadding() []byte {
	if m != nil {
		return m.Padding
	}
	return nil
}

func (m *IPv4) GetOptions() []*IPv4Option {
	if m != nil {
		return m.Options
	}
	return nil
}

func (m *IPv4) GetPayloadEntropy() float64 {
	if m != nil {
		return m.PayloadEntropy
	}
	return 0
}

func (m *IPv4) GetPayloadSize() int32 {
	if m != nil {
		return m.PayloadSize
	}
	return 0
}

type IPv4Option struct {
	OptionType           int32    `protobuf:"varint,1,opt,name=OptionType,proto3" json:"OptionType,omitempty"`
	OptionLength         int32    `protobuf:"varint,2,opt,name=OptionLength,proto3" json:"OptionLength,omitempty"`
	OptionData           []byte   `protobuf:"bytes,3,opt,name=OptionData,proto3" json:"OptionData,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IPv4Option) Reset()         { *m = IPv4Option{} }
func (m *IPv4Option) String() string { return proto.CompactTextString(m) }
func (*IPv4Option) ProtoMessage()    {}
func (*IPv4Option) Descriptor() ([]byte, []int) {
	return fileDescriptor_netcap_62f6063ce3cb4a3e, []int{30}
}
func (m *IPv4Option) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IPv4Option.Unmarshal(m, b)
}
func (m *IPv4Option) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IPv4Option.Marshal(b, m, deterministic)
}
func (dst *IPv4Option) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IPv4Option.Merge(dst, src)
}
func (m *IPv4Option) XXX_Size() int {
	return xxx_messageInfo_IPv4Option.Size(m)
}
func (m *IPv4Option) XXX_DiscardUnknown() {
	xxx_messageInfo_IPv4Option.DiscardUnknown(m)
}

var xxx_messageInfo_IPv4Option proto.InternalMessageInfo

func (m *IPv4Option) GetOptionType() int32 {
	if m != nil {
		return m.OptionType
	}
	return 0
}

func (m *IPv4Option) GetOptionLength() int32 {
	if m != nil {
		return m.OptionLength
	}
	return 0
}

func (m *IPv4Option) GetOptionData() []byte {
	if m != nil {
		return m.OptionData
	}
	return nil
}

type IPv6 struct {
	Timestamp            string        `protobuf:"bytes,1,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	Version              int32         `protobuf:"varint,2,opt,name=Version,proto3" json:"Version,omitempty"`
	TrafficClass         int32         `protobuf:"varint,3,opt,name=TrafficClass,proto3" json:"TrafficClass,omitempty"`
	FlowLabel            uint32        `protobuf:"varint,4,opt,name=FlowLabel,proto3" json:"FlowLabel,omitempty"`
	Length               int32         `protobuf:"varint,5,opt,name=Length,proto3" json:"Length,omitempty"`
	NextHeader           int32         `protobuf:"varint,6,opt,name=NextHeader,proto3" json:"NextHeader,omitempty"`
	HopLimit             int32         `protobuf:"varint,7,opt,name=HopLimit,proto3" json:"HopLimit,omitempty"`
	SrcIP                string        `protobuf:"bytes,8,opt,name=SrcIP,proto3" json:"SrcIP,omitempty"`
	DstIP                string        `protobuf:"bytes,9,opt,name=DstIP,proto3" json:"DstIP,omitempty"`
	PayloadEntropy       float64       `protobuf:"fixed64,10,opt,name=PayloadEntropy,proto3" json:"PayloadEntropy,omitempty"`
	PayloadSize          int32         `protobuf:"varint,11,opt,name=PayloadSize,proto3" json:"PayloadSize,omitempty"`
	HopByHop             *IPv6HopByHop `protobuf:"bytes,12,opt,name=HopByHop,proto3" json:"HopByHop,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *IPv6) Reset()         { *m = IPv6{} }
func (m *IPv6) String() string { return proto.CompactTextString(m) }
func (*IPv6) ProtoMessage()    {}
func (*IPv6) Descriptor() ([]byte, []int) {
	return fileDescriptor_netcap_62f6063ce3cb4a3e, []int{31}
}
func (m *IPv6) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IPv6.Unmarshal(m, b)
}
func (m *IPv6) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IPv6.Marshal(b, m, deterministic)
}
func (dst *IPv6) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IPv6.Merge(dst, src)
}
func (m *IPv6) XXX_Size() int {
	return xxx_messageInfo_IPv6.Size(m)
}
func (m *IPv6) XXX_DiscardUnknown() {
	xxx_messageInfo_IPv6.DiscardUnknown(m)
}

var xxx_messageInfo_IPv6 proto.InternalMessageInfo

func (m *IPv6) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *IPv6) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *IPv6) GetTrafficClass() int32 {
	if m != nil {
		return m.TrafficClass
	}
	return 0
}

func (m *IPv6) GetFlowLabel() uint32 {
	if m != nil {
		return m.FlowLabel
	}
	return 0
}

func (m *IPv6) GetLength() int32 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *IPv6) GetNextHeader() int32 {
	if m != nil {
		return m.NextHeader
	}
	return 0
}

func (m *IPv6) GetHopLimit() int32 {
	if m != nil {
		return m.HopLimit
	}
	return 0
}

func (m *IPv6) GetSrcIP() string {
	if m != nil {
		return m.SrcIP
	}
	return ""
}

func (m *IPv6) GetDstIP() string {
	if m != nil {
		return m.DstIP
	}
	return ""
}

func (m *IPv6) GetPayloadEntropy() float64 {
	if m != nil {
		return m.PayloadEntropy
	}
	return 0
}

func (m *IPv6) GetPayloadSize() int32 {
	if m != nil {
		return m.PayloadSize
	}
	return 0
}

func (m *IPv6) GetHopByHop() *IPv6HopByHop {
	if m != nil {
		return m.HopByHop
	}
	return nil
}

type IPv6Fragment struct {
	Timestamp            string   `protobuf:"bytes,1,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	NextHeader           int32    `protobuf:"varint,2,opt,name=NextHeader,proto3" json:"NextHeader,omitempty"`
	Reserved1            int32    `protobuf:"varint,3,opt,name=Reserved1,proto3" json:"Reserved1,omitempty"`
	FragmentOffset       int32    `protobuf:"varint,4,opt,name=FragmentOffset,proto3" json:"FragmentOffset,omitempty"`
	Reserved2            int32    `protobuf:"varint,5,opt,name=Reserved2,proto3" json:"Reserved2,omitempty"`
	MoreFragments        bool     `protobuf:"varint,6,opt,name=MoreFragments,proto3" json:"MoreFragments,omitempty"`
	Identification       uint32   `protobuf:"varint,7,opt,name=Identification,proto3" json:"Identification,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IPv6Fragment) Reset()         { *m = IPv6Fragment{} }
func (m *IPv6Fragment) String() string { return proto.CompactTextString(m) }
func (*IPv6Fragment) ProtoMessage()    {}
func (*IPv6Fragment) Descriptor() ([]byte, []int) {
	return fileDescriptor_netcap_62f6063ce3cb4a3e, []int{32}
}
func (m *IPv6Fragment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IPv6Fragment.Unmarshal(m, b)
}
func (m *IPv6Fragment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IPv6Fragment.Marshal(b, m, deterministic)
}
func (dst *IPv6Fragment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IPv6Fragment.Merge(dst, src)
}
func (m *IPv6Fragment) XXX_Size() int {
	return xxx_messageInfo_IPv6Fragment.Size(m)
}
func (m *IPv6Fragment) XXX_DiscardUnknown() {
	xxx_messageInfo_IPv6Fragment.DiscardUnknown(m)
}

var xxx_messageInfo_IPv6Fragment proto.InternalMessageInfo

func (m *IPv6Fragment) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *IPv6Fragment) GetNextHeader() int32 {
	if m != nil {
		return m.NextHeader
	}
	return 0
}

func (m *IPv6Fragment) GetReserved1() int32 {
	if m != nil {
		return m.Reserved1
	}
	return 0
}

func (m *IPv6Fragment) GetFragmentOffset() int32 {
	if m != nil {
		return m.FragmentOffset
	}
	return 0
}

func (m *IPv6Fragment) GetReserved2() int32 {
	if m != nil {
		return m.Reserved2
	}
	return 0
}

func (m *IPv6Fragment) GetMoreFragments() bool {
	if m != nil {
		return m.MoreFragments
	}
	return false
}

func (m *IPv6Fragment) GetIdentification() uint32 {
	if m != nil {
		return m.Identification
	}
	return 0
}

type ICMPv4 struct {
	Timestamp            string   `protobuf:"bytes,1,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	TypeCode             int32    `protobuf:"varint,2,opt,name=TypeCode,proto3" json:"TypeCode,omitempty"`
	Checksum             int32    `protobuf:"varint,3,opt,name=Checksum,proto3" json:"Checksum,omitempty"`
	Id                   int32    `protobuf:"varint,4,opt,name=Id,proto3" json:"Id,omitempty"`
	Seq                  int32    `protobuf:"varint,5,opt,name=Seq,proto3" json:"Seq,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ICMPv4) Reset()         { *m = ICMPv4{} }
func (m *ICMPv4) String() string { return proto.CompactTextString(m) }
func (*ICMPv4) ProtoMessage()    {}
func (*ICMPv4) Descriptor() ([]byte, []int) {
	return fileDescriptor_netcap_62f6063ce3cb4a3e, []int{33}
}
func (m *ICMPv4) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ICMPv4.Unmarshal(m, b)
}
func (m *ICMPv4) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ICMPv4.Marshal(b, m, deterministic)
}
func (dst *ICMPv4) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ICMPv4.Merge(dst, src)
}
func (m *ICMPv4) XXX_Size() int {
	return xxx_messageInfo_ICMPv4.Size(m)
}
func (m *ICMPv4) XXX_DiscardUnknown() {
	xxx_messageInfo_ICMPv4.DiscardUnknown(m)
}

var xxx_messageInfo_ICMPv4 proto.InternalMessageInfo

func (m *ICMPv4) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *ICMPv4) GetTypeCode() int32 {
	if m != nil {
		return m.TypeCode
	}
	return 0
}

func (m *ICMPv4) GetChecksum() int32 {
	if m != nil {
		return m.Checksum
	}
	return 0
}

func (m *ICMPv4) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ICMPv4) GetSeq() int32 {
	if m != nil {
		return m.Seq
	}
	return 0
}

type ICMPv6 struct {
	Timestamp            string   `protobuf:"bytes,1,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	TypeCode             int32    `protobuf:"varint,2,opt,name=TypeCode,proto3" json:"TypeCode,omitempty"`
	Checksum             int32    `protobuf:"varint,3,opt,name=Checksum,proto3" json:"Checksum,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ICMPv6) Reset()         { *m = ICMPv6{} }
func (m *ICMPv6) String() string { return proto.CompactTextString(m) }
func (*ICMPv6) ProtoMessage()    {}
func (*ICMPv6) Descriptor() ([]byte, []int) {
	return fileDescriptor_netcap_62f6063ce3cb4a3e, []int{34}
}
func (m *ICMPv6) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ICMPv6.Unmarshal(m, b)
}
func (m *ICMPv6) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ICMPv6.Marshal(b, m, deterministic)
}
func (dst *ICMPv6) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ICMPv6.Merge(dst, src)
}
func (m *ICMPv6) XXX_Size() int {
	return xxx_messageInfo_ICMPv6.Size(m)
}
func (m *ICMPv6) XXX_DiscardUnknown() {
	xxx_messageInfo_ICMPv6.DiscardUnknown(m)
}

var xxx_messageInfo_ICMPv6 proto.InternalMessageInfo

func (m *ICMPv6) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *ICMPv6) GetTypeCode() int32 {
	if m != nil {
		return m.TypeCode
	}
	return 0
}

func (m *ICMPv6) GetChecksum() int32 {
	if m != nil {
		return m.Checksum
	}
	return 0
}

type ICMPv6NeighborAdvertisement struct {
	Timestamp            string          `protobuf:"bytes,1,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	Flags                int32           `protobuf:"varint,2,opt,name=Flags,proto3" json:"Flags,omitempty"`
	TargetAddress        string          `protobuf:"bytes,3,opt,name=TargetAddress,proto3" json:"TargetAddress,omitempty"`
	Options              []*ICMPv6Option `protobuf:"bytes,4,rep,name=Options,proto3" json:"Options,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ICMPv6NeighborAdvertisement) Reset()         { *m = ICMPv6NeighborAdvertisement{} }
func (m *ICMPv6NeighborAdvertisement) String() string { return proto.CompactTextString(m) }
func (*ICMPv6NeighborAdvertisement) ProtoMessage()    {}
func (*ICMPv6NeighborAdvertisement) Descriptor() ([]byte, []int) {
	return fileDescriptor_netcap_62f6063ce3cb4a3e, []int{35}
}
func (m *ICMPv6NeighborAdvertisement) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ICMPv6NeighborAdvertisement.Unmarshal(m, b)
}
func (m *ICMPv6NeighborAdvertisement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ICMPv6NeighborAdvertisement.Marshal(b, m, deterministic)
}
func (dst *ICMPv6NeighborAdvertisement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ICMPv6NeighborAdvertisement.Merge(dst, src)
}
func (m *ICMPv6NeighborAdvertisement) XXX_Size() int {
	return xxx_messageInfo_ICMPv6NeighborAdvertisement.Size(m)
}
func (m *ICMPv6NeighborAdvertisement) XXX_DiscardUnknown() {
	xxx_messageInfo_ICMPv6NeighborAdvertisement.DiscardUnknown(m)
}

var xxx_messageInfo_ICMPv6NeighborAdvertisement proto.InternalMessageInfo

func (m *ICMPv6NeighborAdvertisement) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *ICMPv6NeighborAdvertisement) GetFlags() int32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *ICMPv6NeighborAdvertisement) GetTargetAddress() string {
	if m != nil {
		return m.TargetAddress
	}
	return ""
}

func (m *ICMPv6NeighborAdvertisement) GetOptions() []*ICMPv6Option {
	if m != nil {
		return m.Options
	}
	return nil
}

type ICMPv6RouterAdvertisement struct {
	Timestamp            string          `protobuf:"bytes,1,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	HopLimit             int32           `protobuf:"varint,2,opt,name=HopLimit,proto3" json:"HopLimit,omitempty"`
	Flags                int32           `protobuf:"varint,3,opt,name=Flags,proto3" json:"Flags,omitempty"`
	RouterLifetime       int32           `protobuf:"varint,4,opt,name=RouterLifetime,proto3" json:"RouterLifetime,omitempty"`
	ReachableTime        uint32          `protobuf:"varint,5,opt,name=ReachableTime,proto3" json:"ReachableTime,omitempty"`
	RetransTimer         uint32          `protobuf:"varint,6,opt,name=RetransTimer,proto3" json:"RetransTimer,omitempty"`
	Options              []*ICMPv6Option `protobuf:"bytes,7,rep,name=Options,proto3" json:"Options,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ICMPv6RouterAdvertisement) Reset()         { *m = ICMPv6RouterAdvertisement{} }
func (m *ICMPv6RouterAdvertisement) String() string { return proto.CompactTextString(m) }
func (*ICMPv6RouterAdvertisement) ProtoMessage()    {}
func (*ICMPv6RouterAdvertisement) Descriptor() ([]byte, []int) {
	return fileDescriptor_netcap_62f6063ce3cb4a3e, []int{36}
}
func (m *ICMPv6RouterAdvertisement) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ICMPv6RouterAdvertisement.Unmarshal(m, b)
}
func (m *ICMPv6RouterAdvertisement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ICMPv6RouterAdvertisement.Marshal(b, m, deterministic)
}
func (dst *ICMPv6RouterAdvertisement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ICMPv6RouterAdvertisement.Merge(dst, src)
}
func (m *ICMPv6RouterAdvertisement) XXX_Size() int {
	return xxx_messageInfo_ICMPv6RouterAdvertisement.Size(m)
}
func (m *ICMPv6RouterAdvertisement) XXX_DiscardUnknown() {
	xxx_messageInfo_ICMPv6RouterAdvertisement.DiscardUnknown(m)
}

var xxx_messageInfo_ICMPv6RouterAdvertisement proto.InternalMessageInfo

func (m *ICMPv6RouterAdvertisement) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *ICMPv6RouterAdvertisement) GetHopLimit() int32 {
	if m != nil {
		return m.HopLimit
	}
	return 0
}

func (m *ICMPv6RouterAdvertisement) GetFlags() int32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *ICMPv6RouterAdvertisement) GetRouterLifetime() int32 {
	if m != nil {
		return m.RouterLifetime
	}
	return 0
}

func (m *ICMPv6RouterAdvertisement) GetReachableTime() uint32 {
	if m != nil {
		return m.ReachableTime
	}
	return 0
}

func (m *ICMPv6RouterAdvertisement) GetRetransTimer() uint32 {
	if m != nil {
		return m.RetransTimer
	}
	return 0
}

func (m *ICMPv6RouterAdvertisement) GetOptions() []*ICMPv6Option {
	if m != nil {
		return m.Options
	}
	return nil
}

type ICMPv6Option struct {
	Type                 int32    `protobuf:"varint,1,opt,name=Type,proto3" json:"Type,omitempty"`
	Data                 []byte   `protobuf:"bytes,2,opt,name=Data,proto3" json:"Data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ICMPv6Option) Reset()         { *m = ICMPv6Option{} }
func (m *ICMPv6Option) String() string { return proto.CompactTextString(m) }
func (*ICMPv6Option) ProtoMessage()    {}
func (*ICMPv6Option) Descriptor() ([]byte, []int) {
	return fileDescriptor_netcap_62f6063ce3cb4a3e, []int{37}
}
func (m *ICMPv6Option) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ICMPv6Option.Unmarshal(m, b)
}
func (m *ICMPv6Option) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ICMPv6Option.Marshal(b, m, deterministic)
}
func (dst *ICMPv6Option) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ICMPv6Option.Merge(dst, src)
}
func (m *ICMPv6Option) XXX_Size() int {
	return xxx_messageInfo_ICMPv6Option.Size(m)
}
func (m *ICMPv6Option) XXX_DiscardUnknown() {
	xxx_messageInfo_ICMPv6Option.DiscardUnknown(m)
}

var xxx_messageInfo_ICMPv6Option proto.InternalMessageInfo

func (m *ICMPv6Option) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ICMPv6Option) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type UDP struct {
	Timestamp            string   `protobuf:"bytes,1,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	SrcPort              int32    `protobuf:"varint,2,opt,name=SrcPort,proto3" json:"SrcPort,omitempty"`
	DstPort              int32    `protobuf:"varint,3,opt,name=DstPort,proto3" json:"DstPort,omitempty"`
	Length               int32    `protobuf:"varint,4,opt,name=Length,proto3" json:"Length,omitempty"`
	Checksum             int32    `protobuf:"varint,5,opt,name=Checksum,proto3" json:"Checksum,omitempty"`
	PayloadEntropy       float64  `protobuf:"fixed64,6,opt,name=PayloadEntropy,proto3" json:"PayloadEntropy,omitempty"`
	PayloadSize          int32    `protobuf:"varint,7,opt,name=PayloadSize,proto3" json:"PayloadSize,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UDP) Reset()         { *m = UDP{} }
func (m *UDP) String() string { return proto.CompactTextString(m) }
func (*UDP) ProtoMessage()    {}
func (*UDP) Descriptor() ([]byte, []int) {
	return fileDescriptor_netcap_62f6063ce3cb4a3e, []int{38}
}
func (m *UDP) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UDP.Unmarshal(m, b)
}
func (m *UDP) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UDP.Marshal(b, m, deterministic)
}
func (dst *UDP) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UDP.Merge(dst, src)
}
func (m *UDP) XXX_Size() int {
	return xxx_messageInfo_UDP.Size(m)
}
func (m *UDP) XXX_DiscardUnknown() {
	xxx_messageInfo_UDP.DiscardUnknown(m)
}

var xxx_messageInfo_UDP proto.InternalMessageInfo

func (m *UDP) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *UDP) GetSrcPort() int32 {
	if m != nil {
		return m.SrcPort
	}
	return 0
}

func (m *UDP) GetDstPort() int32 {
	if m != nil {
		return m.DstPort
	}
	return 0
}

func (m *UDP) GetLength() int32 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *UDP) GetChecksum() int32 {
	if m != nil {
		return m.Checksum
	}
	return 0
}

func (m *UDP) GetPayloadEntropy() float64 {
	if m != nil {
		return m.PayloadEntropy
	}
	return 0
}

func (m *UDP) GetPayloadSize() int32 {
	if m != nil {
		return m.PayloadSize
	}
	return 0
}

type TCP struct {
	Timestamp            string       `protobuf:"bytes,1,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	SrcPort              int32        `protobuf:"varint,2,opt,name=SrcPort,proto3" json:"SrcPort,omitempty"`
	DstPort              int32        `protobuf:"varint,3,opt,name=DstPort,proto3" json:"DstPort,omitempty"`
	SeqNum               uint32       `protobuf:"varint,4,opt,name=SeqNum,proto3" json:"SeqNum,omitempty"`
	AckNum               uint32       `protobuf:"varint,5,opt,name=AckNum,proto3" json:"AckNum,omitempty"`
	DataOffset           int32        `protobuf:"varint,6,opt,name=DataOffset,proto3" json:"DataOffset,omitempty"`
	FIN                  bool         `protobuf:"varint,7,opt,name=FIN,proto3" json:"FIN,omitempty"`
	SYN                  bool         `protobuf:"varint,8,opt,name=SYN,proto3" json:"SYN,omitempty"`
	RST                  bool         `protobuf:"varint,9,opt,name=RST,proto3" json:"RST,omitempty"`
	PSH                  bool         `protobuf:"varint,10,opt,name=PSH,proto3" json:"PSH,omitempty"`
	ACK                  bool         `protobuf:"varint,11,opt,name=ACK,proto3" json:"ACK,omitempty"`
	URG                  bool         `protobuf:"varint,12,opt,name=URG,proto3" json:"URG,omitempty"`
	ECE                  bool         `protobuf:"varint,13,opt,name=ECE,proto3" json:"ECE,omitempty"`
	CWR                  bool         `protobuf:"varint,14,opt,name=CWR,proto3" json:"CWR,omitempty"`
	NS                   bool         `protobuf:"varint,15,opt,name=NS,proto3" json:"NS,omitempty"`
	Window               int32        `protobuf:"varint,16,opt,name=Window,proto3" json:"Window,omitempty"`
	Checksum             int32        `protobuf:"varint,17,opt,name=Checksum,proto3" json:"Checksum,omitempty"`
	Urgent               int32        `protobuf:"varint,18,opt,name=Urgent,proto3" json:"Urgent,omitempty"`
	Padding              []byte       `protobuf:"bytes,19,opt,name=Padding,proto3" json:"Padding,omitempty"`
	Options              []*TCPOption `protobuf:"bytes,20,rep,name=Options,proto3" json:"Options,omitempty"`
	PayloadEntropy       float64      `protobuf:"fixed64,21,opt,name=PayloadEntropy,proto3" json:"PayloadEntropy,omitempty"`
	PayloadSize          int32        `protobuf:"varint,22,opt,name=PayloadSize,proto3" json:"PayloadSize,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *TCP) Reset()         { *m = TCP{} }
func (m *TCP) String() string { return proto.CompactTextString(m) }
func (*TCP) ProtoMessage()    {}
func (*TCP) Descriptor() ([]byte, []int) {
	return fileDescriptor_netcap_62f6063ce3cb4a3e, []int{39}
}
func (m *TCP) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TCP.Unmarshal(m, b)
}
func (m *TCP) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TCP.Marshal(b, m, deterministic)
}
func (dst *TCP) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TCP.Merge(dst, src)
}
func (m *TCP) XXX_Size() int {
	return xxx_messageInfo_TCP.Size(m)
}
func (m *TCP) XXX_DiscardUnknown() {
	xxx_messageInfo_TCP.DiscardUnknown(m)
}

var xxx_messageInfo_TCP proto.InternalMessageInfo

func (m *TCP) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *TCP) GetSrcPort() int32 {
	if m != nil {
		return m.SrcPort
	}
	return 0
}

func (m *TCP) GetDstPort() int32 {
	if m != nil {
		return m.DstPort
	}
	return 0
}

func (m *TCP) GetSeqNum() uint32 {
	if m != nil {
		return m.SeqNum
	}
	return 0
}

func (m *TCP) GetAckNum() uint32 {
	if m != nil {
		return m.AckNum
	}
	return 0
}

func (m *TCP) GetDataOffset() int32 {
	if m != nil {
		return m.DataOffset
	}
	return 0
}

func (m *TCP) GetFIN() bool {
	if m != nil {
		return m.FIN
	}
	return false
}

func (m *TCP) GetSYN() bool {
	if m != nil {
		return m.SYN
	}
	return false
}

func (m *TCP) GetRST() bool {
	if m != nil {
		return m.RST
	}
	return false
}

func (m *TCP) GetPSH() bool {
	if m != nil {
		return m.PSH
	}
	return false
}

func (m *TCP) GetACK() bool {
	if m != nil {
		return m.ACK
	}
	return false
}

func (m *TCP) GetURG() bool {
	if m != nil {
		return m.URG
	}
	return false
}

func (m *TCP) GetECE() bool {
	if m != nil {
		return m.ECE
	}
	return false
}

func (m *TCP) GetCWR() bool {
	if m != nil {
		return m.CWR
	}
	return false
}

func (m *TCP) GetNS() bool {
	if m != nil {
		return m.NS
	}
	return false
}

func (m *TCP) GetWindow() int32 {
	if m != nil {
		return m.Window
	}
	return 0
}

func (m *TCP) GetChecksum() int32 {
	if m != nil {
		return m.Checksum
	}
	return 0
}

func (m *TCP) GetUrgent() int32 {
	if m != nil {
		return m.Urgent
	}
	return 0
}

func (m *TCP) GetPadding() []byte {
	if m != nil {
		return m.Padding
	}
	return nil
}

func (m *TCP) GetOptions() []*TCPOption {
	if m != nil {
		return m.Options
	}
	return nil
}

func (m *TCP) GetPayloadEntropy() float64 {
	if m != nil {
		return m.PayloadEntropy
	}
	return 0
}

func (m *TCP) GetPayloadSize() int32 {
	if m != nil {
		return m.PayloadSize
	}
	return 0
}

type TCPOption struct {
	OptionType           int32    `protobuf:"varint,1,opt,name=OptionType,proto3" json:"OptionType,omitempty"`
	OptionLength         int32    `protobuf:"varint,2,opt,name=OptionLength,proto3" json:"OptionLength,omitempty"`
	OptionData           []byte   `protobuf:"bytes,3,opt,name=OptionData,proto3" json:"OptionData,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TCPOption) Reset()         { *m = TCPOption{} }
func (m *TCPOption) String() string { return proto.CompactTextString(m) }
func (*TCPOption) ProtoMessage()    {}
func (*TCPOption) Descriptor() ([]byte, []int) {
	return fileDescriptor_netcap_62f6063ce3cb4a3e, []int{40}
}
func (m *TCPOption) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TCPOption.Unmarshal(m, b)
}
func (m *TCPOption) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TCPOption.Marshal(b, m, deterministic)
}
func (dst *TCPOption) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TCPOption.Merge(dst, src)
}
func (m *TCPOption) XXX_Size() int {
	return xxx_messageInfo_TCPOption.Size(m)
}
func (m *TCPOption) XXX_DiscardUnknown() {
	xxx_messageInfo_TCPOption.DiscardUnknown(m)
}

var xxx_messageInfo_TCPOption proto.InternalMessageInfo

func (m *TCPOption) GetOptionType() int32 {
	if m != nil {
		return m.OptionType
	}
	return 0
}

func (m *TCPOption) GetOptionLength() int32 {
	if m != nil {
		return m.OptionLength
	}
	return 0
}

func (m *TCPOption) GetOptionData() []byte {
	if m != nil {
		return m.OptionData
	}
	return nil
}

type SCTP struct {
	Timestamp            string   `protobuf:"bytes,1,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	SrcPort              uint32   `protobuf:"varint,2,opt,name=SrcPort,proto3" json:"SrcPort,omitempty"`
	DstPort              uint32   `protobuf:"varint,3,opt,name=DstPort,proto3" json:"DstPort,omitempty"`
	VerificationTag      uint32   `protobuf:"varint,4,opt,name=VerificationTag,proto3" json:"VerificationTag,omitempty"`
	Checksum             uint32   `protobuf:"varint,5,opt,name=Checksum,proto3" json:"Checksum,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SCTP) Reset()         { *m = SCTP{} }
func (m *SCTP) String() string { return proto.CompactTextString(m) }
func (*SCTP) ProtoMessage()    {}
func (*SCTP) Descriptor() ([]byte, []int) {
	return fileDescriptor_netcap_62f6063ce3cb4a3e, []int{41}
}
func (m *SCTP) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SCTP.Unmarshal(m, b)
}
func (m *SCTP) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SCTP.Marshal(b, m, deterministic)
}
func (dst *SCTP) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SCTP.Merge(dst, src)
}
func (m *SCTP) XXX_Size() int {
	return xxx_messageInfo_SCTP.Size(m)
}
func (m *SCTP) XXX_DiscardUnknown() {
	xxx_messageInfo_SCTP.DiscardUnknown(m)
}

var xxx_messageInfo_SCTP proto.InternalMessageInfo

func (m *SCTP) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *SCTP) GetSrcPort() uint32 {
	if m != nil {
		return m.SrcPort
	}
	return 0
}

func (m *SCTP) GetDstPort() uint32 {
	if m != nil {
		return m.DstPort
	}
	return 0
}

func (m *SCTP) GetVerificationTag() uint32 {
	if m != nil {
		return m.VerificationTag
	}
	return 0
}

func (m *SCTP) GetChecksum() uint32 {
	if m != nil {
		return m.Checksum
	}
	return 0
}

type DNS struct {
	Timestamp string `protobuf:"bytes,1,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	// Header fields
	ID           int32 `protobuf:"varint,2,opt,name=ID,proto3" json:"ID,omitempty"`
	QR           bool  `protobuf:"varint,3,opt,name=QR,proto3" json:"QR,omitempty"`
	OpCode       int32 `protobuf:"varint,4,opt,name=OpCode,proto3" json:"OpCode,omitempty"`
	AA           bool  `protobuf:"varint,5,opt,name=AA,proto3" json:"AA,omitempty"`
	TC           bool  `protobuf:"varint,6,opt,name=TC,proto3" json:"TC,omitempty"`
	RD           bool  `protobuf:"varint,7,opt,name=RD,proto3" json:"RD,omitempty"`
	RA           bool  `protobuf:"varint,8,opt,name=RA,proto3" json:"RA,omitempty"`
	Z            int32 `protobuf:"varint,9,opt,name=Z,proto3" json:"Z,omitempty"`
	ResponseCode int32 `protobuf:"varint,10,opt,name=ResponseCode,proto3" json:"ResponseCode,omitempty"`
	QDCount      int32 `protobuf:"varint,11,opt,name=QDCount,proto3" json:"QDCount,omitempty"`
	ANCount      int32 `protobuf:"varint,12,opt,name=ANCount,proto3" json:"ANCount,omitempty"`
	NSCount      int32 `protobuf:"varint,13,opt,name=NSCount,proto3" json:"NSCount,omitempty"`
	ARCount      int32 `protobuf:"varint,14,opt,name=ARCount,proto3" json:"ARCount,omitempty"`
	// Entries
	Questions            []*DNSQuestion       `protobuf:"bytes,15,rep,name=Questions,proto3" json:"Questions,omitempty"`
	Answers              []*DNSResourceRecord `protobuf:"bytes,16,rep,name=Answers,proto3" json:"Answers,omitempty"`
	Authorities          []*DNSResourceRecord `protobuf:"bytes,17,rep,name=Authorities,proto3" json:"Authorities,omitempty"`
	Additionals          []*DNSResourceRecord `protobuf:"bytes,18,rep,name=Additionals,proto3" json:"Additionals,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *DNS) Reset()         { *m = DNS{} }
func (m *DNS) String() string { return proto.CompactTextString(m) }
func (*DNS) ProtoMessage()    {}
func (*DNS) Descriptor() ([]byte, []int) {
	return fileDescriptor_netcap_62f6063ce3cb4a3e, []int{42}
}
func (m *DNS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DNS.Unmarshal(m, b)
}
func (m *DNS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DNS.Marshal(b, m, deterministic)
}
func (dst *DNS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DNS.Merge(dst, src)
}
func (m *DNS) XXX_Size() int {
	return xxx_messageInfo_DNS.Size(m)
}
func (m *DNS) XXX_DiscardUnknown() {
	xxx_messageInfo_DNS.DiscardUnknown(m)
}

var xxx_messageInfo_DNS proto.InternalMessageInfo

func (m *DNS) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *DNS) GetID() int32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *DNS) GetQR() bool {
	if m != nil {
		return m.QR
	}
	return false
}

func (m *DNS) GetOpCode() int32 {
	if m != nil {
		return m.OpCode
	}
	return 0
}

func (m *DNS) GetAA() bool {
	if m != nil {
		return m.AA
	}
	return false
}

func (m *DNS) GetTC() bool {
	if m != nil {
		return m.TC
	}
	return false
}

func (m *DNS) GetRD() bool {
	if m != nil {
		return m.RD
	}
	return false
}

func (m *DNS) GetRA() bool {
	if m != nil {
		return m.RA
	}
	return false
}

func (m *DNS) GetZ() int32 {
	if m != nil {
		return m.Z
	}
	return 0
}

func (m *DNS) GetResponseCode() int32 {
	if m != nil {
		return m.ResponseCode
	}
	return 0
}

func (m *DNS) GetQDCount() int32 {
	if m != nil {
		return m.QDCount
	}
	return 0
}

func (m *DNS) GetANCount() int32 {
	if m != nil {
		return m.ANCount
	}
	return 0
}

func (m *DNS) GetNSCount() int32 {
	if m != nil {
		return m.NSCount
	}
	return 0
}

func (m *DNS) GetARCount() int32 {
	if m != nil {
		return m.ARCount
	}
	return 0
}

func (m *DNS) GetQuestions() []*DNSQuestion {
	if m != nil {
		return m.Questions
	}
	return nil
}

func (m *DNS) GetAnswers() []*DNSResourceRecord {
	if m != nil {
		return m.Answers
	}
	return nil
}

func (m *DNS) GetAuthorities() []*DNSResourceRecord {
	if m != nil {
		return m.Authorities
	}
	return nil
}

func (m *DNS) GetAdditionals() []*DNSResourceRecord {
	if m != nil {
		return m.Additionals
	}
	return nil
}

type DNSResourceRecord struct {
	// Header
	Name  []byte `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Type  int32  `protobuf:"varint,2,opt,name=Type,proto3" json:"Type,omitempty"`
	Class int32  `protobuf:"varint,3,opt,name=Class,proto3" json:"Class,omitempty"`
	TTL   uint32 `protobuf:"varint,4,opt,name=TTL,proto3" json:"TTL,omitempty"`
	// RDATA Raw Values
	DataLength int32  `protobuf:"varint,5,opt,name=DataLength,proto3" json:"DataLength,omitempty"`
	Data       []byte `protobuf:"bytes,6,opt,name=Data,proto3" json:"Data,omitempty"`
	// RDATA Decoded Values
	IP                   string   `protobuf:"bytes,7,opt,name=IP,proto3" json:"IP,omitempty"`
	NS                   []byte   `protobuf:"bytes,8,opt,name=NS,proto3" json:"NS,omitempty"`
	CNAME                []byte   `protobuf:"bytes,9,opt,name=CNAME,proto3" json:"CNAME,omitempty"`
	PTR                  []byte   `protobuf:"bytes,10,opt,name=PTR,proto3" json:"PTR,omitempty"`
	SOA                  *DNSSOA  `protobuf:"bytes,11,opt,name=SOA,proto3" json:"SOA,omitempty"`
	SRV                  *DNSSRV  `protobuf:"bytes,12,opt,name=SRV,proto3" json:"SRV,omitempty"`
	MX                   *DNSMX   `protobuf:"bytes,13,opt,name=MX,proto3" json:"MX,omitempty"`
	TXTs                 [][]byte `protobuf:"bytes,14,rep,name=TXTs,proto3" json:"TXTs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DNSResourceRecord) Reset()         { *m = DNSResourceRecord{} }
func (m *DNSResourceRecord) String() string { return proto.CompactTextString(m) }
func (*DNSResourceRecord) ProtoMessage()    {}
func (*DNSResourceRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_netcap_62f6063ce3cb4a3e, []int{43}
}
func (m *DNSResourceRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DNSResourceRecord.Unmarshal(m, b)
}
func (m *DNSResourceRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DNSResourceRecord.Marshal(b, m, deterministic)
}
func (dst *DNSResourceRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DNSResourceRecord.Merge(dst, src)
}
func (m *DNSResourceRecord) XXX_Size() int {
	return xxx_messageInfo_DNSResourceRecord.Size(m)
}
func (m *DNSResourceRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_DNSResourceRecord.DiscardUnknown(m)
}

var xxx_messageInfo_DNSResourceRecord proto.InternalMessageInfo

func (m *DNSResourceRecord) GetName() []byte {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *DNSResourceRecord) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *DNSResourceRecord) GetClass() int32 {
	if m != nil {
		return m.Class
	}
	return 0
}

func (m *DNSResourceRecord) GetTTL() uint32 {
	if m != nil {
		return m.TTL
	}
	return 0
}

func (m *DNSResourceRecord) GetDataLength() int32 {
	if m != nil {
		return m.DataLength
	}
	return 0
}

func (m *DNSResourceRecord) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *DNSResourceRecord) GetIP() string {
	if m != nil {
		return m.IP
	}
	return ""
}

func (m *DNSResourceRecord) GetNS() []byte {
	if m != nil {
		return m.NS
	}
	return nil
}

func (m *DNSResourceRecord) GetCNAME() []byte {
	if m != nil {
		return m.CNAME
	}
	return nil
}

func (m *DNSResourceRecord) GetPTR() []byte {
	if m != nil {
		return m.PTR
	}
	return nil
}

func (m *DNSResourceRecord) GetSOA() *DNSSOA {
	if m != nil {
		return m.SOA
	}
	return nil
}

func (m *DNSResourceRecord) GetSRV() *DNSSRV {
	if m != nil {
		return m.SRV
	}
	return nil
}

func (m *DNSResourceRecord) GetMX() *DNSMX {
	if m != nil {
		return m.MX
	}
	return nil
}

func (m *DNSResourceRecord) GetTXTs() [][]byte {
	if m != nil {
		return m.TXTs
	}
	return nil
}

// DNSSOA is a Start of Authority record.
// Each domain requires a SOA record at the cutover where a domain is delegated from its parent.
type DNSSOA struct {
	MName                []byte   `protobuf:"bytes,1,opt,name=MName,proto3" json:"MName,omitempty"`
	RName                []byte   `protobuf:"bytes,2,opt,name=RName,proto3" json:"RName,omitempty"`
	Serial               uint32   `protobuf:"varint,3,opt,name=Serial,proto3" json:"Serial,omitempty"`
	Refresh              uint32   `protobuf:"varint,4,opt,name=Refresh,proto3" json:"Refresh,omitempty"`
	Retry                uint32   `protobuf:"varint,5,opt,name=Retry,proto3" json:"Retry,omitempty"`
	Expire               uint32   `protobuf:"varint,6,opt,name=Expire,proto3" json:"Expire,omitempty"`
	Minimum              uint32   `protobuf:"varint,7,opt,name=Minimum,proto3" json:"Minimum,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DNSSOA) Reset()         { *m = DNSSOA{} }
func (m *DNSSOA) String() string { return proto.CompactTextString(m) }
func (*DNSSOA) ProtoMessage()    {}
func (*DNSSOA) Descriptor() ([]byte, []int) {
	return fileDescriptor_netcap_62f6063ce3cb4a3e, []int{44}
}
func (m *DNSSOA) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DNSSOA.Unmarshal(m, b)
}
func (m *DNSSOA) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DNSSOA.Marshal(b, m, deterministic)
}
func (dst *DNSSOA) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DNSSOA.Merge(dst, src)
}
func (m *DNSSOA) XXX_Size() int {
	return xxx_messageInfo_DNSSOA.Size(m)
}
func (m *DNSSOA) XXX_DiscardUnknown() {
	xxx_messageInfo_DNSSOA.DiscardUnknown(m)
}

var xxx_messageInfo_DNSSOA proto.InternalMessageInfo

func (m *DNSSOA) GetMName() []byte {
	if m != nil {
		return m.MName
	}
	return nil
}

func (m *DNSSOA) GetRName() []byte {
	if m != nil {
		return m.RName
	}
	return nil
}

func (m *DNSSOA) GetSerial() uint32 {
	if m != nil {
		return m.Serial
	}
	return 0
}

func (m *DNSSOA) GetRefresh() uint32 {
	if m != nil {
		return m.Refresh
	}
	return 0
}

func (m *DNSSOA) GetRetry() uint32 {
	if m != nil {
		return m.Retry
	}
	return 0
}

func (m *DNSSOA) GetExpire() uint32 {
	if m != nil {
		return m.Expire
	}
	return 0
}

func (m *DNSSOA) GetMinimum() uint32 {
	if m != nil {
		return m.Minimum
	}
	return 0
}

// DNSSRV is a Service record, defining a location (hostname/port) of a server/service.
type DNSSRV struct {
	Priority             int32    `protobuf:"varint,1,opt,name=Priority,proto3" json:"Priority,omitempty"`
	Weight               int32    `protobuf:"varint,2,opt,name=Weight,proto3" json:"Weight,omitempty"`
	Port                 int32    `protobuf:"varint,3,opt,name=Port,proto3" json:"Port,omitempty"`
	Name                 []byte   `protobuf:"bytes,4,opt,name=Name,proto3" json:"Name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DNSSRV) Reset()         { *m = DNSSRV{} }
func (m *DNSSRV) String() string { return proto.CompactTextString(m) }
func (*DNSSRV) ProtoMessage()    {}
func (*DNSSRV) Descriptor() ([]byte, []int) {
	return fileDescriptor_netcap_62f6063ce3cb4a3e, []int{45}
}
func (m *DNSSRV) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DNSSRV.Unmarshal(m, b)
}
func (m *DNSSRV) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DNSSRV.Marshal(b, m, deterministic)
}
func (dst *DNSSRV) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DNSSRV.Merge(dst, src)
}
func (m *DNSSRV) XXX_Size() int {
	return xxx_messageInfo_DNSSRV.Size(m)
}
func (m *DNSSRV) XXX_DiscardUnknown() {
	xxx_messageInfo_DNSSRV.DiscardUnknown(m)
}

var xxx_messageInfo_DNSSRV proto.InternalMessageInfo

func (m *DNSSRV) GetPriority() int32 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func (m *DNSSRV) GetWeight() int32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *DNSSRV) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *DNSSRV) GetName() []byte {
	if m != nil {
		return m.Name
	}
	return nil
}

// DNSMX is a mail exchange record, defining a mail server for a recipient's domain.
type DNSMX struct {
	Preference           int32    `protobuf:"varint,1,opt,name=Preference,proto3" json:"Preference,omitempty"`
	Name                 []byte   `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DNSMX) Reset()         { *m = DNSMX{} }
func (m *DNSMX) String() string { return proto.CompactTextString(m) }
func (*DNSMX) ProtoMessage()    {}
func (*DNSMX) Descriptor() ([]byte, []int) {
	return fileDescriptor_netcap_62f6063ce3cb4a3e, []int{46}
}
func (m *DNSMX) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DNSMX.Unmarshal(m, b)
}
func (m *DNSMX) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DNSMX.Marshal(b, m, deterministic)
}
func (dst *DNSMX) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DNSMX.Merge(dst, src)
}
func (m *DNSMX) XXX_Size() int {
	return xxx_messageInfo_DNSMX.Size(m)
}
func (m *DNSMX) XXX_DiscardUnknown() {
	xxx_messageInfo_DNSMX.DiscardUnknown(m)
}

var xxx_messageInfo_DNSMX proto.InternalMessageInfo

func (m *DNSMX) GetPreference() int32 {
	if m != nil {
		return m.Preference
	}
	return 0
}

func (m *DNSMX) GetName() []byte {
	if m != nil {
		return m.Name
	}
	return nil
}

// DNSQuestion wraps a single request (question) within a DNS query.
type DNSQuestion struct {
	Name                 []byte   `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Type                 int32    `protobuf:"varint,2,opt,name=Type,proto3" json:"Type,omitempty"`
	Class                int32    `protobuf:"varint,3,opt,name=Class,proto3" json:"Class,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DNSQuestion) Reset()         { *m = DNSQuestion{} }
func (m *DNSQuestion) String() string { return proto.CompactTextString(m) }
func (*DNSQuestion) ProtoMessage()    {}
func (*DNSQuestion) Descriptor() ([]byte, []int) {
	return fileDescriptor_netcap_62f6063ce3cb4a3e, []int{47}
}
func (m *DNSQuestion) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DNSQuestion.Unmarshal(m, b)
}
func (m *DNSQuestion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DNSQuestion.Marshal(b, m, deterministic)
}
func (dst *DNSQuestion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DNSQuestion.Merge(dst, src)
}
func (m *DNSQuestion) XXX_Size() int {
	return xxx_messageInfo_DNSQuestion.Size(m)
}
func (m *DNSQuestion) XXX_DiscardUnknown() {
	xxx_messageInfo_DNSQuestion.DiscardUnknown(m)
}

var xxx_messageInfo_DNSQuestion proto.InternalMessageInfo

func (m *DNSQuestion) GetName() []byte {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *DNSQuestion) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *DNSQuestion) GetClass() int32 {
	if m != nil {
		return m.Class
	}
	return 0
}

type DHCPv4 struct {
	Timestamp            string        `protobuf:"bytes,1,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	Operation            int32         `protobuf:"varint,2,opt,name=Operation,proto3" json:"Operation,omitempty"`
	HardwareType         int32         `protobuf:"varint,3,opt,name=HardwareType,proto3" json:"HardwareType,omitempty"`
	HardwareLen          int32         `protobuf:"varint,4,opt,name=HardwareLen,proto3" json:"HardwareLen,omitempty"`
	HardwareOpts         int32         `protobuf:"varint,5,opt,name=HardwareOpts,proto3" json:"HardwareOpts,omitempty"`
	Xid                  uint32        `protobuf:"varint,6,opt,name=Xid,proto3" json:"Xid,omitempty"`
	Secs                 int32         `protobuf:"varint,7,opt,name=Secs,proto3" json:"Secs,omitempty"`
	Flags                int32         `protobuf:"varint,8,opt,name=Flags,proto3" json:"Flags,omitempty"`
	ClientIP             string        `protobuf:"bytes,9,opt,name=ClientIP,proto3" json:"ClientIP,omitempty"`
	YourClientIP         string        `protobuf:"bytes,10,opt,name=YourClientIP,proto3" json:"YourClientIP,omitempty"`
	NextServerIP         string        `protobuf:"bytes,11,opt,name=NextServerIP,proto3" json:"NextServerIP,omitempty"`
	RelayAgentIP         string        `protobuf:"bytes,12,opt,name=RelayAgentIP,proto3" json:"RelayAgentIP,omitempty"`
	ClientHWAddr         string        `protobuf:"bytes,13,opt,name=ClientHWAddr,proto3" json:"ClientHWAddr,omitempty"`
	ServerName           []byte        `protobuf:"bytes,14,opt,name=ServerName,proto3" json:"ServerName,omitempty"`
	File                 []byte        `protobuf:"bytes,15,opt,name=File,proto3" json:"File,omitempty"`
	Options              []*DHCPOption `protobuf:"bytes,16,rep,name=Options,proto3" json:"Options,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *DHCPv4) Reset()         { *m = DHCPv4{} }
func (m *DHCPv4) String() string { return proto.CompactTextString(m) }
func (*DHCPv4) ProtoMessage()    {}
func (*DHCPv4) Descriptor() ([]byte, []int) {
	return fileDescriptor_netcap_62f6063ce3cb4a3e, []int{48}
}
func (m *DHCPv4) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DHCPv4.Unmarshal(m, b)
}
func (m *DHCPv4) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DHCPv4.Marshal(b, m, deterministic)
}
func (dst *DHCPv4) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DHCPv4.Merge(dst, src)
}
func (m *DHCPv4) XXX_Size() int {
	return xxx_messageInfo_DHCPv4.Size(m)
}
func (m *DHCPv4) XXX_DiscardUnknown() {
	xxx_messageInfo_DHCPv4.DiscardUnknown(m)
}

var xxx_messageInfo_DHCPv4 proto.InternalMessageInfo

func (m *DHCPv4) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *DHCPv4) GetOperation() int32 {
	if m != nil {
		return m.Operation
	}
	return 0
}

func (m *DHCPv4) GetHardwareType() int32 {
	if m != nil {
		return m.HardwareType
	}
	return 0
}

func (m *DHCPv4) GetHardwareLen() int32 {
	if m != nil {
		return m.HardwareLen
	}
	return 0
}

func (m *DHCPv4) GetHardwareOpts() int32 {
	if m != nil {
		return m.HardwareOpts
	}
	return 0
}

func (m *DHCPv4) GetXid() uint32 {
	if m != nil {
		return m.Xid
	}
	return 0
}

func (m *DHCPv4) GetSecs() int32 {
	if m != nil {
		return m.Secs
	}
	return 0
}

func (m *DHCPv4) GetFlags() int32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *DHCPv4) GetClientIP() string {
	if m != nil {
		return m.ClientIP
	}
	return ""
}

func (m *DHCPv4) GetYourClientIP() string {
	if m != nil {
		return m.YourClientIP
	}
	return ""
}

func (m *DHCPv4) GetNextServerIP() string {
	if m != nil {
		return m.NextServerIP
	}
	return ""
}

func (m *DHCPv4) GetRelayAgentIP() string {
	if m != nil {
		return m.RelayAgentIP
	}
	return ""
}

func (m *DHCPv4) GetClientHWAddr() string {
	if m != nil {
		return m.ClientHWAddr
	}
	return ""
}

func (m *DHCPv4) GetServerName() []byte {
	if m != nil {
		return m.ServerName
	}
	return nil
}

func (m *DHCPv4) GetFile() []byte {
	if m != nil {
		return m.File
	}
	return nil
}

func (m *DHCPv4) GetOptions() []*DHCPOption {
	if m != nil {
		return m.Options
	}
	return nil
}

type DHCPOption struct {
	Type                 int32    `protobuf:"varint,1,opt,name=Type,proto3" json:"Type,omitempty"`
	Length               int32    `protobuf:"varint,2,opt,name=Length,proto3" json:"Length,omitempty"`
	Data                 []byte   `protobuf:"bytes,3,opt,name=Data,proto3" json:"Data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DHCPOption) Reset()         { *m = DHCPOption{} }
func (m *DHCPOption) String() string { return proto.CompactTextString(m) }
func (*DHCPOption) ProtoMessage()    {}
func (*DHCPOption) Descriptor() ([]byte, []int) {
	return fileDescriptor_netcap_62f6063ce3cb4a3e, []int{49}
}
func (m *DHCPOption) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DHCPOption.Unmarshal(m, b)
}
func (m *DHCPOption) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DHCPOption.Marshal(b, m, deterministic)
}
func (dst *DHCPOption) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DHCPOption.Merge(dst, src)
}
func (m *DHCPOption) XXX_Size() int {
	return xxx_messageInfo_DHCPOption.Size(m)
}
func (m *DHCPOption) XXX_DiscardUnknown() {
	xxx_messageInfo_DHCPOption.DiscardUnknown(m)
}

var xxx_messageInfo_DHCPOption proto.InternalMessageInfo

func (m *DHCPOption) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *DHCPOption) GetLength() int32 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *DHCPOption) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type DHCPv6 struct {
	Timestamp            string          `protobuf:"bytes,1,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	MsgType              int32           `protobuf:"varint,2,opt,name=MsgType,proto3" json:"MsgType,omitempty"`
	HopCount             int32           `protobuf:"varint,3,opt,name=HopCount,proto3" json:"HopCount,omitempty"`
	LinkAddr             string          `protobuf:"bytes,4,opt,name=LinkAddr,proto3" json:"LinkAddr,omitempty"`
	PeerAddr             string          `protobuf:"bytes,5,opt,name=PeerAddr,proto3" json:"PeerAddr,omitempty"`
	TransactionID        []byte          `protobuf:"bytes,6,opt,name=TransactionID,proto3" json:"TransactionID,omitempty"`
	Options              []*DHCPv6Option `protobuf:"bytes,7,rep,name=Options,proto3" json:"Options,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *DHCPv6) Reset()         { *m = DHCPv6{} }
func (m *DHCPv6) String() string { return proto.CompactTextString(m) }
func (*DHCPv6) ProtoMessage()    {}
func (*DHCPv6) Descriptor() ([]byte, []int) {
	return fileDescriptor_netcap_62f6063ce3cb4a3e, []int{50}
}
func (m *DHCPv6) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DHCPv6.Unmarshal(m, b)
}
func (m *DHCPv6) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DHCPv6.Marshal(b, m, deterministic)
}
func (dst *DHCPv6) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DHCPv6.Merge(dst, src)
}
func (m *DHCPv6) XXX_Size() int {
	return xxx_messageInfo_DHCPv6.Size(m)
}
func (m *DHCPv6) XXX_DiscardUnknown() {
	xxx_messageInfo_DHCPv6.DiscardUnknown(m)
}

var xxx_messageInfo_DHCPv6 proto.InternalMessageInfo

func (m *DHCPv6) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *DHCPv6) GetMsgType() int32 {
	if m != nil {
		return m.MsgType
	}
	return 0
}

func (m *DHCPv6) GetHopCount() int32 {
	if m != nil {
		return m.HopCount
	}
	return 0
}

func (m *DHCPv6) GetLinkAddr() string {
	if m != nil {
		return m.LinkAddr
	}
	return ""
}

func (m *DHCPv6) GetPeerAddr() string {
	if m != nil {
		return m.PeerAddr
	}
	return ""
}

func (m *DHCPv6) GetTransactionID() []byte {
	if m != nil {
		return m.TransactionID
	}
	return nil
}

func (m *DHCPv6) GetOptions() []*DHCPv6Option {
	if m != nil {
		return m.Options
	}
	return nil
}

type DHCPv6Option struct {
	Code                 int32    `protobuf:"varint,1,opt,name=Code,proto3" json:"Code,omitempty"`
	Length               int32    `protobuf:"varint,2,opt,name=Length,proto3" json:"Length,omitempty"`
	Data                 []byte   `protobuf:"bytes,3,opt,name=Data,proto3" json:"Data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DHCPv6Option) Reset()         { *m = DHCPv6Option{} }
func (m *DHCPv6Option) String() string { return proto.CompactTextString(m) }
func (*DHCPv6Option) ProtoMessage()    {}
func (*DHCPv6Option) Descriptor() ([]byte, []int) {
	return fileDescriptor_netcap_62f6063ce3cb4a3e, []int{51}
}
func (m *DHCPv6Option) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DHCPv6Option.Unmarshal(m, b)
}
func (m *DHCPv6Option) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DHCPv6Option.Marshal(b, m, deterministic)
}
func (dst *DHCPv6Option) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DHCPv6Option.Merge(dst, src)
}
func (m *DHCPv6Option) XXX_Size() int {
	return xxx_messageInfo_DHCPv6Option.Size(m)
}
func (m *DHCPv6Option) XXX_DiscardUnknown() {
	xxx_messageInfo_DHCPv6Option.DiscardUnknown(m)
}

var xxx_messageInfo_DHCPv6Option proto.InternalMessageInfo

func (m *DHCPv6Option) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *DHCPv6Option) GetLength() int32 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *DHCPv6Option) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// LLC is the layer used for 802.2 Logical Link Control headers.
// See http://standards.ieee.org/getieee802/download/802.2-1998.pdf
type LLC struct {
	Timestamp            string   `protobuf:"bytes,1,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	DSAP                 int32    `protobuf:"varint,2,opt,name=DSAP,proto3" json:"DSAP,omitempty"`
	IG                   bool     `protobuf:"varint,3,opt,name=IG,proto3" json:"IG,omitempty"`
	SSAP                 int32    `protobuf:"varint,4,opt,name=SSAP,proto3" json:"SSAP,omitempty"`
	CR                   bool     `protobuf:"varint,5,opt,name=CR,proto3" json:"CR,omitempty"`
	Control              int32    `protobuf:"varint,6,opt,name=Control,proto3" json:"Control,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LLC) Reset()         { *m = LLC{} }
func (m *LLC) String() string { return proto.CompactTextString(m) }
func (*LLC) ProtoMessage()    {}
func (*LLC) Descriptor() ([]byte, []int) {
	return fileDescriptor_netcap_62f6063ce3cb4a3e, []int{52}
}
func (m *LLC) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LLC.Unmarshal(m, b)
}
func (m *LLC) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LLC.Marshal(b, m, deterministic)
}
func (dst *LLC) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LLC.Merge(dst, src)
}
func (m *LLC) XXX_Size() int {
	return xxx_messageInfo_LLC.Size(m)
}
func (m *LLC) XXX_DiscardUnknown() {
	xxx_messageInfo_LLC.DiscardUnknown(m)
}

var xxx_messageInfo_LLC proto.InternalMessageInfo

func (m *LLC) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *LLC) GetDSAP() int32 {
	if m != nil {
		return m.DSAP
	}
	return 0
}

func (m *LLC) GetIG() bool {
	if m != nil {
		return m.IG
	}
	return false
}

func (m *LLC) GetSSAP() int32 {
	if m != nil {
		return m.SSAP
	}
	return 0
}

func (m *LLC) GetCR() bool {
	if m != nil {
		return m.CR
	}
	return false
}

func (m *LLC) GetControl() int32 {
	if m != nil {
		return m.Control
	}
	return 0
}

type NTP struct {
	Timestamp            string   `protobuf:"bytes,1,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	LeapIndicator        int32    `protobuf:"varint,2,opt,name=LeapIndicator,proto3" json:"LeapIndicator,omitempty"`
	Version              int32    `protobuf:"varint,3,opt,name=Version,proto3" json:"Version,omitempty"`
	Mode                 int32    `protobuf:"varint,4,opt,name=Mode,proto3" json:"Mode,omitempty"`
	Stratum              int32    `protobuf:"varint,5,opt,name=Stratum,proto3" json:"Stratum,omitempty"`
	Poll                 int32    `protobuf:"varint,6,opt,name=Poll,proto3" json:"Poll,omitempty"`
	Precision            int32    `protobuf:"varint,7,opt,name=Precision,proto3" json:"Precision,omitempty"`
	RootDelay            uint32   `protobuf:"varint,8,opt,name=RootDelay,proto3" json:"RootDelay,omitempty"`
	RootDispersion       uint32   `protobuf:"varint,9,opt,name=RootDispersion,proto3" json:"RootDispersion,omitempty"`
	ReferenceID          uint32   `protobuf:"varint,10,opt,name=ReferenceID,proto3" json:"ReferenceID,omitempty"`
	ReferenceTimestamp   uint64   `protobuf:"varint,11,opt,name=ReferenceTimestamp,proto3" json:"ReferenceTimestamp,omitempty"`
	OriginTimestamp      uint64   `protobuf:"varint,12,opt,name=OriginTimestamp,proto3" json:"OriginTimestamp,omitempty"`
	ReceiveTimestamp     uint64   `protobuf:"varint,13,opt,name=ReceiveTimestamp,proto3" json:"ReceiveTimestamp,omitempty"`
	TransmitTimestamp    uint64   `protobuf:"varint,14,opt,name=TransmitTimestamp,proto3" json:"TransmitTimestamp,omitempty"`
	ExtensionBytes       []byte   `protobuf:"bytes,15,opt,name=ExtensionBytes,proto3" json:"ExtensionBytes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NTP) Reset()         { *m = NTP{} }
func (m *NTP) String() string { return proto.CompactTextString(m) }
func (*NTP) ProtoMessage()    {}
func (*NTP) Descriptor() ([]byte, []int) {
	return fileDescriptor_netcap_62f6063ce3cb4a3e, []int{53}
}
func (m *NTP) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NTP.Unmarshal(m, b)
}
func (m *NTP) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NTP.Marshal(b, m, deterministic)
}
func (dst *NTP) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NTP.Merge(dst, src)
}
func (m *NTP) XXX_Size() int {
	return xxx_messageInfo_NTP.Size(m)
}
func (m *NTP) XXX_DiscardUnknown() {
	xxx_messageInfo_NTP.DiscardUnknown(m)
}

var xxx_messageInfo_NTP proto.InternalMessageInfo

func (m *NTP) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *NTP) GetLeapIndicator() int32 {
	if m != nil {
		return m.LeapIndicator
	}
	return 0
}

func (m *NTP) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *NTP) GetMode() int32 {
	if m != nil {
		return m.Mode
	}
	return 0
}

func (m *NTP) GetStratum() int32 {
	if m != nil {
		return m.Stratum
	}
	return 0
}

func (m *NTP) GetPoll() int32 {
	if m != nil {
		return m.Poll
	}
	return 0
}

func (m *NTP) GetPrecision() int32 {
	if m != nil {
		return m.Precision
	}
	return 0
}

func (m *NTP) GetRootDelay() uint32 {
	if m != nil {
		return m.RootDelay
	}
	return 0
}

func (m *NTP) GetRootDispersion() uint32 {
	if m != nil {
		return m.RootDispersion
	}
	return 0
}

func (m *NTP) GetReferenceID() uint32 {
	if m != nil {
		return m.ReferenceID
	}
	return 0
}

func (m *NTP) GetReferenceTimestamp() uint64 {
	if m != nil {
		return m.ReferenceTimestamp
	}
	return 0
}

func (m *NTP) GetOriginTimestamp() uint64 {
	if m != nil {
		return m.OriginTimestamp
	}
	return 0
}

func (m *NTP) GetReceiveTimestamp() uint64 {
	if m != nil {
		return m.ReceiveTimestamp
	}
	return 0
}

func (m *NTP) GetTransmitTimestamp() uint64 {
	if m != nil {
		return m.TransmitTimestamp
	}
	return 0
}

func (m *NTP) GetExtensionBytes() []byte {
	if m != nil {
		return m.ExtensionBytes
	}
	return nil
}

// The Session Initiation Protocol (SIP) is a signalling protocol used for initiating, maintaining, and terminating real-time sessions that include voice, video and messaging applications
type SIP struct {
	Timestamp string `protobuf:"bytes,1,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	// Base information
	Version int32 `protobuf:"varint,2,opt,name=Version,proto3" json:"Version,omitempty"`
	Method  int32 `protobuf:"varint,3,opt,name=Method,proto3" json:"Method,omitempty"`
	// map[string][]string Headers
	Headers []string `protobuf:"bytes,4,rep,name=Headers,proto3" json:"Headers,omitempty"`
	// Response
	IsResponse           bool     `protobuf:"varint,5,opt,name=IsResponse,proto3" json:"IsResponse,omitempty"`
	ResponseCode         int32    `protobuf:"varint,6,opt,name=ResponseCode,proto3" json:"ResponseCode,omitempty"`
	ResponseStatus       string   `protobuf:"bytes,7,opt,name=ResponseStatus,proto3" json:"ResponseStatus,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SIP) Reset()         { *m = SIP{} }
func (m *SIP) String() string { return proto.CompactTextString(m) }
func (*SIP) ProtoMessage()    {}
func (*SIP) Descriptor() ([]byte, []int) {
	return fileDescriptor_netcap_62f6063ce3cb4a3e, []int{54}
}
func (m *SIP) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SIP.Unmarshal(m, b)
}
func (m *SIP) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SIP.Marshal(b, m, deterministic)
}
func (dst *SIP) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SIP.Merge(dst, src)
}
func (m *SIP) XXX_Size() int {
	return xxx_messageInfo_SIP.Size(m)
}
func (m *SIP) XXX_DiscardUnknown() {
	xxx_messageInfo_SIP.DiscardUnknown(m)
}

var xxx_messageInfo_SIP proto.InternalMessageInfo

func (m *SIP) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *SIP) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *SIP) GetMethod() int32 {
	if m != nil {
		return m.Method
	}
	return 0
}

func (m *SIP) GetHeaders() []string {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *SIP) GetIsResponse() bool {
	if m != nil {
		return m.IsResponse
	}
	return false
}

func (m *SIP) GetResponseCode() int32 {
	if m != nil {
		return m.ResponseCode
	}
	return 0
}

func (m *SIP) GetResponseStatus() string {
	if m != nil {
		return m.ResponseStatus
	}
	return ""
}

type IGMP struct {
	Timestamp               string               `protobuf:"bytes,1,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	Type                    int32                `protobuf:"varint,2,opt,name=Type,proto3" json:"Type,omitempty"`
	MaxResponseTime         uint64               `protobuf:"varint,3,opt,name=MaxResponseTime,proto3" json:"MaxResponseTime,omitempty"`
	Checksum                int32                `protobuf:"varint,4,opt,name=Checksum,proto3" json:"Checksum,omitempty"`
	GroupAddress            []byte               `protobuf:"bytes,5,opt,name=GroupAddress,proto3" json:"GroupAddress,omitempty"`
	SupressRouterProcessing bool                 `protobuf:"varint,6,opt,name=SupressRouterProcessing,proto3" json:"SupressRouterProcessing,omitempty"`
	RobustnessValue         int32                `protobuf:"varint,7,opt,name=RobustnessValue,proto3" json:"RobustnessValue,omitempty"`
	IntervalTime            uint64               `protobuf:"varint,8,opt,name=IntervalTime,proto3" json:"IntervalTime,omitempty"`
	SourceAddresses         []string             `protobuf:"bytes,9,rep,name=SourceAddresses,proto3" json:"SourceAddresses,omitempty"`
	NumberOfGroupRecords    int32                `protobuf:"varint,10,opt,name=NumberOfGroupRecords,proto3" json:"NumberOfGroupRecords,omitempty"`
	NumberOfSources         int32                `protobuf:"varint,11,opt,name=NumberOfSources,proto3" json:"NumberOfSources,omitempty"`
	GroupRecords            []*IGMPv3GroupRecord `protobuf:"bytes,12,rep,name=GroupRecords,proto3" json:"GroupRecords,omitempty"`
	Version                 int32                `protobuf:"varint,13,opt,name=Version,proto3" json:"Version,omitempty"`
	XXX_NoUnkeyedLiteral    struct{}             `json:"-"`
	XXX_unrecognized        []byte               `json:"-"`
	XXX_sizecache           int32                `json:"-"`
}

func (m *IGMP) Reset()         { *m = IGMP{} }
func (m *IGMP) String() string { return proto.CompactTextString(m) }
func (*IGMP) ProtoMessage()    {}
func (*IGMP) Descriptor() ([]byte, []int) {
	return fileDescriptor_netcap_62f6063ce3cb4a3e, []int{55}
}
func (m *IGMP) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IGMP.Unmarshal(m, b)
}
func (m *IGMP) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IGMP.Marshal(b, m, deterministic)
}
func (dst *IGMP) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IGMP.Merge(dst, src)
}
func (m *IGMP) XXX_Size() int {
	return xxx_messageInfo_IGMP.Size(m)
}
func (m *IGMP) XXX_DiscardUnknown() {
	xxx_messageInfo_IGMP.DiscardUnknown(m)
}

var xxx_messageInfo_IGMP proto.InternalMessageInfo

func (m *IGMP) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *IGMP) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *IGMP) GetMaxResponseTime() uint64 {
	if m != nil {
		return m.MaxResponseTime
	}
	return 0
}

func (m *IGMP) GetChecksum() int32 {
	if m != nil {
		return m.Checksum
	}
	return 0
}

func (m *IGMP) GetGroupAddress() []byte {
	if m != nil {
		return m.GroupAddress
	}
	return nil
}

func (m *IGMP) GetSupressRouterProcessing() bool {
	if m != nil {
		return m.SupressRouterProcessing
	}
	return false
}

func (m *IGMP) GetRobustnessValue() int32 {
	if m != nil {
		return m.RobustnessValue
	}
	return 0
}

func (m *IGMP) GetIntervalTime() uint64 {
	if m != nil {
		return m.IntervalTime
	}
	return 0
}

func (m *IGMP) GetSourceAddresses() []string {
	if m != nil {
		return m.SourceAddresses
	}
	return nil
}

func (m *IGMP) GetNumberOfGroupRecords() int32 {
	if m != nil {
		return m.NumberOfGroupRecords
	}
	return 0
}

func (m *IGMP) GetNumberOfSources() int32 {
	if m != nil {
		return m.NumberOfSources
	}
	return 0
}

func (m *IGMP) GetGroupRecords() []*IGMPv3GroupRecord {
	if m != nil {
		return m.GroupRecords
	}
	return nil
}

func (m *IGMP) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

type IGMPv3GroupRecord struct {
	Type                 int32    `protobuf:"varint,1,opt,name=Type,proto3" json:"Type,omitempty"`
	AuxDataLen           int32    `protobuf:"varint,2,opt,name=AuxDataLen,proto3" json:"AuxDataLen,omitempty"`
	NumberOfSources      int32    `protobuf:"varint,3,opt,name=NumberOfSources,proto3" json:"NumberOfSources,omitempty"`
	MulticastAddress     string   `protobuf:"bytes,4,opt,name=MulticastAddress,proto3" json:"MulticastAddress,omitempty"`
	SourceAddresses      []string `protobuf:"bytes,5,rep,name=SourceAddresses,proto3" json:"SourceAddresses,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IGMPv3GroupRecord) Reset()         { *m = IGMPv3GroupRecord{} }
func (m *IGMPv3GroupRecord) String() string { return proto.CompactTextString(m) }
func (*IGMPv3GroupRecord) ProtoMessage()    {}
func (*IGMPv3GroupRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_netcap_62f6063ce3cb4a3e, []int{56}
}
func (m *IGMPv3GroupRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IGMPv3GroupRecord.Unmarshal(m, b)
}
func (m *IGMPv3GroupRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IGMPv3GroupRecord.Marshal(b, m, deterministic)
}
func (dst *IGMPv3GroupRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IGMPv3GroupRecord.Merge(dst, src)
}
func (m *IGMPv3GroupRecord) XXX_Size() int {
	return xxx_messageInfo_IGMPv3GroupRecord.Size(m)
}
func (m *IGMPv3GroupRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_IGMPv3GroupRecord.DiscardUnknown(m)
}

var xxx_messageInfo_IGMPv3GroupRecord proto.InternalMessageInfo

func (m *IGMPv3GroupRecord) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *IGMPv3GroupRecord) GetAuxDataLen() int32 {
	if m != nil {
		return m.AuxDataLen
	}
	return 0
}

func (m *IGMPv3GroupRecord) GetNumberOfSources() int32 {
	if m != nil {
		return m.NumberOfSources
	}
	return 0
}

func (m *IGMPv3GroupRecord) GetMulticastAddress() string {
	if m != nil {
		return m.MulticastAddress
	}
	return ""
}

func (m *IGMPv3GroupRecord) GetSourceAddresses() []string {
	if m != nil {
		return m.SourceAddresses
	}
	return nil
}

type IPv6HopByHop struct {
	Timestamp            string                `protobuf:"bytes,1,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	Options              []*IPv6HopByHopOption `protobuf:"bytes,2,rep,name=Options,proto3" json:"Options,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *IPv6HopByHop) Reset()         { *m = IPv6HopByHop{} }
func (m *IPv6HopByHop) String() string { return proto.CompactTextString(m) }
func (*IPv6HopByHop) ProtoMessage()    {}
func (*IPv6HopByHop) Descriptor() ([]byte, []int) {
	return fileDescriptor_netcap_62f6063ce3cb4a3e, []int{57}
}
func (m *IPv6HopByHop) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IPv6HopByHop.Unmarshal(m, b)
}
func (m *IPv6HopByHop) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IPv6HopByHop.Marshal(b, m, deterministic)
}
func (dst *IPv6HopByHop) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IPv6HopByHop.Merge(dst, src)
}
func (m *IPv6HopByHop) XXX_Size() int {
	return xxx_messageInfo_IPv6HopByHop.Size(m)
}
func (m *IPv6HopByHop) XXX_DiscardUnknown() {
	xxx_messageInfo_IPv6HopByHop.DiscardUnknown(m)
}

var xxx_messageInfo_IPv6HopByHop proto.InternalMessageInfo

func (m *IPv6HopByHop) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *IPv6HopByHop) GetOptions() []*IPv6HopByHopOption {
	if m != nil {
		return m.Options
	}
	return nil
}

type IPv6HopByHopOption struct {
	OptionType           int32                        `protobuf:"varint,1,opt,name=OptionType,proto3" json:"OptionType,omitempty"`
	OptionLength         int32                        `protobuf:"varint,2,opt,name=OptionLength,proto3" json:"OptionLength,omitempty"`
	ActualLength         int32                        `protobuf:"varint,3,opt,name=ActualLength,proto3" json:"ActualLength,omitempty"`
	OptionData           []byte                       `protobuf:"bytes,4,opt,name=OptionData,proto3" json:"OptionData,omitempty"`
	OptionAlignment      *IPv6HopByHopOptionAlignment `protobuf:"bytes,5,opt,name=OptionAlignment,proto3" json:"OptionAlignment,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *IPv6HopByHopOption) Reset()         { *m = IPv6HopByHopOption{} }
func (m *IPv6HopByHopOption) String() string { return proto.CompactTextString(m) }
func (*IPv6HopByHopOption) ProtoMessage()    {}
func (*IPv6HopByHopOption) Descriptor() ([]byte, []int) {
	return fileDescriptor_netcap_62f6063ce3cb4a3e, []int{58}
}
func (m *IPv6HopByHopOption) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IPv6HopByHopOption.Unmarshal(m, b)
}
func (m *IPv6HopByHopOption) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IPv6HopByHopOption.Marshal(b, m, deterministic)
}
func (dst *IPv6HopByHopOption) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IPv6HopByHopOption.Merge(dst, src)
}
func (m *IPv6HopByHopOption) XXX_Size() int {
	return xxx_messageInfo_IPv6HopByHopOption.Size(m)
}
func (m *IPv6HopByHopOption) XXX_DiscardUnknown() {
	xxx_messageInfo_IPv6HopByHopOption.DiscardUnknown(m)
}

var xxx_messageInfo_IPv6HopByHopOption proto.InternalMessageInfo

func (m *IPv6HopByHopOption) GetOptionType() int32 {
	if m != nil {
		return m.OptionType
	}
	return 0
}

func (m *IPv6HopByHopOption) GetOptionLength() int32 {
	if m != nil {
		return m.OptionLength
	}
	return 0
}

func (m *IPv6HopByHopOption) GetActualLength() int32 {
	if m != nil {
		return m.ActualLength
	}
	return 0
}

func (m *IPv6HopByHopOption) GetOptionData() []byte {
	if m != nil {
		return m.OptionData
	}
	return nil
}

func (m *IPv6HopByHopOption) GetOptionAlignment() *IPv6HopByHopOptionAlignment {
	if m != nil {
		return m.OptionAlignment
	}
	return nil
}

type IPv6HopByHopOptionAlignment struct {
	One                  int32    `protobuf:"varint,1,opt,name=One,proto3" json:"One,omitempty"`
	Two                  int32    `protobuf:"varint,2,opt,name=Two,proto3" json:"Two,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IPv6HopByHopOptionAlignment) Reset()         { *m = IPv6HopByHopOptionAlignment{} }
func (m *IPv6HopByHopOptionAlignment) String() string { return proto.CompactTextString(m) }
func (*IPv6HopByHopOptionAlignment) ProtoMessage()    {}
func (*IPv6HopByHopOptionAlignment) Descriptor() ([]byte, []int) {
	return fileDescriptor_netcap_62f6063ce3cb4a3e, []int{59}
}
func (m *IPv6HopByHopOptionAlignment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IPv6HopByHopOptionAlignment.Unmarshal(m, b)
}
func (m *IPv6HopByHopOptionAlignment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IPv6HopByHopOptionAlignment.Marshal(b, m, deterministic)
}
func (dst *IPv6HopByHopOptionAlignment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IPv6HopByHopOptionAlignment.Merge(dst, src)
}
func (m *IPv6HopByHopOptionAlignment) XXX_Size() int {
	return xxx_messageInfo_IPv6HopByHopOptionAlignment.Size(m)
}
func (m *IPv6HopByHopOptionAlignment) XXX_DiscardUnknown() {
	xxx_messageInfo_IPv6HopByHopOptionAlignment.DiscardUnknown(m)
}

var xxx_messageInfo_IPv6HopByHopOptionAlignment proto.InternalMessageInfo

func (m *IPv6HopByHopOptionAlignment) GetOne() int32 {
	if m != nil {
		return m.One
	}
	return 0
}

func (m *IPv6HopByHopOptionAlignment) GetTwo() int32 {
	if m != nil {
		return m.Two
	}
	return 0
}

// SNAP is used inside LLC. See http://standards.ieee.org/getieee802/download/802-2001.pdf. From http://en.wikipedia.org/wiki/Subnetwork_Access_Protocol:
// "[T]he Subnetwork Access Protocol (SNAP) is a mechanism for multiplexing,
// on networks using IEEE 802.2 LLC, more protocols than can be distinguished
// by the 8-bit 802.2 Service Access Point (SAP) fields."
type SNAP struct {
	Timestamp            string   `protobuf:"bytes,1,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	OrganizationalCode   []byte   `protobuf:"bytes,2,opt,name=OrganizationalCode,proto3" json:"OrganizationalCode,omitempty"`
	Type                 int32    `protobuf:"varint,3,opt,name=Type,proto3" json:"Type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SNAP) Reset()         { *m = SNAP{} }
func (m *SNAP) String() string { return proto.CompactTextString(m) }
func (*SNAP) ProtoMessage()    {}
func (*SNAP) Descriptor() ([]byte, []int) {
	return fileDescriptor_netcap_62f6063ce3cb4a3e, []int{60}
}
func (m *SNAP) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SNAP.Unmarshal(m, b)
}
func (m *SNAP) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SNAP.Marshal(b, m, deterministic)
}
func (dst *SNAP) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SNAP.Merge(dst, src)
}
func (m *SNAP) XXX_Size() int {
	return xxx_messageInfo_SNAP.Size(m)
}
func (m *SNAP) XXX_DiscardUnknown() {
	xxx_messageInfo_SNAP.DiscardUnknown(m)
}

var xxx_messageInfo_SNAP proto.InternalMessageInfo

func (m *SNAP) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *SNAP) GetOrganizationalCode() []byte {
	if m != nil {
		return m.OrganizationalCode
	}
	return nil
}

func (m *SNAP) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

type ICMPv6Echo struct {
	Timestamp            string   `protobuf:"bytes,1,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	Identifier           int32    `protobuf:"varint,2,opt,name=Identifier,proto3" json:"Identifier,omitempty"`
	SeqNumber            int32    `protobuf:"varint,3,opt,name=SeqNumber,proto3" json:"SeqNumber,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ICMPv6Echo) Reset()         { *m = ICMPv6Echo{} }
func (m *ICMPv6Echo) String() string { return proto.CompactTextString(m) }
func (*ICMPv6Echo) ProtoMessage()    {}
func (*ICMPv6Echo) Descriptor() ([]byte, []int) {
	return fileDescriptor_netcap_62f6063ce3cb4a3e, []int{61}
}
func (m *ICMPv6Echo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ICMPv6Echo.Unmarshal(m, b)
}
func (m *ICMPv6Echo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ICMPv6Echo.Marshal(b, m, deterministic)
}
func (dst *ICMPv6Echo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ICMPv6Echo.Merge(dst, src)
}
func (m *ICMPv6Echo) XXX_Size() int {
	return xxx_messageInfo_ICMPv6Echo.Size(m)
}
func (m *ICMPv6Echo) XXX_DiscardUnknown() {
	xxx_messageInfo_ICMPv6Echo.DiscardUnknown(m)
}

var xxx_messageInfo_ICMPv6Echo proto.InternalMessageInfo

func (m *ICMPv6Echo) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *ICMPv6Echo) GetIdentifier() int32 {
	if m != nil {
		return m.Identifier
	}
	return 0
}

func (m *ICMPv6Echo) GetSeqNumber() int32 {
	if m != nil {
		return m.SeqNumber
	}
	return 0
}

type ICMPv6NeighborSolicitation struct {
	Timestamp            string          `protobuf:"bytes,1,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	TargetAddress        string          `protobuf:"bytes,2,opt,name=TargetAddress,proto3" json:"TargetAddress,omitempty"`
	Options              []*ICMPv6Option `protobuf:"bytes,3,rep,name=Options,proto3" json:"Options,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ICMPv6NeighborSolicitation) Reset()         { *m = ICMPv6NeighborSolicitation{} }
func (m *ICMPv6NeighborSolicitation) String() string { return proto.CompactTextString(m) }
func (*ICMPv6NeighborSolicitation) ProtoMessage()    {}
func (*ICMPv6NeighborSolicitation) Descriptor() ([]byte, []int) {
	return fileDescriptor_netcap_62f6063ce3cb4a3e, []int{62}
}
func (m *ICMPv6NeighborSolicitation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ICMPv6NeighborSolicitation.Unmarshal(m, b)
}
func (m *ICMPv6NeighborSolicitation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ICMPv6NeighborSolicitation.Marshal(b, m, deterministic)
}
func (dst *ICMPv6NeighborSolicitation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ICMPv6NeighborSolicitation.Merge(dst, src)
}
func (m *ICMPv6NeighborSolicitation) XXX_Size() int {
	return xxx_messageInfo_ICMPv6NeighborSolicitation.Size(m)
}
func (m *ICMPv6NeighborSolicitation) XXX_DiscardUnknown() {
	xxx_messageInfo_ICMPv6NeighborSolicitation.DiscardUnknown(m)
}

var xxx_messageInfo_ICMPv6NeighborSolicitation proto.InternalMessageInfo

func (m *ICMPv6NeighborSolicitation) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *ICMPv6NeighborSolicitation) GetTargetAddress() string {
	if m != nil {
		return m.TargetAddress
	}
	return ""
}

func (m *ICMPv6NeighborSolicitation) GetOptions() []*ICMPv6Option {
	if m != nil {
		return m.Options
	}
	return nil
}

type ICMPv6RouterSolicitation struct {
	Timestamp            string          `protobuf:"bytes,1,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	Options              []*ICMPv6Option `protobuf:"bytes,2,rep,name=Options,proto3" json:"Options,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ICMPv6RouterSolicitation) Reset()         { *m = ICMPv6RouterSolicitation{} }
func (m *ICMPv6RouterSolicitation) String() string { return proto.CompactTextString(m) }
func (*ICMPv6RouterSolicitation) ProtoMessage()    {}
func (*ICMPv6RouterSolicitation) Descriptor() ([]byte, []int) {
	return fileDescriptor_netcap_62f6063ce3cb4a3e, []int{63}
}
func (m *ICMPv6RouterSolicitation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ICMPv6RouterSolicitation.Unmarshal(m, b)
}
func (m *ICMPv6RouterSolicitation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ICMPv6RouterSolicitation.Marshal(b, m, deterministic)
}
func (dst *ICMPv6RouterSolicitation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ICMPv6RouterSolicitation.Merge(dst, src)
}
func (m *ICMPv6RouterSolicitation) XXX_Size() int {
	return xxx_messageInfo_ICMPv6RouterSolicitation.Size(m)
}
func (m *ICMPv6RouterSolicitation) XXX_DiscardUnknown() {
	xxx_messageInfo_ICMPv6RouterSolicitation.DiscardUnknown(m)
}

var xxx_messageInfo_ICMPv6RouterSolicitation proto.InternalMessageInfo

func (m *ICMPv6RouterSolicitation) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *ICMPv6RouterSolicitation) GetOptions() []*ICMPv6Option {
	if m != nil {
		return m.Options
	}
	return nil
}

type HTTP struct {
	Timestamp            string   `protobuf:"bytes,1,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	Proto                string   `protobuf:"bytes,2,opt,name=Proto,proto3" json:"Proto,omitempty"`
	Method               string   `protobuf:"bytes,3,opt,name=Method,proto3" json:"Method,omitempty"`
	Host                 string   `protobuf:"bytes,4,opt,name=Host,proto3" json:"Host,omitempty"`
	UserAgent            string   `protobuf:"bytes,5,opt,name=UserAgent,proto3" json:"UserAgent,omitempty"`
	Referer              string   `protobuf:"bytes,6,opt,name=Referer,proto3" json:"Referer,omitempty"`
	ReqCookies           []string `protobuf:"bytes,7,rep,name=ReqCookies,proto3" json:"ReqCookies,omitempty"`
	ReqContentLength     int32    `protobuf:"varint,8,opt,name=ReqContentLength,proto3" json:"ReqContentLength,omitempty"`
	URL                  string   `protobuf:"bytes,9,opt,name=URL,proto3" json:"URL,omitempty"`
	ResContentLength     int32    `protobuf:"varint,10,opt,name=ResContentLength,proto3" json:"ResContentLength,omitempty"`
	ContentType          string   `protobuf:"bytes,11,opt,name=ContentType,proto3" json:"ContentType,omitempty"`
	StatusCode           int32    `protobuf:"varint,12,opt,name=StatusCode,proto3" json:"StatusCode,omitempty"`
	SrcIP                string   `protobuf:"bytes,13,opt,name=SrcIP,proto3" json:"SrcIP,omitempty"`
	DstIP                string   `protobuf:"bytes,14,opt,name=DstIP,proto3" json:"DstIP,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HTTP) Reset()         { *m = HTTP{} }
func (m *HTTP) String() string { return proto.CompactTextString(m) }
func (*HTTP) ProtoMessage()    {}
func (*HTTP) Descriptor() ([]byte, []int) {
	return fileDescriptor_netcap_62f6063ce3cb4a3e, []int{64}
}
func (m *HTTP) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HTTP.Unmarshal(m, b)
}
func (m *HTTP) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HTTP.Marshal(b, m, deterministic)
}
func (dst *HTTP) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HTTP.Merge(dst, src)
}
func (m *HTTP) XXX_Size() int {
	return xxx_messageInfo_HTTP.Size(m)
}
func (m *HTTP) XXX_DiscardUnknown() {
	xxx_messageInfo_HTTP.DiscardUnknown(m)
}

var xxx_messageInfo_HTTP proto.InternalMessageInfo

func (m *HTTP) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *HTTP) GetProto() string {
	if m != nil {
		return m.Proto
	}
	return ""
}

func (m *HTTP) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *HTTP) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *HTTP) GetUserAgent() string {
	if m != nil {
		return m.UserAgent
	}
	return ""
}

func (m *HTTP) GetReferer() string {
	if m != nil {
		return m.Referer
	}
	return ""
}

func (m *HTTP) GetReqCookies() []string {
	if m != nil {
		return m.ReqCookies
	}
	return nil
}

func (m *HTTP) GetReqContentLength() int32 {
	if m != nil {
		return m.ReqContentLength
	}
	return 0
}

func (m *HTTP) GetURL() string {
	if m != nil {
		return m.URL
	}
	return ""
}

func (m *HTTP) GetResContentLength() int32 {
	if m != nil {
		return m.ResContentLength
	}
	return 0
}

func (m *HTTP) GetContentType() string {
	if m != nil {
		return m.ContentType
	}
	return ""
}

func (m *HTTP) GetStatusCode() int32 {
	if m != nil {
		return m.StatusCode
	}
	return 0
}

func (m *HTTP) GetSrcIP() string {
	if m != nil {
		return m.SrcIP
	}
	return ""
}

func (m *HTTP) GetDstIP() string {
	if m != nil {
		return m.DstIP
	}
	return ""
}

type TLSClientHello struct {
	Timestamp        string   `protobuf:"bytes,1,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	Type             int32    `protobuf:"varint,2,opt,name=Type,proto3" json:"Type,omitempty"`
	Version          int32    `protobuf:"varint,3,opt,name=Version,proto3" json:"Version,omitempty"`
	MessageLen       int32    `protobuf:"varint,4,opt,name=MessageLen,proto3" json:"MessageLen,omitempty"`
	HandshakeType    int32    `protobuf:"varint,5,opt,name=HandshakeType,proto3" json:"HandshakeType,omitempty"`
	HandshakeLen     uint32   `protobuf:"varint,6,opt,name=HandshakeLen,proto3" json:"HandshakeLen,omitempty"`
	HandshakeVersion int32    `protobuf:"varint,7,opt,name=HandshakeVersion,proto3" json:"HandshakeVersion,omitempty"`
	Random           []byte   `protobuf:"bytes,8,opt,name=Random,proto3" json:"Random,omitempty"`
	SessionIDLen     uint32   `protobuf:"varint,9,opt,name=SessionIDLen,proto3" json:"SessionIDLen,omitempty"`
	SessionID        []byte   `protobuf:"bytes,10,opt,name=SessionID,proto3" json:"SessionID,omitempty"`
	CipherSuiteLen   int32    `protobuf:"varint,11,opt,name=CipherSuiteLen,proto3" json:"CipherSuiteLen,omitempty"`
	ExtensionLen     int32    `protobuf:"varint,12,opt,name=ExtensionLen,proto3" json:"ExtensionLen,omitempty"`
	SNI              string   `protobuf:"bytes,13,opt,name=SNI,proto3" json:"SNI,omitempty"`
	OSCP             bool     `protobuf:"varint,14,opt,name=OSCP,proto3" json:"OSCP,omitempty"`
	CipherSuites     []int32  `protobuf:"varint,15,rep,packed,name=CipherSuites,proto3" json:"CipherSuites,omitempty"`
	CompressMethods  []int32  `protobuf:"varint,16,rep,packed,name=CompressMethods,proto3" json:"CompressMethods,omitempty"`
	SignatureAlgs    []int32  `protobuf:"varint,17,rep,packed,name=SignatureAlgs,proto3" json:"SignatureAlgs,omitempty"`
	SupportedGroups  []int32  `protobuf:"varint,18,rep,packed,name=SupportedGroups,proto3" json:"SupportedGroups,omitempty"`
	SupportedPoints  []int32  `protobuf:"varint,19,rep,packed,name=SupportedPoints,proto3" json:"SupportedPoints,omitempty"`
	ALPNs            []string `protobuf:"bytes,20,rep,name=ALPNs,proto3" json:"ALPNs,omitempty"`
	// map[Extension]uint16 // [Type]Length Extensions
	Ja3                  string   `protobuf:"bytes,21,opt,name=Ja3,proto3" json:"Ja3,omitempty"`
	SrcIP                string   `protobuf:"bytes,22,opt,name=SrcIP,proto3" json:"SrcIP,omitempty"`
	DstIP                string   `protobuf:"bytes,23,opt,name=DstIP,proto3" json:"DstIP,omitempty"`
	SrcMAC               string   `protobuf:"bytes,24,opt,name=SrcMAC,proto3" json:"SrcMAC,omitempty"`
	DstMAC               string   `protobuf:"bytes,25,opt,name=DstMAC,proto3" json:"DstMAC,omitempty"`
	SrcPort              int32    `protobuf:"varint,26,opt,name=SrcPort,proto3" json:"SrcPort,omitempty"`
	DstPort              int32    `protobuf:"varint,27,opt,name=DstPort,proto3" json:"DstPort,omitempty"`
	Extensions           []int32  `protobuf:"varint,28,rep,packed,name=Extensions,proto3" json:"Extensions,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TLSClientHello) Reset()         { *m = TLSClientHello{} }
func (m *TLSClientHello) String() string { return proto.CompactTextString(m) }
func (*TLSClientHello) ProtoMessage()    {}
func (*TLSClientHello) Descriptor() ([]byte, []int) {
	return fileDescriptor_netcap_62f6063ce3cb4a3e, []int{65}
}
func (m *TLSClientHello) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TLSClientHello.Unmarshal(m, b)
}
func (m *TLSClientHello) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TLSClientHello.Marshal(b, m, deterministic)
}
func (dst *TLSClientHello) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLSClientHello.Merge(dst, src)
}
func (m *TLSClientHello) XXX_Size() int {
	return xxx_messageInfo_TLSClientHello.Size(m)
}
func (m *TLSClientHello) XXX_DiscardUnknown() {
	xxx_messageInfo_TLSClientHello.DiscardUnknown(m)
}

var xxx_messageInfo_TLSClientHello proto.InternalMessageInfo

func (m *TLSClientHello) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *TLSClientHello) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *TLSClientHello) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *TLSClientHello) GetMessageLen() int32 {
	if m != nil {
		return m.MessageLen
	}
	return 0
}

func (m *TLSClientHello) GetHandshakeType() int32 {
	if m != nil {
		return m.HandshakeType
	}
	return 0
}

func (m *TLSClientHello) GetHandshakeLen() uint32 {
	if m != nil {
		return m.HandshakeLen
	}
	return 0
}

func (m *TLSClientHello) GetHandshakeVersion() int32 {
	if m != nil {
		return m.HandshakeVersion
	}
	return 0
}

func (m *TLSClientHello) GetRandom() []byte {
	if m != nil {
		return m.Random
	}
	return nil
}

func (m *TLSClientHello) GetSessionIDLen() uint32 {
	if m != nil {
		return m.SessionIDLen
	}
	return 0
}

func (m *TLSClientHello) GetSessionID() []byte {
	if m != nil {
		return m.SessionID
	}
	return nil
}

func (m *TLSClientHello) GetCipherSuiteLen() int32 {
	if m != nil {
		return m.CipherSuiteLen
	}
	return 0
}

func (m *TLSClientHello) GetExtensionLen() int32 {
	if m != nil {
		return m.ExtensionLen
	}
	return 0
}

func (m *TLSClientHello) GetSNI() string {
	if m != nil {
		return m.SNI
	}
	return ""
}

func (m *TLSClientHello) GetOSCP() bool {
	if m != nil {
		return m.OSCP
	}
	return false
}

func (m *TLSClientHello) GetCipherSuites() []int32 {
	if m != nil {
		return m.CipherSuites
	}
	return nil
}

func (m *TLSClientHello) GetCompressMethods() []int32 {
	if m != nil {
		return m.CompressMethods
	}
	return nil
}

func (m *TLSClientHello) GetSignatureAlgs() []int32 {
	if m != nil {
		return m.SignatureAlgs
	}
	return nil
}

func (m *TLSClientHello) GetSupportedGroups() []int32 {
	if m != nil {
		return m.SupportedGroups
	}
	return nil
}

func (m *TLSClientHello) GetSupportedPoints() []int32 {
	if m != nil {
		return m.SupportedPoints
	}
	return nil
}

func (m *TLSClientHello) GetALPNs() []string {
	if m != nil {
		return m.ALPNs
	}
	return nil
}

func (m *TLSClientHello) GetJa3() string {
	if m != nil {
		return m.Ja3
	}
	return ""
}

func (m *TLSClientHello) GetSrcIP() string {
	if m != nil {
		return m.SrcIP
	}
	return ""
}

func (m *TLSClientHello) GetDstIP() string {
	if m != nil {
		return m.DstIP
	}
	return ""
}

func (m *TLSClientHello) GetSrcMAC() string {
	if m != nil {
		return m.SrcMAC
	}
	return ""
}

func (m *TLSClientHello) GetDstMAC() string {
	if m != nil {
		return m.DstMAC
	}
	return ""
}

func (m *TLSClientHello) GetSrcPort() int32 {
	if m != nil {
		return m.SrcPort
	}
	return 0
}

func (m *TLSClientHello) GetDstPort() int32 {
	if m != nil {
		return m.DstPort
	}
	return 0
}

func (m *TLSClientHello) GetExtensions() []int32 {
	if m != nil {
		return m.Extensions
	}
	return nil
}

type IPSecAH struct {
	Timestamp            string   `protobuf:"bytes,1,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	Reserved             int32    `protobuf:"varint,2,opt,name=Reserved,proto3" json:"Reserved,omitempty"`
	SPI                  int32    `protobuf:"varint,3,opt,name=SPI,proto3" json:"SPI,omitempty"`
	Seq                  int32    `protobuf:"varint,4,opt,name=Seq,proto3" json:"Seq,omitempty"`
	AuthenticationData   []byte   `protobuf:"bytes,5,opt,name=AuthenticationData,proto3" json:"AuthenticationData,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IPSecAH) Reset()         { *m = IPSecAH{} }
func (m *IPSecAH) String() string { return proto.CompactTextString(m) }
func (*IPSecAH) ProtoMessage()    {}
func (*IPSecAH) Descriptor() ([]byte, []int) {
	return fileDescriptor_netcap_62f6063ce3cb4a3e, []int{66}
}
func (m *IPSecAH) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IPSecAH.Unmarshal(m, b)
}
func (m *IPSecAH) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IPSecAH.Marshal(b, m, deterministic)
}
func (dst *IPSecAH) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IPSecAH.Merge(dst, src)
}
func (m *IPSecAH) XXX_Size() int {
	return xxx_messageInfo_IPSecAH.Size(m)
}
func (m *IPSecAH) XXX_DiscardUnknown() {
	xxx_messageInfo_IPSecAH.DiscardUnknown(m)
}

var xxx_messageInfo_IPSecAH proto.InternalMessageInfo

func (m *IPSecAH) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *IPSecAH) GetReserved() int32 {
	if m != nil {
		return m.Reserved
	}
	return 0
}

func (m *IPSecAH) GetSPI() int32 {
	if m != nil {
		return m.SPI
	}
	return 0
}

func (m *IPSecAH) GetSeq() int32 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *IPSecAH) GetAuthenticationData() []byte {
	if m != nil {
		return m.AuthenticationData
	}
	return nil
}

type IPSecESP struct {
	Timestamp            string   `protobuf:"bytes,1,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	SPI                  int32    `protobuf:"varint,2,opt,name=SPI,proto3" json:"SPI,omitempty"`
	Seq                  int32    `protobuf:"varint,3,opt,name=Seq,proto3" json:"Seq,omitempty"`
	LenEncrypted         int32    `protobuf:"varint,4,opt,name=LenEncrypted,proto3" json:"LenEncrypted,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IPSecESP) Reset()         { *m = IPSecESP{} }
func (m *IPSecESP) String() string { return proto.CompactTextString(m) }
func (*IPSecESP) ProtoMessage()    {}
func (*IPSecESP) Descriptor() ([]byte, []int) {
	return fileDescriptor_netcap_62f6063ce3cb4a3e, []int{67}
}
func (m *IPSecESP) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IPSecESP.Unmarshal(m, b)
}
func (m *IPSecESP) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IPSecESP.Marshal(b, m, deterministic)
}
func (dst *IPSecESP) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IPSecESP.Merge(dst, src)
}
func (m *IPSecESP) XXX_Size() int {
	return xxx_messageInfo_IPSecESP.Size(m)
}
func (m *IPSecESP) XXX_DiscardUnknown() {
	xxx_messageInfo_IPSecESP.DiscardUnknown(m)
}

var xxx_messageInfo_IPSecESP proto.InternalMessageInfo

func (m *IPSecESP) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *IPSecESP) GetSPI() int32 {
	if m != nil {
		return m.SPI
	}
	return 0
}

func (m *IPSecESP) GetSeq() int32 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *IPSecESP) GetLenEncrypted() int32 {
	if m != nil {
		return m.LenEncrypted
	}
	return 0
}

type Geneve struct {
	Timestamp            string          `protobuf:"bytes,1,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	Version              int32           `protobuf:"varint,2,opt,name=Version,proto3" json:"Version,omitempty"`
	OptionsLength        int32           `protobuf:"varint,3,opt,name=OptionsLength,proto3" json:"OptionsLength,omitempty"`
	OAMPacket            bool            `protobuf:"varint,4,opt,name=OAMPacket,proto3" json:"OAMPacket,omitempty"`
	CriticalOption       bool            `protobuf:"varint,5,opt,name=CriticalOption,proto3" json:"CriticalOption,omitempty"`
	Protocol             int32           `protobuf:"varint,6,opt,name=Protocol,proto3" json:"Protocol,omitempty"`
	VNI                  uint32          `protobuf:"varint,7,opt,name=VNI,proto3" json:"VNI,omitempty"`
	Options              []*GeneveOption `protobuf:"bytes,8,rep,name=Options,proto3" json:"Options,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Geneve) Reset()         { *m = Geneve{} }
func (m *Geneve) String() string { return proto.CompactTextString(m) }
func (*Geneve) ProtoMessage()    {}
func (*Geneve) Descriptor() ([]byte, []int) {
	return fileDescriptor_netcap_62f6063ce3cb4a3e, []int{68}
}
func (m *Geneve) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Geneve.Unmarshal(m, b)
}
func (m *Geneve) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Geneve.Marshal(b, m, deterministic)
}
func (dst *Geneve) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Geneve.Merge(dst, src)
}
func (m *Geneve) XXX_Size() int {
	return xxx_messageInfo_Geneve.Size(m)
}
func (m *Geneve) XXX_DiscardUnknown() {
	xxx_messageInfo_Geneve.DiscardUnknown(m)
}

var xxx_messageInfo_Geneve proto.InternalMessageInfo

func (m *Geneve) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *Geneve) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Geneve) GetOptionsLength() int32 {
	if m != nil {
		return m.OptionsLength
	}
	return 0
}

func (m *Geneve) GetOAMPacket() bool {
	if m != nil {
		return m.OAMPacket
	}
	return false
}

func (m *Geneve) GetCriticalOption() bool {
	if m != nil {
		return m.CriticalOption
	}
	return false
}

func (m *Geneve) GetProtocol() int32 {
	if m != nil {
		return m.Protocol
	}
	return 0
}

func (m *Geneve) GetVNI() uint32 {
	if m != nil {
		return m.VNI
	}
	return 0
}

func (m *Geneve) GetOptions() []*GeneveOption {
	if m != nil {
		return m.Options
	}
	return nil
}

type GeneveOption struct {
	Class                int32    `protobuf:"varint,1,opt,name=Class,proto3" json:"Class,omitempty"`
	Type                 int32    `protobuf:"varint,2,opt,name=Type,proto3" json:"Type,omitempty"`
	Flags                int32    `protobuf:"varint,3,opt,name=Flags,proto3" json:"Flags,omitempty"`
	Length               int32    `protobuf:"varint,4,opt,name=Length,proto3" json:"Length,omitempty"`
	Data                 []byte   `protobuf:"bytes,5,opt,name=Data,proto3" json:"Data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GeneveOption) Reset()         { *m = GeneveOption{} }
func (m *GeneveOption) String() string { return proto.CompactTextString(m) }
func (*GeneveOption) ProtoMessage()    {}
func (*GeneveOption) Descriptor() ([]byte, []int) {
	return fileDescriptor_netcap_62f6063ce3cb4a3e, []int{69}
}
func (m *GeneveOption) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GeneveOption.Unmarshal(m, b)
}
func (m *GeneveOption) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GeneveOption.Marshal(b, m, deterministic)
}
func (dst *GeneveOption) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GeneveOption.Merge(dst, src)
}
func (m *GeneveOption) XXX_Size() int {
	return xxx_messageInfo_GeneveOption.Size(m)
}
func (m *GeneveOption) XXX_DiscardUnknown() {
	xxx_messageInfo_GeneveOption.DiscardUnknown(m)
}

var xxx_messageInfo_GeneveOption proto.InternalMessageInfo

func (m *GeneveOption) GetClass() int32 {
	if m != nil {
		return m.Class
	}
	return 0
}

func (m *GeneveOption) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *GeneveOption) GetFlags() int32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *GeneveOption) GetLength() int32 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *GeneveOption) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// VXLAN is a VXLAN packet header
type VXLAN struct {
	Timestamp            string   `protobuf:"bytes,1,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	ValidIDFlag          bool     `protobuf:"varint,2,opt,name=ValidIDFlag,proto3" json:"ValidIDFlag,omitempty"`
	VNI                  uint32   `protobuf:"varint,3,opt,name=VNI,proto3" json:"VNI,omitempty"`
	GBPExtension         bool     `protobuf:"varint,4,opt,name=GBPExtension,proto3" json:"GBPExtension,omitempty"`
	GBPDontLearn         bool     `protobuf:"varint,5,opt,name=GBPDontLearn,proto3" json:"GBPDontLearn,omitempty"`
	GBPApplied           bool     `protobuf:"varint,6,opt,name=GBPApplied,proto3" json:"GBPApplied,omitempty"`
	GBPGroupPolicyID     int32    `protobuf:"varint,7,opt,name=GBPGroupPolicyID,proto3" json:"GBPGroupPolicyID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VXLAN) Reset()         { *m = VXLAN{} }
func (m *VXLAN) String() string { return proto.CompactTextString(m) }
func (*VXLAN) ProtoMessage()    {}
func (*VXLAN) Descriptor() ([]byte, []int) {
	return fileDescriptor_netcap_62f6063ce3cb4a3e, []int{70}
}
func (m *VXLAN) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VXLAN.Unmarshal(m, b)
}
func (m *VXLAN) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VXLAN.Marshal(b, m, deterministic)
}
func (dst *VXLAN) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VXLAN.Merge(dst, src)
}
func (m *VXLAN) XXX_Size() int {
	return xxx_messageInfo_VXLAN.Size(m)
}
func (m *VXLAN) XXX_DiscardUnknown() {
	xxx_messageInfo_VXLAN.DiscardUnknown(m)
}

var xxx_messageInfo_VXLAN proto.InternalMessageInfo

func (m *VXLAN) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *VXLAN) GetValidIDFlag() bool {
	if m != nil {
		return m.ValidIDFlag
	}
	return false
}

func (m *VXLAN) GetVNI() uint32 {
	if m != nil {
		return m.VNI
	}
	return 0
}

func (m *VXLAN) GetGBPExtension() bool {
	if m != nil {
		return m.GBPExtension
	}
	return false
}

func (m *VXLAN) GetGBPDontLearn() bool {
	if m != nil {
		return m.GBPDontLearn
	}
	return false
}

func (m *VXLAN) GetGBPApplied() bool {
	if m != nil {
		return m.GBPApplied
	}
	return false
}

func (m *VXLAN) GetGBPGroupPolicyID() int32 {
	if m != nil {
		return m.GBPGroupPolicyID
	}
	return 0
}

type USB struct {
	Timestamp              string   `protobuf:"bytes,1,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	ID                     uint64   `protobuf:"varint,2,opt,name=ID,proto3" json:"ID,omitempty"`
	EventType              int32    `protobuf:"varint,3,opt,name=EventType,proto3" json:"EventType,omitempty"`
	TransferType           int32    `protobuf:"varint,4,opt,name=TransferType,proto3" json:"TransferType,omitempty"`
	Direction              int32    `protobuf:"varint,5,opt,name=Direction,proto3" json:"Direction,omitempty"`
	EndpointNumber         int32    `protobuf:"varint,6,opt,name=EndpointNumber,proto3" json:"EndpointNumber,omitempty"`
	DeviceAddress          int32    `protobuf:"varint,7,opt,name=DeviceAddress,proto3" json:"DeviceAddress,omitempty"`
	BusID                  int32    `protobuf:"varint,8,opt,name=BusID,proto3" json:"BusID,omitempty"`
	TimestampSec           int64    `protobuf:"varint,9,opt,name=TimestampSec,proto3" json:"TimestampSec,omitempty"`
	TimestampUsec          int32    `protobuf:"varint,10,opt,name=TimestampUsec,proto3" json:"TimestampUsec,omitempty"`
	Setup                  bool     `protobuf:"varint,11,opt,name=Setup,proto3" json:"Setup,omitempty"`
	Data                   bool     `protobuf:"varint,12,opt,name=Data,proto3" json:"Data,omitempty"`
	Status                 int32    `protobuf:"varint,13,opt,name=Status,proto3" json:"Status,omitempty"`
	UrbLength              uint32   `protobuf:"varint,14,opt,name=UrbLength,proto3" json:"UrbLength,omitempty"`
	UrbDataLength          uint32   `protobuf:"varint,15,opt,name=UrbDataLength,proto3" json:"UrbDataLength,omitempty"`
	UrbInterval            uint32   `protobuf:"varint,16,opt,name=UrbInterval,proto3" json:"UrbInterval,omitempty"`
	UrbStartFrame          uint32   `protobuf:"varint,17,opt,name=UrbStartFrame,proto3" json:"UrbStartFrame,omitempty"`
	UrbCopyOfTransferFlags uint32   `protobuf:"varint,18,opt,name=UrbCopyOfTransferFlags,proto3" json:"UrbCopyOfTransferFlags,omitempty"`
	IsoNumDesc             uint32   `protobuf:"varint,19,opt,name=IsoNumDesc,proto3" json:"IsoNumDesc,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *USB) Reset()         { *m = USB{} }
func (m *USB) String() string { return proto.CompactTextString(m) }
func (*USB) ProtoMessage()    {}
func (*USB) Descriptor() ([]byte, []int) {
	return fileDescriptor_netcap_62f6063ce3cb4a3e, []int{71}
}
func (m *USB) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_USB.Unmarshal(m, b)
}
func (m *USB) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_USB.Marshal(b, m, deterministic)
}
func (dst *USB) XXX_Merge(src proto.Message) {
	xxx_messageInfo_USB.Merge(dst, src)
}
func (m *USB) XXX_Size() int {
	return xxx_messageInfo_USB.Size(m)
}
func (m *USB) XXX_DiscardUnknown() {
	xxx_messageInfo_USB.DiscardUnknown(m)
}

var xxx_messageInfo_USB proto.InternalMessageInfo

func (m *USB) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *USB) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *USB) GetEventType() int32 {
	if m != nil {
		return m.EventType
	}
	return 0
}

func (m *USB) GetTransferType() int32 {
	if m != nil {
		return m.TransferType
	}
	return 0
}

func (m *USB) GetDirection() int32 {
	if m != nil {
		return m.Direction
	}
	return 0
}

func (m *USB) GetEndpointNumber() int32 {
	if m != nil {
		return m.EndpointNumber
	}
	return 0
}

func (m *USB) GetDeviceAddress() int32 {
	if m != nil {
		return m.DeviceAddress
	}
	return 0
}

func (m *USB) GetBusID() int32 {
	if m != nil {
		return m.BusID
	}
	return 0
}

func (m *USB) GetTimestampSec() int64 {
	if m != nil {
		return m.TimestampSec
	}
	return 0
}

func (m *USB) GetTimestampUsec() int32 {
	if m != nil {
		return m.TimestampUsec
	}
	return 0
}

func (m *USB) GetSetup() bool {
	if m != nil {
		return m.Setup
	}
	return false
}

func (m *USB) GetData() bool {
	if m != nil {
		return m.Data
	}
	return false
}

func (m *USB) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *USB) GetUrbLength() uint32 {
	if m != nil {
		return m.UrbLength
	}
	return 0
}

func (m *USB) GetUrbDataLength() uint32 {
	if m != nil {
		return m.UrbDataLength
	}
	return 0
}

func (m *USB) GetUrbInterval() uint32 {
	if m != nil {
		return m.UrbInterval
	}
	return 0
}

func (m *USB) GetUrbStartFrame() uint32 {
	if m != nil {
		return m.UrbStartFrame
	}
	return 0
}

func (m *USB) GetUrbCopyOfTransferFlags() uint32 {
	if m != nil {
		return m.UrbCopyOfTransferFlags
	}
	return 0
}

func (m *USB) GetIsoNumDesc() uint32 {
	if m != nil {
		return m.IsoNumDesc
	}
	return 0
}

// LCM (Lightweight Communications and Marshalling) is a set of libraries and tools for message passing and data marshalling,
// targeted at real-time systems where high-bandwidth and low latency are critical.
// It provides a publish/subscribe message passing model and automatic marshalling/unmarshalling
// code generation with bindings for applications in a variety of programming languages.
// References
// https://lcm-proj.github.io/
// https://github.com/lcm-proj/lcm
type LCM struct {
	Timestamp            string   `protobuf:"bytes,1,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	Magic                int32    `protobuf:"varint,2,opt,name=Magic,proto3" json:"Magic,omitempty"`
	SequenceNumber       int32    `protobuf:"varint,3,opt,name=SequenceNumber,proto3" json:"SequenceNumber,omitempty"`
	PayloadSize          int32    `protobuf:"varint,4,opt,name=PayloadSize,proto3" json:"PayloadSize,omitempty"`
	FragmentOffset       int32    `protobuf:"varint,5,opt,name=FragmentOffset,proto3" json:"FragmentOffset,omitempty"`
	FragmentNumber       int32    `protobuf:"varint,6,opt,name=FragmentNumber,proto3" json:"FragmentNumber,omitempty"`
	TotalFragments       int32    `protobuf:"varint,7,opt,name=TotalFragments,proto3" json:"TotalFragments,omitempty"`
	ChannelName          string   `protobuf:"bytes,8,opt,name=ChannelName,proto3" json:"ChannelName,omitempty"`
	Fragmented           bool     `protobuf:"varint,9,opt,name=Fragmented,proto3" json:"Fragmented,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LCM) Reset()         { *m = LCM{} }
func (m *LCM) String() string { return proto.CompactTextString(m) }
func (*LCM) ProtoMessage()    {}
func (*LCM) Descriptor() ([]byte, []int) {
	return fileDescriptor_netcap_62f6063ce3cb4a3e, []int{72}
}
func (m *LCM) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LCM.Unmarshal(m, b)
}
func (m *LCM) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LCM.Marshal(b, m, deterministic)
}
func (dst *LCM) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LCM.Merge(dst, src)
}
func (m *LCM) XXX_Size() int {
	return xxx_messageInfo_LCM.Size(m)
}
func (m *LCM) XXX_DiscardUnknown() {
	xxx_messageInfo_LCM.DiscardUnknown(m)
}

var xxx_messageInfo_LCM proto.InternalMessageInfo

func (m *LCM) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *LCM) GetMagic() int32 {
	if m != nil {
		return m.Magic
	}
	return 0
}

func (m *LCM) GetSequenceNumber() int32 {
	if m != nil {
		return m.SequenceNumber
	}
	return 0
}

func (m *LCM) GetPayloadSize() int32 {
	if m != nil {
		return m.PayloadSize
	}
	return 0
}

func (m *LCM) GetFragmentOffset() int32 {
	if m != nil {
		return m.FragmentOffset
	}
	return 0
}

func (m *LCM) GetFragmentNumber() int32 {
	if m != nil {
		return m.FragmentNumber
	}
	return 0
}

func (m *LCM) GetTotalFragments() int32 {
	if m != nil {
		return m.TotalFragments
	}
	return 0
}

func (m *LCM) GetChannelName() string {
	if m != nil {
		return m.ChannelName
	}
	return ""
}

func (m *LCM) GetFragmented() bool {
	if m != nil {
		return m.Fragmented
	}
	return false
}

type MPLS struct {
	Timestamp            string   `protobuf:"bytes,1,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	Label                int32    `protobuf:"varint,2,opt,name=Label,proto3" json:"Label,omitempty"`
	TrafficClass         int32    `protobuf:"varint,3,opt,name=TrafficClass,proto3" json:"TrafficClass,omitempty"`
	StackBottom          bool     `protobuf:"varint,4,opt,name=StackBottom,proto3" json:"StackBottom,omitempty"`
	TTL                  int32    `protobuf:"varint,5,opt,name=TTL,proto3" json:"TTL,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MPLS) Reset()         { *m = MPLS{} }
func (m *MPLS) String() string { return proto.CompactTextString(m) }
func (*MPLS) ProtoMessage()    {}
func (*MPLS) Descriptor() ([]byte, []int) {
	return fileDescriptor_netcap_62f6063ce3cb4a3e, []int{73}
}
func (m *MPLS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MPLS.Unmarshal(m, b)
}
func (m *MPLS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MPLS.Marshal(b, m, deterministic)
}
func (dst *MPLS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MPLS.Merge(dst, src)
}
func (m *MPLS) XXX_Size() int {
	return xxx_messageInfo_MPLS.Size(m)
}
func (m *MPLS) XXX_DiscardUnknown() {
	xxx_messageInfo_MPLS.DiscardUnknown(m)
}

var xxx_messageInfo_MPLS proto.InternalMessageInfo

func (m *MPLS) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *MPLS) GetLabel() int32 {
	if m != nil {
		return m.Label
	}
	return 0
}

func (m *MPLS) GetTrafficClass() int32 {
	if m != nil {
		return m.TrafficClass
	}
	return 0
}

func (m *MPLS) GetStackBottom() bool {
	if m != nil {
		return m.StackBottom
	}
	return false
}

func (m *MPLS) GetTTL() int32 {
	if m != nil {
		return m.TTL
	}
	return 0
}

type ModbusTCP struct {
	Timestamp             string   `protobuf:"bytes,1,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	TransactionIdentifier int32    `protobuf:"varint,2,opt,name=TransactionIdentifier,proto3" json:"TransactionIdentifier,omitempty"`
	ProtocolIdentifier    int32    `protobuf:"varint,3,opt,name=ProtocolIdentifier,proto3" json:"ProtocolIdentifier,omitempty"`
	Length                int32    `protobuf:"varint,4,opt,name=Length,proto3" json:"Length,omitempty"`
	UnitIdentifier        int32    `protobuf:"varint,5,opt,name=UnitIdentifier,proto3" json:"UnitIdentifier,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *ModbusTCP) Reset()         { *m = ModbusTCP{} }
func (m *ModbusTCP) String() string { return proto.CompactTextString(m) }
func (*ModbusTCP) ProtoMessage()    {}
func (*ModbusTCP) Descriptor() ([]byte, []int) {
	return fileDescriptor_netcap_62f6063ce3cb4a3e, []int{74}
}
func (m *ModbusTCP) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ModbusTCP.Unmarshal(m, b)
}
func (m *ModbusTCP) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ModbusTCP.Marshal(b, m, deterministic)
}
func (dst *ModbusTCP) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModbusTCP.Merge(dst, src)
}
func (m *ModbusTCP) XXX_Size() int {
	return xxx_messageInfo_ModbusTCP.Size(m)
}
func (m *ModbusTCP) XXX_DiscardUnknown() {
	xxx_messageInfo_ModbusTCP.DiscardUnknown(m)
}

var xxx_messageInfo_ModbusTCP proto.InternalMessageInfo

func (m *ModbusTCP) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *ModbusTCP) GetTransactionIdentifier() int32 {
	if m != nil {
		return m.TransactionIdentifier
	}
	return 0
}

func (m *ModbusTCP) GetProtocolIdentifier() int32 {
	if m != nil {
		return m.ProtocolIdentifier
	}
	return 0
}

func (m *ModbusTCP) GetLength() int32 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *ModbusTCP) GetUnitIdentifier() int32 {
	if m != nil {
		return m.UnitIdentifier
	}
	return 0
}

type OSPFv2 struct {
	Timestamp            string   `protobuf:"bytes,1,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	Version              int32    `protobuf:"varint,2,opt,name=Version,proto3" json:"Version,omitempty"`
	Type                 int32    `protobuf:"varint,3,opt,name=Type,proto3" json:"Type,omitempty"`
	PacketLength         int32    `protobuf:"varint,4,opt,name=PacketLength,proto3" json:"PacketLength,omitempty"`
	RouterID             uint32   `protobuf:"varint,5,opt,name=RouterID,proto3" json:"RouterID,omitempty"`
	AreaID               uint32   `protobuf:"varint,6,opt,name=AreaID,proto3" json:"AreaID,omitempty"`
	Checksum             int32    `protobuf:"varint,7,opt,name=Checksum,proto3" json:"Checksum,omitempty"`
	AuType               int32    `protobuf:"varint,8,opt,name=AuType,proto3" json:"AuType,omitempty"`
	Authentication       int64    `protobuf:"varint,9,opt,name=Authentication,proto3" json:"Authentication,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OSPFv2) Reset()         { *m = OSPFv2{} }
func (m *OSPFv2) String() string { return proto.CompactTextString(m) }
func (*OSPFv2) ProtoMessage()    {}
func (*OSPFv2) Descriptor() ([]byte, []int) {
	return fileDescriptor_netcap_62f6063ce3cb4a3e, []int{75}
}
func (m *OSPFv2) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OSPFv2.Unmarshal(m, b)
}
func (m *OSPFv2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OSPFv2.Marshal(b, m, deterministic)
}
func (dst *OSPFv2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OSPFv2.Merge(dst, src)
}
func (m *OSPFv2) XXX_Size() int {
	return xxx_messageInfo_OSPFv2.Size(m)
}
func (m *OSPFv2) XXX_DiscardUnknown() {
	xxx_messageInfo_OSPFv2.DiscardUnknown(m)
}

var xxx_messageInfo_OSPFv2 proto.InternalMessageInfo

func (m *OSPFv2) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *OSPFv2) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *OSPFv2) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *OSPFv2) GetPacketLength() int32 {
	if m != nil {
		return m.PacketLength
	}
	return 0
}

func (m *OSPFv2) GetRouterID() uint32 {
	if m != nil {
		return m.RouterID
	}
	return 0
}

func (m *OSPFv2) GetAreaID() uint32 {
	if m != nil {
		return m.AreaID
	}
	return 0
}

func (m *OSPFv2) GetChecksum() int32 {
	if m != nil {
		return m.Checksum
	}
	return 0
}

func (m *OSPFv2) GetAuType() int32 {
	if m != nil {
		return m.AuType
	}
	return 0
}

func (m *OSPFv2) GetAuthentication() int64 {
	if m != nil {
		return m.Authentication
	}
	return 0
}

type OSPFv3 struct {
	Timestamp            string   `protobuf:"bytes,1,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	Version              int32    `protobuf:"varint,2,opt,name=Version,proto3" json:"Version,omitempty"`
	Type                 int32    `protobuf:"varint,3,opt,name=Type,proto3" json:"Type,omitempty"`
	PacketLength         int32    `protobuf:"varint,4,opt,name=PacketLength,proto3" json:"PacketLength,omitempty"`
	RouterID             uint32   `protobuf:"varint,5,opt,name=RouterID,proto3" json:"RouterID,omitempty"`
	AreaID               uint32   `protobuf:"varint,6,opt,name=AreaID,proto3" json:"AreaID,omitempty"`
	Checksum             int32    `protobuf:"varint,7,opt,name=Checksum,proto3" json:"Checksum,omitempty"`
	Instance             int32    `protobuf:"varint,8,opt,name=Instance,proto3" json:"Instance,omitempty"`
	Reserved             int32    `protobuf:"varint,9,opt,name=Reserved,proto3" json:"Reserved,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OSPFv3) Reset()         { *m = OSPFv3{} }
func (m *OSPFv3) String() string { return proto.CompactTextString(m) }
func (*OSPFv3) ProtoMessage()    {}
func (*OSPFv3) Descriptor() ([]byte, []int) {
	return fileDescriptor_netcap_62f6063ce3cb4a3e, []int{76}
}
func (m *OSPFv3) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OSPFv3.Unmarshal(m, b)
}
func (m *OSPFv3) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OSPFv3.Marshal(b, m, deterministic)
}
func (dst *OSPFv3) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OSPFv3.Merge(dst, src)
}
func (m *OSPFv3) XXX_Size() int {
	return xxx_messageInfo_OSPFv3.Size(m)
}
func (m *OSPFv3) XXX_DiscardUnknown() {
	xxx_messageInfo_OSPFv3.DiscardUnknown(m)
}

var xxx_messageInfo_OSPFv3 proto.InternalMessageInfo

func (m *OSPFv3) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *OSPFv3) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *OSPFv3) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *OSPFv3) GetPacketLength() int32 {
	if m != nil {
		return m.PacketLength
	}
	return 0
}

func (m *OSPFv3) GetRouterID() uint32 {
	if m != nil {
		return m.RouterID
	}
	return 0
}

func (m *OSPFv3) GetAreaID() uint32 {
	if m != nil {
		return m.AreaID
	}
	return 0
}

func (m *OSPFv3) GetChecksum() int32 {
	if m != nil {
		return m.Checksum
	}
	return 0
}

func (m *OSPFv3) GetInstance() int32 {
	if m != nil {
		return m.Instance
	}
	return 0
}

func (m *OSPFv3) GetReserved() int32 {
	if m != nil {
		return m.Reserved
	}
	return 0
}

type BFD struct {
	Timestamp                 string         `protobuf:"bytes,1,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	Version                   int32          `protobuf:"varint,2,opt,name=Version,proto3" json:"Version,omitempty"`
	Diagnostic                int32          `protobuf:"varint,3,opt,name=Diagnostic,proto3" json:"Diagnostic,omitempty"`
	State                     int32          `protobuf:"varint,4,opt,name=State,proto3" json:"State,omitempty"`
	Poll                      bool           `protobuf:"varint,5,opt,name=Poll,proto3" json:"Poll,omitempty"`
	Final                     bool           `protobuf:"varint,6,opt,name=Final,proto3" json:"Final,omitempty"`
	ControlPlaneIndependent   bool           `protobuf:"varint,7,opt,name=ControlPlaneIndependent,proto3" json:"ControlPlaneIndependent,omitempty"`
	AuthPresent               bool           `protobuf:"varint,8,opt,name=AuthPresent,proto3" json:"AuthPresent,omitempty"`
	Demand                    bool           `protobuf:"varint,9,opt,name=Demand,proto3" json:"Demand,omitempty"`
	Multipoint                bool           `protobuf:"varint,10,opt,name=Multipoint,proto3" json:"Multipoint,omitempty"`
	DetectMultiplier          int32          `protobuf:"varint,11,opt,name=DetectMultiplier,proto3" json:"DetectMultiplier,omitempty"`
	MyDiscriminator           int32          `protobuf:"varint,12,opt,name=MyDiscriminator,proto3" json:"MyDiscriminator,omitempty"`
	YourDiscriminator         int32          `protobuf:"varint,13,opt,name=YourDiscriminator,proto3" json:"YourDiscriminator,omitempty"`
	DesiredMinTxInterval      int32          `protobuf:"varint,14,opt,name=DesiredMinTxInterval,proto3" json:"DesiredMinTxInterval,omitempty"`
	RequiredMinRxInterval     int32          `protobuf:"varint,15,opt,name=RequiredMinRxInterval,proto3" json:"RequiredMinRxInterval,omitempty"`
	RequiredMinEchoRxInterval int32          `protobuf:"varint,16,opt,name=RequiredMinEchoRxInterval,proto3" json:"RequiredMinEchoRxInterval,omitempty"`
	AuthHeader                *BFDAuthHeader `protobuf:"bytes,17,opt,name=AuthHeader,proto3" json:"AuthHeader,omitempty"`
	XXX_NoUnkeyedLiteral      struct{}       `json:"-"`
	XXX_unrecognized          []byte         `json:"-"`
	XXX_sizecache             int32          `json:"-"`
}

func (m *BFD) Reset()         { *m = BFD{} }
func (m *BFD) String() string { return proto.CompactTextString(m) }
func (*BFD) ProtoMessage()    {}
func (*BFD) Descriptor() ([]byte, []int) {
	return fileDescriptor_netcap_62f6063ce3cb4a3e, []int{77}
}
func (m *BFD) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BFD.Unmarshal(m, b)
}
func (m *BFD) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BFD.Marshal(b, m, deterministic)
}
func (dst *BFD) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BFD.Merge(dst, src)
}
func (m *BFD) XXX_Size() int {
	return xxx_messageInfo_BFD.Size(m)
}
func (m *BFD) XXX_DiscardUnknown() {
	xxx_messageInfo_BFD.DiscardUnknown(m)
}

var xxx_messageInfo_BFD proto.InternalMessageInfo

func (m *BFD) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *BFD) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *BFD) GetDiagnostic() int32 {
	if m != nil {
		return m.Diagnostic
	}
	return 0
}

func (m *BFD) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *BFD) GetPoll() bool {
	if m != nil {
		return m.Poll
	}
	return false
}

func (m *BFD) GetFinal() bool {
	if m != nil {
		return m.Final
	}
	return false
}

func (m *BFD) GetControlPlaneIndependent() bool {
	if m != nil {
		return m.ControlPlaneIndependent
	}
	return false
}

func (m *BFD) GetAuthPresent() bool {
	if m != nil {
		return m.AuthPresent
	}
	return false
}

func (m *BFD) GetDemand() bool {
	if m != nil {
		return m.Demand
	}
	return false
}

func (m *BFD) GetMultipoint() bool {
	if m != nil {
		return m.Multipoint
	}
	return false
}

func (m *BFD) GetDetectMultiplier() int32 {
	if m != nil {
		return m.DetectMultiplier
	}
	return 0
}

func (m *BFD) GetMyDiscriminator() int32 {
	if m != nil {
		return m.MyDiscriminator
	}
	return 0
}

func (m *BFD) GetYourDiscriminator() int32 {
	if m != nil {
		return m.YourDiscriminator
	}
	return 0
}

func (m *BFD) GetDesiredMinTxInterval() int32 {
	if m != nil {
		return m.DesiredMinTxInterval
	}
	return 0
}

func (m *BFD) GetRequiredMinRxInterval() int32 {
	if m != nil {
		return m.RequiredMinRxInterval
	}
	return 0
}

func (m *BFD) GetRequiredMinEchoRxInterval() int32 {
	if m != nil {
		return m.RequiredMinEchoRxInterval
	}
	return 0
}

func (m *BFD) GetAuthHeader() *BFDAuthHeader {
	if m != nil {
		return m.AuthHeader
	}
	return nil
}

type BFDAuthHeader struct {
	AuthType             int32    `protobuf:"varint,1,opt,name=AuthType,proto3" json:"AuthType,omitempty"`
	KeyID                int32    `protobuf:"varint,2,opt,name=KeyID,proto3" json:"KeyID,omitempty"`
	SequenceNumber       int32    `protobuf:"varint,3,opt,name=SequenceNumber,proto3" json:"SequenceNumber,omitempty"`
	Data                 []byte   `protobuf:"bytes,4,opt,name=Data,proto3" json:"Data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BFDAuthHeader) Reset()         { *m = BFDAuthHeader{} }
func (m *BFDAuthHeader) String() string { return proto.CompactTextString(m) }
func (*BFDAuthHeader) ProtoMessage()    {}
func (*BFDAuthHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_netcap_62f6063ce3cb4a3e, []int{78}
}
func (m *BFDAuthHeader) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BFDAuthHeader.Unmarshal(m, b)
}
func (m *BFDAuthHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BFDAuthHeader.Marshal(b, m, deterministic)
}
func (dst *BFDAuthHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BFDAuthHeader.Merge(dst, src)
}
func (m *BFDAuthHeader) XXX_Size() int {
	return xxx_messageInfo_BFDAuthHeader.Size(m)
}
func (m *BFDAuthHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_BFDAuthHeader.DiscardUnknown(m)
}

var xxx_messageInfo_BFDAuthHeader proto.InternalMessageInfo

func (m *BFDAuthHeader) GetAuthType() int32 {
	if m != nil {
		return m.AuthType
	}
	return 0
}

func (m *BFDAuthHeader) GetKeyID() int32 {
	if m != nil {
		return m.KeyID
	}
	return 0
}

func (m *BFDAuthHeader) GetSequenceNumber() int32 {
	if m != nil {
		return m.SequenceNumber
	}
	return 0
}

func (m *BFDAuthHeader) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type GRE struct {
	Timestamp            string      `protobuf:"bytes,1,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	ChecksumPresent      bool        `protobuf:"varint,2,opt,name=ChecksumPresent,proto3" json:"ChecksumPresent,omitempty"`
	RoutingPresent       bool        `protobuf:"varint,3,opt,name=RoutingPresent,proto3" json:"RoutingPresent,omitempty"`
	KeyPresent           bool        `protobuf:"varint,4,opt,name=KeyPresent,proto3" json:"KeyPresent,omitempty"`
	SeqPresent           bool        `protobuf:"varint,5,opt,name=SeqPresent,proto3" json:"SeqPresent,omitempty"`
	StrictSourceRoute    bool        `protobuf:"varint,6,opt,name=StrictSourceRoute,proto3" json:"StrictSourceRoute,omitempty"`
	AckPresent           bool        `protobuf:"varint,7,opt,name=AckPresent,proto3" json:"AckPresent,omitempty"`
	RecursionControl     int32       `protobuf:"varint,8,opt,name=RecursionControl,proto3" json:"RecursionControl,omitempty"`
	Flags                int32       `protobuf:"varint,9,opt,name=Flags,proto3" json:"Flags,omitempty"`
	Version              int32       `protobuf:"varint,10,opt,name=Version,proto3" json:"Version,omitempty"`
	Protocol             int32       `protobuf:"varint,11,opt,name=Protocol,proto3" json:"Protocol,omitempty"`
	Checksum             int32       `protobuf:"varint,12,opt,name=Checksum,proto3" json:"Checksum,omitempty"`
	Offset               int32       `protobuf:"varint,13,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Key                  uint32      `protobuf:"varint,14,opt,name=Key,proto3" json:"Key,omitempty"`
	Seq                  uint32      `protobuf:"varint,15,opt,name=Seq,proto3" json:"Seq,omitempty"`
	Ack                  uint32      `protobuf:"varint,16,opt,name=Ack,proto3" json:"Ack,omitempty"`
	Routing              *GRERouting `protobuf:"bytes,17,opt,name=Routing,proto3" json:"Routing,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *GRE) Reset()         { *m = GRE{} }
func (m *GRE) String() string { return proto.CompactTextString(m) }
func (*GRE) ProtoMessage()    {}
func (*GRE) Descriptor() ([]byte, []int) {
	return fileDescriptor_netcap_62f6063ce3cb4a3e, []int{79}
}
func (m *GRE) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GRE.Unmarshal(m, b)
}
func (m *GRE) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GRE.Marshal(b, m, deterministic)
}
func (dst *GRE) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GRE.Merge(dst, src)
}
func (m *GRE) XXX_Size() int {
	return xxx_messageInfo_GRE.Size(m)
}
func (m *GRE) XXX_DiscardUnknown() {
	xxx_messageInfo_GRE.DiscardUnknown(m)
}

var xxx_messageInfo_GRE proto.InternalMessageInfo

func (m *GRE) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *GRE) GetChecksumPresent() bool {
	if m != nil {
		return m.ChecksumPresent
	}
	return false
}

func (m *GRE) GetRoutingPresent() bool {
	if m != nil {
		return m.RoutingPresent
	}
	return false
}

func (m *GRE) GetKeyPresent() bool {
	if m != nil {
		return m.KeyPresent
	}
	return false
}

func (m *GRE) GetSeqPresent() bool {
	if m != nil {
		return m.SeqPresent
	}
	return false
}

func (m *GRE) GetStrictSourceRoute() bool {
	if m != nil {
		return m.StrictSourceRoute
	}
	return false
}

func (m *GRE) GetAckPresent() bool {
	if m != nil {
		return m.AckPresent
	}
	return false
}

func (m *GRE) GetRecursionControl() int32 {
	if m != nil {
		return m.RecursionControl
	}
	return 0
}

func (m *GRE) GetFlags() int32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *GRE) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *GRE) GetProtocol() int32 {
	if m != nil {
		return m.Protocol
	}
	return 0
}

func (m *GRE) GetChecksum() int32 {
	if m != nil {
		return m.Checksum
	}
	return 0
}

func (m *GRE) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *GRE) GetKey() uint32 {
	if m != nil {
		return m.Key
	}
	return 0
}

func (m *GRE) GetSeq() uint32 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *GRE) GetAck() uint32 {
	if m != nil {
		return m.Ack
	}
	return 0
}

func (m *GRE) GetRouting() *GRERouting {
	if m != nil {
		return m.Routing
	}
	return nil
}

type GRERouting struct {
	AddressFamily        int32       `protobuf:"varint,1,opt,name=AddressFamily,proto3" json:"AddressFamily,omitempty"`
	SREOffset            int32       `protobuf:"varint,2,opt,name=SREOffset,proto3" json:"SREOffset,omitempty"`
	SRELength            int32       `protobuf:"varint,3,opt,name=SRELength,proto3" json:"SRELength,omitempty"`
	RoutingInformation   []byte      `protobuf:"bytes,4,opt,name=RoutingInformation,proto3" json:"RoutingInformation,omitempty"`
	Next                 *GRERouting `protobuf:"bytes,5,opt,name=Next,proto3" json:"Next,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *GRERouting) Reset()         { *m = GRERouting{} }
func (m *GRERouting) String() string { return proto.CompactTextString(m) }
func (*GRERouting) ProtoMessage()    {}
func (*GRERouting) Descriptor() ([]byte, []int) {
	return fileDescriptor_netcap_62f6063ce3cb4a3e, []int{80}
}
func (m *GRERouting) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GRERouting.Unmarshal(m, b)
}
func (m *GRERouting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GRERouting.Marshal(b, m, deterministic)
}
func (dst *GRERouting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GRERouting.Merge(dst, src)
}
func (m *GRERouting) XXX_Size() int {
	return xxx_messageInfo_GRERouting.Size(m)
}
func (m *GRERouting) XXX_DiscardUnknown() {
	xxx_messageInfo_GRERouting.DiscardUnknown(m)
}

var xxx_messageInfo_GRERouting proto.InternalMessageInfo

func (m *GRERouting) GetAddressFamily() int32 {
	if m != nil {
		return m.AddressFamily
	}
	return 0
}

func (m *GRERouting) GetSREOffset() int32 {
	if m != nil {
		return m.SREOffset
	}
	return 0
}

func (m *GRERouting) GetSRELength() int32 {
	if m != nil {
		return m.SRELength
	}
	return 0
}

func (m *GRERouting) GetRoutingInformation() []byte {
	if m != nil {
		return m.RoutingInformation
	}
	return nil
}

func (m *GRERouting) GetNext() *GRERouting {
	if m != nil {
		return m.Next
	}
	return nil
}

type FDDI struct {
	Timestamp            string   `protobuf:"bytes,1,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	FrameControl         int32    `protobuf:"varint,2,opt,name=FrameControl,proto3" json:"FrameControl,omitempty"`
	Priority             int32    `protobuf:"varint,3,opt,name=Priority,proto3" json:"Priority,omitempty"`
	SrcMAC               string   `protobuf:"bytes,4,opt,name=SrcMAC,proto3" json:"SrcMAC,omitempty"`
	DstMAC               string   `protobuf:"bytes,5,opt,name=DstMAC,proto3" json:"DstMAC,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FDDI) Reset()         { *m = FDDI{} }
func (m *FDDI) String() string { return proto.CompactTextString(m) }
func (*FDDI) ProtoMessage()    {}
func (*FDDI) Descriptor() ([]byte, []int) {
	return fileDescriptor_netcap_62f6063ce3cb4a3e, []int{81}
}
func (m *FDDI) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FDDI.Unmarshal(m, b)
}
func (m *FDDI) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FDDI.Marshal(b, m, deterministic)
}
func (dst *FDDI) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FDDI.Merge(dst, src)
}
func (m *FDDI) XXX_Size() int {
	return xxx_messageInfo_FDDI.Size(m)
}
func (m *FDDI) XXX_DiscardUnknown() {
	xxx_messageInfo_FDDI.DiscardUnknown(m)
}

var xxx_messageInfo_FDDI proto.InternalMessageInfo

func (m *FDDI) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *FDDI) GetFrameControl() int32 {
	if m != nil {
		return m.FrameControl
	}
	return 0
}

func (m *FDDI) GetPriority() int32 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func (m *FDDI) GetSrcMAC() string {
	if m != nil {
		return m.SrcMAC
	}
	return ""
}

func (m *FDDI) GetDstMAC() string {
	if m != nil {
		return m.DstMAC
	}
	return ""
}

type EAP struct {
	Timestamp            string   `protobuf:"bytes,1,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	Code                 int32    `protobuf:"varint,2,opt,name=Code,proto3" json:"Code,omitempty"`
	Id                   int32    `protobuf:"varint,3,opt,name=Id,proto3" json:"Id,omitempty"`
	Length               int32    `protobuf:"varint,4,opt,name=Length,proto3" json:"Length,omitempty"`
	Type                 int32    `protobuf:"varint,5,opt,name=Type,proto3" json:"Type,omitempty"`
	TypeData             []byte   `protobuf:"bytes,6,opt,name=TypeData,proto3" json:"TypeData,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EAP) Reset()         { *m = EAP{} }
func (m *EAP) String() string { return proto.CompactTextString(m) }
func (*EAP) ProtoMessage()    {}
func (*EAP) Descriptor() ([]byte, []int) {
	return fileDescriptor_netcap_62f6063ce3cb4a3e, []int{82}
}
func (m *EAP) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EAP.Unmarshal(m, b)
}
func (m *EAP) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EAP.Marshal(b, m, deterministic)
}
func (dst *EAP) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EAP.Merge(dst, src)
}
func (m *EAP) XXX_Size() int {
	return xxx_messageInfo_EAP.Size(m)
}
func (m *EAP) XXX_DiscardUnknown() {
	xxx_messageInfo_EAP.DiscardUnknown(m)
}

var xxx_messageInfo_EAP proto.InternalMessageInfo

func (m *EAP) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *EAP) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *EAP) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *EAP) GetLength() int32 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *EAP) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *EAP) GetTypeData() []byte {
	if m != nil {
		return m.TypeData
	}
	return nil
}

type VRRPv2 struct {
	Timestamp            string   `protobuf:"bytes,1,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	Version              int32    `protobuf:"varint,2,opt,name=Version,proto3" json:"Version,omitempty"`
	Type                 int32    `protobuf:"varint,3,opt,name=Type,proto3" json:"Type,omitempty"`
	VirtualRtrID         int32    `protobuf:"varint,4,opt,name=VirtualRtrID,proto3" json:"VirtualRtrID,omitempty"`
	Priority             int32    `protobuf:"varint,5,opt,name=Priority,proto3" json:"Priority,omitempty"`
	CountIPAddr          int32    `protobuf:"varint,6,opt,name=CountIPAddr,proto3" json:"CountIPAddr,omitempty"`
	AuthType             int32    `protobuf:"varint,7,opt,name=AuthType,proto3" json:"AuthType,omitempty"`
	AdverInt             int32    `protobuf:"varint,8,opt,name=AdverInt,proto3" json:"AdverInt,omitempty"`
	Checksum             int32    `protobuf:"varint,9,opt,name=Checksum,proto3" json:"Checksum,omitempty"`
	IPAddress            []string `protobuf:"bytes,10,rep,name=IPAddress,proto3" json:"IPAddress,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VRRPv2) Reset()         { *m = VRRPv2{} }
func (m *VRRPv2) String() string { return proto.CompactTextString(m) }
func (*VRRPv2) ProtoMessage()    {}
func (*VRRPv2) Descriptor() ([]byte, []int) {
	return fileDescriptor_netcap_62f6063ce3cb4a3e, []int{83}
}
func (m *VRRPv2) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VRRPv2.Unmarshal(m, b)
}
func (m *VRRPv2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VRRPv2.Marshal(b, m, deterministic)
}
func (dst *VRRPv2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VRRPv2.Merge(dst, src)
}
func (m *VRRPv2) XXX_Size() int {
	return xxx_messageInfo_VRRPv2.Size(m)
}
func (m *VRRPv2) XXX_DiscardUnknown() {
	xxx_messageInfo_VRRPv2.DiscardUnknown(m)
}

var xxx_messageInfo_VRRPv2 proto.InternalMessageInfo

func (m *VRRPv2) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *VRRPv2) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *VRRPv2) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *VRRPv2) GetVirtualRtrID() int32 {
	if m != nil {
		return m.VirtualRtrID
	}
	return 0
}

func (m *VRRPv2) GetPriority() int32 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func (m *VRRPv2) GetCountIPAddr() int32 {
	if m != nil {
		return m.CountIPAddr
	}
	return 0
}

func (m *VRRPv2) GetAuthType() int32 {
	if m != nil {
		return m.AuthType
	}
	return 0
}

func (m *VRRPv2) GetAdverInt() int32 {
	if m != nil {
		return m.AdverInt
	}
	return 0
}

func (m *VRRPv2) GetChecksum() int32 {
	if m != nil {
		return m.Checksum
	}
	return 0
}

func (m *VRRPv2) GetIPAddress() []string {
	if m != nil {
		return m.IPAddress
	}
	return nil
}

func init() {
	proto.RegisterType((*Header)(nil), "types.Header")
	proto.RegisterType((*Batch)(nil), "types.Batch")
	proto.RegisterType((*Flow)(nil), "types.Flow")
	proto.RegisterType((*Connection)(nil), "types.Connection")
	proto.RegisterType((*LinkFlow)(nil), "types.LinkFlow")
	proto.RegisterType((*NetworkFlow)(nil), "types.NetworkFlow")
	proto.RegisterType((*TransportFlow)(nil), "types.TransportFlow")
	proto.RegisterType((*Ethernet)(nil), "types.Ethernet")
	proto.RegisterType((*ARP)(nil), "types.ARP")
	proto.RegisterType((*Dot1Q)(nil), "types.Dot1Q")
	proto.RegisterType((*Dot11)(nil), "types.Dot11")
	proto.RegisterType((*Dot11QOS)(nil), "types.Dot11QOS")
	proto.RegisterType((*Dot11HTControl)(nil), "types.Dot11HTControl")
	proto.RegisterType((*Dot11HTControlVHT)(nil), "types.Dot11HTControlVHT")
	proto.RegisterType((*Dot11HTControlHT)(nil), "types.Dot11HTControlHT")
	proto.RegisterType((*Dot11HTControlMFB)(nil), "types.Dot11HTControlMFB")
	proto.RegisterType((*Dot11LinkAdapationControl)(nil), "types.Dot11LinkAdapationControl")
	proto.RegisterType((*Dot11ASEL)(nil), "types.Dot11ASEL")
	proto.RegisterType((*LinkLayerDiscovery)(nil), "types.LinkLayerDiscovery")
	proto.RegisterType((*LLDPChassisID)(nil), "types.LLDPChassisID")
	proto.RegisterType((*LLDPPortID)(nil), "types.LLDPPortID")
	proto.RegisterType((*LinkLayerDiscoveryValue)(nil), "types.LinkLayerDiscoveryValue")
	proto.RegisterType((*EthernetCTP)(nil), "types.EthernetCTP")
	proto.RegisterType((*EthernetCTPReply)(nil), "types.EthernetCTPReply")
	proto.RegisterType((*LinkLayerDiscoveryInfo)(nil), "types.LinkLayerDiscoveryInfo")
	proto.RegisterType((*LLDPSysCapabilities)(nil), "types.LLDPSysCapabilities")
	proto.RegisterType((*LLDPCapabilities)(nil), "types.LLDPCapabilities")
	proto.RegisterType((*LLDPMgmtAddress)(nil), "types.LLDPMgmtAddress")
	proto.RegisterType((*LLDPOrgSpecificTLV)(nil), "types.LLDPOrgSpecificTLV")
	proto.RegisterType((*IPv4)(nil), "types.IPv4")
	proto.RegisterType((*IPv4Option)(nil), "types.IPv4Option")
	proto.RegisterType((*IPv6)(nil), "types.IPv6")
	proto.RegisterType((*IPv6Fragment)(nil), "types.IPv6Fragment")
	proto.RegisterType((*ICMPv4)(nil), "types.ICMPv4")
	proto.RegisterType((*ICMPv6)(nil), "types.ICMPv6")
	proto.RegisterType((*ICMPv6NeighborAdvertisement)(nil), "types.ICMPv6NeighborAdvertisement")
	proto.RegisterType((*ICMPv6RouterAdvertisement)(nil), "types.ICMPv6RouterAdvertisement")
	proto.RegisterType((*ICMPv6Option)(nil), "types.ICMPv6Option")
	proto.RegisterType((*UDP)(nil), "types.UDP")
	proto.RegisterType((*TCP)(nil), "types.TCP")
	proto.RegisterType((*TCPOption)(nil), "types.TCPOption")
	proto.RegisterType((*SCTP)(nil), "types.SCTP")
	proto.RegisterType((*DNS)(nil), "types.DNS")
	proto.RegisterType((*DNSResourceRecord)(nil), "types.DNSResourceRecord")
	proto.RegisterType((*DNSSOA)(nil), "types.DNSSOA")
	proto.RegisterType((*DNSSRV)(nil), "types.DNSSRV")
	proto.RegisterType((*DNSMX)(nil), "types.DNSMX")
	proto.RegisterType((*DNSQuestion)(nil), "types.DNSQuestion")
	proto.RegisterType((*DHCPv4)(nil), "types.DHCPv4")
	proto.RegisterType((*DHCPOption)(nil), "types.DHCPOption")
	proto.RegisterType((*DHCPv6)(nil), "types.DHCPv6")
	proto.RegisterType((*DHCPv6Option)(nil), "types.DHCPv6Option")
	proto.RegisterType((*LLC)(nil), "types.LLC")
	proto.RegisterType((*NTP)(nil), "types.NTP")
	proto.RegisterType((*SIP)(nil), "types.SIP")
	proto.RegisterType((*IGMP)(nil), "types.IGMP")
	proto.RegisterType((*IGMPv3GroupRecord)(nil), "types.IGMPv3GroupRecord")
	proto.RegisterType((*IPv6HopByHop)(nil), "types.IPv6HopByHop")
	proto.RegisterType((*IPv6HopByHopOption)(nil), "types.IPv6HopByHopOption")
	proto.RegisterType((*IPv6HopByHopOptionAlignment)(nil), "types.IPv6HopByHopOptionAlignment")
	proto.RegisterType((*SNAP)(nil), "types.SNAP")
	proto.RegisterType((*ICMPv6Echo)(nil), "types.ICMPv6Echo")
	proto.RegisterType((*ICMPv6NeighborSolicitation)(nil), "types.ICMPv6NeighborSolicitation")
	proto.RegisterType((*ICMPv6RouterSolicitation)(nil), "types.ICMPv6RouterSolicitation")
	proto.RegisterType((*HTTP)(nil), "types.HTTP")
	proto.RegisterType((*TLSClientHello)(nil), "types.TLSClientHello")
	proto.RegisterType((*IPSecAH)(nil), "types.IPSecAH")
	proto.RegisterType((*IPSecESP)(nil), "types.IPSecESP")
	proto.RegisterType((*Geneve)(nil), "types.Geneve")
	proto.RegisterType((*GeneveOption)(nil), "types.GeneveOption")
	proto.RegisterType((*VXLAN)(nil), "types.VXLAN")
	proto.RegisterType((*USB)(nil), "types.USB")
	proto.RegisterType((*LCM)(nil), "types.LCM")
	proto.RegisterType((*MPLS)(nil), "types.MPLS")
	proto.RegisterType((*ModbusTCP)(nil), "types.ModbusTCP")
	proto.RegisterType((*OSPFv2)(nil), "types.OSPFv2")
	proto.RegisterType((*OSPFv3)(nil), "types.OSPFv3")
	proto.RegisterType((*BFD)(nil), "types.BFD")
	proto.RegisterType((*BFDAuthHeader)(nil), "types.BFDAuthHeader")
	proto.RegisterType((*GRE)(nil), "types.GRE")
	proto.RegisterType((*GRERouting)(nil), "types.GRERouting")
	proto.RegisterType((*FDDI)(nil), "types.FDDI")
	proto.RegisterType((*EAP)(nil), "types.EAP")
	proto.RegisterType((*VRRPv2)(nil), "types.VRRPv2")
	proto.RegisterEnum("types.Type", Type_name, Type_value)
}

func init() { proto.RegisterFile("netcap.proto", fileDescriptor_netcap_62f6063ce3cb4a3e) }

var fileDescriptor_netcap_62f6063ce3cb4a3e = []byte{
	// 6643 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x7c, 0x4d, 0x8c, 0x1b, 0xc9,
	0x75, 0xff, 0x9f, 0x9f, 0x43, 0xd6, 0x90, 0xa3, 0x56, 0x4b, 0x2b, 0x51, 0x5a, 0x59, 0x2b, 0xf7,
	0x7f, 0xbd, 0x96, 0x65, 0xef, 0xda, 0x3b, 0x5a, 0xcb, 0xeb, 0x8f, 0xff, 0x07, 0x87, 0x9c, 0x0f,
	0x7a, 0x49, 0x4e, 0xab, 0x9a, 0x33, 0x2b, 0x3b, 0x40, 0x84, 0x1e, 0xb2, 0x66, 0xa6, 0x21, 0x4e,
	0x37, 0xb7, 0xbb, 0x29, 0x69, 0x16, 0x08, 0xe2, 0x43, 0x9c, 0xc4, 0x46, 0x00, 0x27, 0x76, 0x90,
	0x5c, 0x92, 0x00, 0x41, 0x80, 0x20, 0x48, 0x90, 0xdc, 0x73, 0xc8, 0x31, 0xf1, 0x31, 0x87, 0x20,
	0x27, 0x03, 0x01, 0x72, 0x0a, 0x12, 0x20, 0xe7, 0x1c, 0x02, 0x24, 0xc1, 0x7b, 0xf5, 0xaa, 0xbb,
	0xba, 0xc9, 0x59, 0x6a, 0x15, 0xaf, 0x81, 0x20, 0xb9, 0xd5, 0xfb, 0x55, 0x75, 0xb1, 0xea, 0xd5,
	0xab, 0xf7, 0x5e, 0xbd, 0x7a, 0x45, 0xd6, 0xf0, 0x45, 0x3c, 0x76, 0x67, 0x6f, 0xcd, 0xc2, 0x20,
	0x0e, 0xcc, 0x4a, 0x7c, 0x3e, 0x13, 0x91, 0xf5, 0x8b, 0xac, 0xba, 0x27, 0xdc, 0x89, 0x08, 0xcd,
	0x16, 0x5b, 0xeb, 0x84, 0xc2, 0x8d, 0xc5, 0xa4, 0x55, 0xb8, 0x53, 0xb8, 0x5b, 0xe7, 0x8a, 0x34,
	0xef, 0xb0, 0xf5, 0x9e, 0x3f, 0x9b, 0xc7, 0x4e, 0x30, 0x0f, 0xc7, 0xa2, 0x55, 0xc4, 0x5a, 0x1d,
	0x32, 0x5f, 0x63, 0xe5, 0xd1, 0xf9, 0x4c, 0xb4, 0x4a, 0x77, 0x0a, 0x77, 0x37, 0x36, 0xd7, 0xdf,
	0xc2, 0xbe, 0xdf, 0x02, 0x88, 0x63, 0x05, 0x74, 0x7e, 0x28, 0xc2, 0xc8, 0x0b, 0xfc, 0x56, 0x59,
	0x76, 0x4e, 0xa4, 0xf5, 0x21, 0xab, 0x6c, 0xb9, 0xf1, 0xf8, 0xd4, 0xbc, 0xc9, 0x6a, 0x9d, 0xa9,
	0x27, 0xfc, 0xb8, 0xd7, 0xa5, 0x01, 0x24, 0xb4, 0xf9, 0x26, 0x5b, 0x1f, 0x88, 0x28, 0x72, 0x4f,
	0x04, 0xfe, 0x4c, 0x71, 0xf1, 0x67, 0xf4, 0x7a, 0xd3, 0x64, 0x65, 0xc7, 0xfb, 0x50, 0x0e, 0xa7,
	0xc2, 0xb1, 0x0c, 0x58, 0xd7, 0x8d, 0x5d, 0xfc, 0xf9, 0x06, 0xc7, 0xb2, 0xf5, 0x4b, 0x65, 0x56,
	0xde, 0x99, 0x06, 0xcf, 0xcc, 0x37, 0xd8, 0xc6, 0xc8, 0x3b, 0x13, 0x51, 0xec, 0x9e, 0xcd, 0x76,
	0xbc, 0x30, 0x8a, 0x69, 0x04, 0x39, 0xd4, 0xbc, 0xc5, 0xea, 0x7d, 0xcf, 0x7f, 0x62, 0x03, 0x07,
	0x89, 0x0f, 0x29, 0x60, 0x5a, 0xac, 0x31, 0x14, 0xf1, 0xb3, 0x20, 0xa4, 0x06, 0x25, 0x6c, 0x90,
	0xc1, 0xf0, 0x97, 0x42, 0xd7, 0x8f, 0x66, 0x41, 0x18, 0xcb, 0x56, 0x65, 0xfa, 0xa5, 0x0c, 0x6a,
	0xde, 0x63, 0x46, 0x7b, 0x36, 0x9b, 0x7a, 0x63, 0x37, 0xf6, 0x02, 0x5f, 0xb6, 0xac, 0x60, 0xcb,
	0x05, 0xdc, 0xbc, 0xc6, 0xaa, 0x4e, 0x38, 0x1e, 0xb4, 0x3b, 0xad, 0x2a, 0xb6, 0x20, 0x0a, 0xf0,
	0x6e, 0x14, 0x03, 0xbe, 0x26, 0x71, 0x49, 0x99, 0x57, 0x59, 0xc5, 0x09, 0xc7, 0x3d, 0xbb, 0x55,
	0x43, 0x58, 0x12, 0xb0, 0x44, 0x4e, 0x38, 0xb6, 0x83, 0x30, 0x6e, 0xd5, 0xe5, 0x12, 0x11, 0x09,
	0xed, 0xbb, 0x51, 0xdc, 0xb3, 0x5b, 0x4c, 0xb6, 0x47, 0x02, 0xda, 0x77, 0xa3, 0x18, 0xdb, 0xaf,
	0xcb, 0xf6, 0x44, 0x26, 0xec, 0x6f, 0x68, 0xec, 0x7f, 0x83, 0x6d, 0xb4, 0x67, 0x33, 0xdb, 0x3d,
	0x9f, 0x06, 0xee, 0x04, 0x6b, 0x9b, 0x58, 0x9b, 0x43, 0xcd, 0xdb, 0x8c, 0x0d, 0xe7, 0x67, 0xb6,
	0x3b, 0x7e, 0x22, 0xe2, 0xa8, 0xb5, 0x81, 0x6d, 0x34, 0xc4, 0x34, 0x58, 0xe9, 0xa0, 0xd7, 0x6d,
	0x5d, 0xc2, 0x5f, 0x84, 0xa2, 0xf9, 0x3a, 0x6b, 0x26, 0xab, 0xd4, 0x77, 0xa3, 0xb8, 0x65, 0x60,
	0x5d, 0x16, 0x04, 0xe9, 0xea, 0xce, 0x43, 0x64, 0x5a, 0xeb, 0xf2, 0x9d, 0xc2, 0xdd, 0x12, 0x4f,
	0x68, 0xeb, 0xfb, 0x65, 0xc6, 0x3a, 0x81, 0xef, 0x8b, 0x31, 0x90, 0xff, 0x23, 0x0c, 0xff, 0xad,
	0x85, 0xe1, 0x3b, 0x45, 0x56, 0x83, 0x55, 0xfc, 0x58, 0x7a, 0x61, 0xe1, 0x67, 0x8b, 0xcb, 0x7e,
	0xf6, 0x2a, 0xab, 0xe8, 0xb2, 0x50, 0xc9, 0x2f, 0x58, 0xf9, 0x82, 0x05, 0xab, 0x64, 0x16, 0x4c,
	0x31, 0xb4, 0x8a, 0x03, 0x2f, 0x2f, 0x61, 0xd4, 0x1a, 0xd6, 0x2c, 0x61, 0x14, 0x2c, 0x71, 0x59,
	0x32, 0x4a, 0x67, 0x41, 0x3d, 0xc7, 0x82, 0x7f, 0x2f, 0xb0, 0x75, 0x92, 0xd3, 0x9f, 0x19, 0x17,
	0x12, 0x31, 0x2c, 0xeb, 0x62, 0x98, 0x08, 0x5b, 0x45, 0x17, 0xb6, 0x4f, 0x9e, 0x03, 0xdf, 0x2b,
	0xb2, 0x66, 0xb2, 0x07, 0x7f, 0x66, 0x3c, 0xd0, 0x36, 0x5d, 0x19, 0x65, 0x3d, 0xd9, 0x74, 0xda,
	0xf6, 0xaa, 0xc8, 0x9a, 0xfc, 0xf6, 0xfa, 0xe4, 0x78, 0xf1, 0x57, 0x05, 0x56, 0xdb, 0x8e, 0x4f,
	0x45, 0xe8, 0x0b, 0xd4, 0x79, 0xc9, 0x4c, 0x88, 0x03, 0x29, 0xa0, 0x89, 0x72, 0xf1, 0x02, 0x51,
	0x2e, 0x65, 0x44, 0xd9, 0x62, 0x0d, 0xd5, 0x33, 0xda, 0x75, 0x39, 0xeb, 0x0c, 0x06, 0x8c, 0x27,
	0x95, 0xb0, 0xed, 0xc7, 0x61, 0x30, 0x3b, 0x47, 0x0e, 0x14, 0x78, 0x0e, 0x05, 0x27, 0x45, 0x57,
	0x28, 0x55, 0xec, 0x4a, 0x87, 0xac, 0xbf, 0x2f, 0xb2, 0x52, 0x9b, 0xdb, 0x2b, 0xe6, 0x70, 0x93,
	0xd5, 0xda, 0x93, 0x49, 0x98, 0xf8, 0x19, 0x15, 0x9e, 0xd0, 0x50, 0x87, 0x2b, 0x35, 0x0e, 0xa6,
	0xe4, 0x5b, 0x24, 0x34, 0x2c, 0xfc, 0xde, 0x33, 0x68, 0x29, 0xa2, 0x08, 0x47, 0x20, 0x27, 0x93,
	0x05, 0xcd, 0xbb, 0xec, 0x12, 0x7c, 0xa1, 0xb7, 0x93, 0x0b, 0x9a, 0x87, 0x61, 0x94, 0xfb, 0x33,
	0x41, 0x6b, 0x22, 0x67, 0x93, 0x02, 0xc0, 0x39, 0x27, 0x1c, 0x27, 0x7d, 0xe3, 0x22, 0x37, 0x78,
	0x06, 0x03, 0xce, 0x81, 0xfc, 0xa4, 0xfd, 0xe2, 0x8a, 0x37, 0x78, 0x0e, 0x85, 0xbe, 0xba, 0x51,
	0x9c, 0xf6, 0x55, 0x97, 0x7d, 0xe9, 0x18, 0xf4, 0x05, 0x12, 0xa7, 0xf5, 0xc5, 0x64, 0x5f, 0x59,
	0xd4, 0xfa, 0xfd, 0x02, 0xab, 0x74, 0x83, 0xf8, 0xed, 0x87, 0xab, 0xb9, 0x6c, 0x87, 0x5e, 0x10,
	0x7a, 0xf1, 0xb9, 0xe2, 0xb2, 0xa2, 0x71, 0x3c, 0x61, 0x30, 0xdb, 0x9e, 0x7a, 0x27, 0xde, 0xd1,
	0x54, 0x7a, 0x71, 0x35, 0x9e, 0xc1, 0x60, 0x3c, 0x87, 0xfd, 0xf6, 0xb0, 0x37, 0x11, 0x7e, 0xec,
	0x1d, 0x7b, 0x22, 0x24, 0x76, 0xe7, 0x50, 0xd8, 0x1e, 0xb8, 0x92, 0x92, 0xc9, 0x58, 0xb6, 0xfe,
	0xbc, 0x24, 0xc7, 0xf8, 0xf6, 0x8a, 0x31, 0xaa, 0x6f, 0x8b, 0xe9, 0xb7, 0xd9, 0x8d, 0x5b, 0xd1,
	0x94, 0xd7, 0xce, 0xd4, 0x3d, 0x89, 0x68, 0x10, 0x92, 0x80, 0x6d, 0xa8, 0x36, 0x51, 0xaf, 0x4b,
	0x23, 0xd0, 0x10, 0x25, 0x69, 0x22, 0x8a, 0xde, 0x26, 0x5b, 0x9d, 0xd0, 0x5a, 0xdd, 0x26, 0xd9,
	0xeb, 0x84, 0xd6, 0xea, 0xee, 0x93, 0xd1, 0x4e, 0x68, 0xad, 0xee, 0x1d, 0x32, 0xdc, 0x09, 0x8d,
	0xf2, 0x20, 0x3e, 0x98, 0x0b, 0x7f, 0x2c, 0x86, 0xf3, 0xb3, 0x23, 0x11, 0xe2, 0x1a, 0x56, 0x78,
	0x0e, 0x85, 0x76, 0x3b, 0xa1, 0x7b, 0x72, 0x26, 0xfc, 0x98, 0xda, 0xad, 0xcb, 0x76, 0x59, 0x14,
	0x1d, 0xf6, 0x53, 0x31, 0x7e, 0x12, 0xcd, 0xcf, 0xd0, 0xba, 0x37, 0x79, 0x42, 0x9b, 0x9f, 0x66,
	0xa5, 0x87, 0xfb, 0x0e, 0x9a, 0xf5, 0xf5, 0xcd, 0x4b, 0xe4, 0xa8, 0x23, 0xd3, 0x1f, 0xee, 0x3b,
	0x1c, 0xea, 0xcc, 0xfb, 0xac, 0xbe, 0x37, 0xea, 0x04, 0xb0, 0x7d, 0xa7, 0x68, 0xdb, 0xd7, 0x37,
	0x5f, 0xd1, 0x1b, 0x26, 0x95, 0x3c, 0x6d, 0x67, 0x1d, 0xb1, 0x9a, 0xea, 0x05, 0xd4, 0xd8, 0x88,
	0xce, 0x0a, 0x15, 0x0e, 0x45, 0x58, 0xb1, 0xed, 0x7d, 0xc7, 0xc6, 0x15, 0xab, 0x71, 0x2c, 0xc3,
	0x1a, 0xb7, 0xc7, 0x4f, 0xec, 0x60, 0xea, 0x8d, 0xcf, 0x69, 0xd5, 0x52, 0x00, 0xd7, 0xf8, 0xd1,
	0xbe, 0x4d, 0x0b, 0x87, 0x65, 0xeb, 0x4f, 0x0a, 0x6c, 0x23, 0x3b, 0x02, 0x10, 0xc9, 0x76, 0xa7,
	0x13, 0xf8, 0x51, 0x1c, 0xba, 0x9e, 0x2f, 0x75, 0x7f, 0x8d, 0x67, 0x30, 0x50, 0x40, 0xbc, 0xbb,
	0x3b, 0x08, 0x42, 0x61, 0xdb, 0xdd, 0x03, 0x1a, 0x83, 0x0e, 0x99, 0xf7, 0x58, 0xe9, 0x70, 0x6f,
	0x84, 0x83, 0x58, 0xdf, 0x6c, 0x2d, 0x9d, 0xeb, 0xe1, 0xde, 0x88, 0x43, 0x23, 0xf3, 0xb3, 0xac,
	0xb8, 0x37, 0xc2, 0x61, 0xad, 0x6f, 0x5e, 0x5f, 0xda, 0x74, 0x6f, 0xc4, 0x8b, 0x7b, 0x23, 0xeb,
	0xc7, 0x45, 0x76, 0x79, 0xa1, 0x0f, 0xe0, 0xcd, 0x80, 0x3f, 0xa4, 0x71, 0x42, 0x11, 0x56, 0xf5,
	0xc0, 0x8f, 0x60, 0xd6, 0x5e, 0x2c, 0x26, 0x83, 0x9d, 0x2d, 0x1a, 0x61, 0x0e, 0xc5, 0x2f, 0x9d,
	0x1e, 0x71, 0x0a, 0x8a, 0x30, 0x6c, 0x68, 0x5e, 0xfe, 0x88, 0x61, 0x0f, 0x76, 0xb6, 0x38, 0x34,
	0x02, 0x2d, 0xd8, 0x09, 0xce, 0x66, 0x20, 0x70, 0x62, 0x02, 0xfd, 0x48, 0xb1, 0xcf, 0x82, 0x28,
	0x89, 0xa3, 0xad, 0x4e, 0xcf, 0x9f, 0x90, 0xeb, 0x8a, 0xf2, 0x5f, 0xe3, 0x39, 0x14, 0x56, 0x67,
	0xb0, 0xe3, 0xf4, 0x70, 0x07, 0x54, 0x38, 0x96, 0x61, 0x7c, 0xbb, 0x64, 0xbc, 0x2a, 0x1c, 0x8a,
	0xb0, 0xcf, 0x3a, 0xc1, 0xc4, 0xf3, 0x4f, 0x70, 0xb7, 0xd6, 0xe5, 0x3e, 0x4b, 0x11, 0x94, 0xe7,
	0xa3, 0xd1, 0xa3, 0x2d, 0xe1, 0x9e, 0x1d, 0x07, 0xe1, 0x99, 0x98, 0xa0, 0xdc, 0xd7, 0x78, 0x0e,
	0xb5, 0xfe, 0xb8, 0xc8, 0x8c, 0x3c, 0x8b, 0xcd, 0x11, 0xbb, 0x0a, 0xde, 0x60, 0x7b, 0xe2, 0xce,
	0x70, 0x4c, 0x4a, 0x60, 0x0b, 0xc8, 0x8d, 0x3b, 0x3a, 0x37, 0x96, 0xb5, 0xe3, 0x4b, 0xbf, 0x36,
	0xbf, 0xc4, 0xae, 0x74, 0xdc, 0xa9, 0x77, 0x24, 0x75, 0x81, 0x1d, 0x44, 0x1e, 0x72, 0x41, 0x6a,
	0x9a, 0x65, 0x55, 0xb9, 0x2f, 0xd4, 0x8e, 0xa5, 0x65, 0x5a, 0x56, 0x05, 0xf2, 0xd8, 0x71, 0x7a,
	0x4e, 0x2c, 0x44, 0xe8, 0xf9, 0x27, 0x24, 0xe1, 0x3a, 0x04, 0xc6, 0x68, 0xd8, 0xb5, 0xdb, 0xbe,
	0x1f, 0xcc, 0xfd, 0xb1, 0x80, 0x9d, 0x8d, 0xcb, 0x55, 0xe3, 0x79, 0x18, 0x98, 0xde, 0xdd, 0xee,
	0xd1, 0x2a, 0x41, 0xd1, 0x12, 0x79, 0xa9, 0x83, 0xd5, 0xbf, 0xc6, 0xaa, 0xc3, 0xf9, 0x99, 0x33,
	0x72, 0x68, 0x53, 0x12, 0x05, 0xf8, 0xe1, 0xde, 0x68, 0xd0, 0x71, 0x68, 0x86, 0x44, 0x99, 0x1b,
	0xac, 0xb8, 0xf5, 0x3e, 0xcd, 0xa1, 0xb8, 0xf5, 0x3e, 0xfc, 0x8c, 0x33, 0xe4, 0x34, 0x54, 0x28,
	0x5a, 0xbf, 0x5b, 0x60, 0x37, 0x2e, 0x64, 0x2e, 0x6a, 0x80, 0x54, 0xca, 0x47, 0xfc, 0xa1, 0x92,
	0xfb, 0x62, 0x2a, 0xf7, 0x8b, 0xf2, 0xac, 0xa4, 0xaa, 0x9c, 0x95, 0x2a, 0x90, 0xf1, 0x2a, 0xb5,
	0x42, 0x49, 0x2e, 0xb7, 0x9d, 0xed, 0x3e, 0x72, 0x64, 0x7d, 0xd3, 0xd0, 0x17, 0x1a, 0x70, 0x8e,
	0xb5, 0xd6, 0x57, 0x59, 0x3d, 0x81, 0x30, 0x82, 0x12, 0x9c, 0x9d, 0xb9, 0xfe, 0x84, 0xe6, 0xaf,
	0xc8, 0x24, 0xf8, 0x40, 0xa6, 0x04, 0x83, 0x0f, 0x3f, 0x29, 0x30, 0x13, 0x66, 0xd5, 0x77, 0xcf,
	0x45, 0xd8, 0xf5, 0xa2, 0x71, 0xf0, 0x54, 0x84, 0xe7, 0x2b, 0x6c, 0xd2, 0x26, 0xab, 0x77, 0x4e,
	0xdd, 0x28, 0xf2, 0xa2, 0x5e, 0x17, 0x7b, 0x5b, 0xdf, 0xbc, 0x4a, 0x43, 0xeb, 0xf7, 0xbb, 0x76,
	0x52, 0xc7, 0xd3, 0x66, 0xe6, 0xe7, 0x58, 0x15, 0x5c, 0xc5, 0x5e, 0x97, 0x34, 0xcf, 0x65, 0xed,
	0x03, 0x59, 0xc1, 0xa9, 0x01, 0x32, 0x74, 0xd4, 0x57, 0x0b, 0x30, 0x1a, 0xf5, 0xcd, 0x07, 0xac,
	0x7a, 0xe8, 0x4e, 0xe7, 0x22, 0x6a, 0x55, 0xee, 0x94, 0xee, 0xae, 0x6f, 0xde, 0x56, 0x1f, 0x2f,
	0x8c, 0x1c, 0x9b, 0x71, 0x6a, 0x6d, 0x7d, 0x95, 0x35, 0x33, 0x03, 0x42, 0xe7, 0x76, 0x7e, 0x04,
	0x1f, 0x2b, 0xe6, 0x10, 0x09, 0x52, 0x40, 0x93, 0x69, 0xf0, 0x62, 0xaf, 0x6b, 0x3d, 0x60, 0x2c,
	0x1d, 0xda, 0xc7, 0xf8, 0xee, 0xe7, 0xd8, 0xf5, 0x0b, 0x46, 0x95, 0x98, 0xf2, 0x82, 0x66, 0xca,
	0xaf, 0xb1, 0x6a, 0x5f, 0xf8, 0x27, 0xf1, 0xa9, 0x12, 0x4a, 0x49, 0x81, 0x31, 0xc7, 0x8f, 0x90,
	0x5b, 0x0d, 0x2e, 0x09, 0xab, 0xc7, 0xd6, 0x95, 0x5b, 0xda, 0x19, 0xad, 0xf2, 0x21, 0x6f, 0xb1,
	0xba, 0xf3, 0xc4, 0x9b, 0x75, 0x82, 0xb9, 0x1f, 0x53, 0xef, 0x29, 0x60, 0xfd, 0x72, 0x81, 0x19,
	0x5a, 0x5f, 0x5c, 0xcc, 0xa6, 0xe7, 0xab, 0xdd, 0xa5, 0x9d, 0xb9, 0x3f, 0xd6, 0x94, 0x44, 0x42,
	0x83, 0xca, 0xe5, 0x62, 0x2c, 0xbc, 0x99, 0xb2, 0xd6, 0x52, 0xd4, 0xb3, 0xe0, 0xd2, 0xf0, 0xd7,
	0x6f, 0x94, 0xd8, 0xb5, 0x45, 0x8e, 0xf5, 0xfc, 0xe3, 0x60, 0xc5, 0x70, 0xc0, 0x8b, 0x0d, 0xc2,
	0xb8, 0x2b, 0xa2, 0x71, 0xe8, 0xcd, 0x92, 0x51, 0xd5, 0x79, 0x1e, 0xc6, 0xd5, 0x3b, 0x8f, 0x86,
	0xee, 0x99, 0x20, 0xd7, 0x5f, 0x91, 0x68, 0x03, 0xce, 0x23, 0xbd, 0x0b, 0x8a, 0x7d, 0x64, 0x51,
	0xb3, 0xcb, 0x2e, 0x39, 0xe7, 0x51, 0xc7, 0x9d, 0xb9, 0x47, 0xde, 0xd4, 0x8b, 0x3d, 0x94, 0x44,
	0x10, 0xe3, 0x9b, 0x9a, 0x18, 0xe7, 0x5a, 0xf0, 0xfc, 0x27, 0xe6, 0xbb, 0x6c, 0x7d, 0x70, 0x72,
	0x96, 0x38, 0xaf, 0x55, 0xec, 0xe1, 0x9a, 0xd6, 0x83, 0x56, 0xcb, 0xf5, 0xa6, 0xe6, 0x7d, 0xb6,
	0xb6, 0x1f, 0x9e, 0x8c, 0xfa, 0x87, 0xe0, 0x64, 0xc3, 0x0e, 0xb8, 0xa1, 0x7d, 0xb5, 0x1f, 0x9e,
	0x38, 0x33, 0x31, 0xf6, 0x8e, 0xbd, 0xf1, 0xa8, 0x7f, 0xc8, 0x55, 0x4b, 0xf3, 0x5d, 0xb6, 0x76,
	0xe0, 0x3f, 0xf1, 0x83, 0x67, 0x7e, 0xab, 0xf6, 0x42, 0xdb, 0x46, 0x35, 0xb7, 0xbe, 0x5b, 0x60,
	0x57, 0x96, 0xcc, 0xc8, 0xfc, 0x32, 0xab, 0x3b, 0xe7, 0x51, 0x2c, 0xce, 0x3a, 0xee, 0x8c, 0x8c,
	0xcf, 0x75, 0x7d, 0xe3, 0xeb, 0xb3, 0x4f, 0x5b, 0x9a, 0x5f, 0x61, 0x6c, 0xdb, 0x77, 0x8f, 0xa6,
	0x62, 0x02, 0xdf, 0x15, 0x3f, 0xfa, 0x3b, 0xad, 0xa9, 0xf5, 0x3b, 0x45, 0x66, 0xe4, 0x1b, 0xc0,
	0xd6, 0xd8, 0x07, 0xc1, 0x25, 0x8d, 0x2b, 0x09, 0x10, 0x4e, 0x2e, 0x66, 0xc2, 0x8d, 0x45, 0x48,
	0x8a, 0x37, 0xa1, 0x61, 0x93, 0x6d, 0x85, 0xde, 0xe4, 0x44, 0x79, 0xf1, 0x44, 0x01, 0xfe, 0x7e,
	0xbf, 0x3d, 0x6c, 0x4b, 0xcf, 0xab, 0xc6, 0x89, 0x02, 0x9c, 0x07, 0x73, 0xe8, 0x49, 0x5a, 0x22,
	0xa2, 0xd0, 0xef, 0x3e, 0x0d, 0x7c, 0x41, 0x26, 0x48, 0x12, 0x78, 0xae, 0x0c, 0xc6, 0x8e, 0x27,
	0xcf, 0x3f, 0x35, 0x4e, 0x14, 0x98, 0x3e, 0x27, 0x46, 0x4b, 0xb1, 0xef, 0x4f, 0xcf, 0xd1, 0x57,
	0xa8, 0x71, 0x1d, 0x82, 0xfe, 0x3a, 0x70, 0x54, 0x40, 0x77, 0xa1, 0xc6, 0x25, 0x81, 0x41, 0x08,
	0x44, 0xa5, 0x83, 0x20, 0x09, 0x54, 0x1e, 0x03, 0x9b, 0xa3, 0x17, 0x5c, 0xe3, 0x58, 0xb6, 0xfe,
	0xb4, 0xc0, 0x2e, 0xe5, 0xc4, 0xe6, 0x23, 0x34, 0x55, 0x8b, 0xad, 0x29, 0xc9, 0x93, 0xea, 0x4a,
	0x91, 0xe6, 0x3d, 0x66, 0xf4, 0xfc, 0x58, 0x84, 0xc7, 0xee, 0x58, 0xa8, 0x8f, 0xe5, 0xfe, 0x5d,
	0xc0, 0x61, 0xd7, 0x25, 0x18, 0x6d, 0xf5, 0x32, 0xba, 0xdd, 0x79, 0x18, 0xd4, 0xf8, 0x3e, 0x1d,
	0x39, 0xea, 0x1c, 0x8a, 0xd6, 0x88, 0x99, 0x8b, 0xf2, 0x8a, 0xed, 0x0e, 0x7a, 0x38, 0xda, 0x26,
	0x87, 0x22, 0xcd, 0x41, 0x3b, 0xf6, 0x28, 0x12, 0xb8, 0x00, 0x9a, 0x81, 0xb4, 0x22, 0x96, 0xad,
	0x1f, 0x97, 0x58, 0xb9, 0x67, 0x3f, 0x7d, 0x67, 0x85, 0xba, 0xd0, 0x82, 0xff, 0xd4, 0x29, 0x91,
	0x30, 0x80, 0xde, 0x5e, 0x5f, 0x19, 0xe7, 0xde, 0x5e, 0x1f, 0x2d, 0xd0, 0xbe, 0x93, 0x58, 0xa0,
	0x7d, 0x47, 0xd3, 0xd3, 0x95, 0x8c, 0x9e, 0x06, 0xf5, 0x3f, 0x21, 0x8b, 0x5d, 0xec, 0x4d, 0xd2,
	0x43, 0xd8, 0x5a, 0xee, 0x10, 0x06, 0xc7, 0x96, 0xfd, 0xe3, 0xe3, 0x48, 0xc4, 0xe4, 0x35, 0x6a,
	0x88, 0xb2, 0x78, 0xf5, 0xd4, 0xe2, 0xe9, 0x87, 0x7c, 0x96, 0x3b, 0xe4, 0xeb, 0x47, 0x1e, 0x79,
	0x28, 0x4a, 0x8f, 0x3c, 0x49, 0x04, 0xab, 0xb1, 0x34, 0x82, 0xd5, 0xcc, 0x85, 0x4b, 0x6d, 0x77,
	0x02, 0x1e, 0x2a, 0x9e, 0x7c, 0x1a, 0x5c, 0x91, 0xe6, 0xe7, 0xd9, 0xda, 0x3e, 0x2a, 0xbe, 0xa8,
	0x75, 0x09, 0x35, 0x87, 0xb2, 0xd6, 0xc0, 0x67, 0x59, 0xc3, 0x55, 0x8b, 0x25, 0xb1, 0x11, 0xe3,
	0x45, 0x62, 0x23, 0x97, 0x17, 0x63, 0x23, 0x33, 0xc6, 0xd2, 0x1f, 0x00, 0xa6, 0xc9, 0x92, 0x66,
	0x34, 0x35, 0x04, 0x8e, 0x43, 0x92, 0xca, 0x18, 0xd0, 0x0c, 0x96, 0xf6, 0x81, 0x66, 0x47, 0x4a,
	0x8d, 0x86, 0x58, 0xff, 0x5a, 0x44, 0xd9, 0x79, 0xf0, 0xd2, 0xb2, 0x63, 0xb1, 0xc6, 0x28, 0x74,
	0x8f, 0x8f, 0xbd, 0x71, 0x67, 0xea, 0x46, 0x11, 0x09, 0x51, 0x06, 0x83, 0xbe, 0x77, 0xa6, 0xc1,
	0xb3, 0xbe, 0x7b, 0x24, 0xa6, 0xb4, 0x59, 0x52, 0xe0, 0x42, 0xc9, 0xba, 0xcd, 0xd8, 0x50, 0x3c,
	0x8f, 0xe5, 0xbd, 0x18, 0x49, 0x98, 0x86, 0x80, 0x14, 0xec, 0x05, 0xb3, 0xbe, 0x77, 0xe6, 0xc5,
	0x24, 0x6c, 0x09, 0x7d, 0x41, 0x38, 0x3d, 0x91, 0x82, 0xba, 0x2e, 0x05, 0x8b, 0xcb, 0xc7, 0x5e,
	0x64, 0xf9, 0xd6, 0x17, 0x96, 0xcf, 0xfc, 0x22, 0x8e, 0x68, 0xeb, 0x7c, 0x2f, 0x98, 0xa1, 0xf8,
	0xad, 0x6f, 0x5e, 0x49, 0xc5, 0xe6, 0x81, 0xaa, 0xe2, 0x49, 0x23, 0xeb, 0xdf, 0x0a, 0xac, 0x01,
	0x55, 0xea, 0x48, 0xbf, 0x62, 0x15, 0xb2, 0x1c, 0x29, 0x2e, 0x70, 0xe4, 0x16, 0xab, 0x73, 0x11,
	0x89, 0xf0, 0xa9, 0x98, 0xbc, 0xad, 0x0e, 0xd9, 0x09, 0xa0, 0x07, 0x14, 0x68, 0x1f, 0x96, 0xb3,
	0x01, 0x05, 0xda, 0x8b, 0x5a, 0x2f, 0x9b, 0xb4, 0x24, 0x29, 0x00, 0x7e, 0x0e, 0x9c, 0xa4, 0xd5,
	0x37, 0x11, 0x99, 0x82, 0x2c, 0x08, 0xbf, 0xa5, 0xc2, 0x3f, 0x74, 0xb4, 0x5c, 0xc3, 0x65, 0xcf,
	0xa1, 0xd6, 0x77, 0x0a, 0xac, 0xda, 0xeb, 0x0c, 0x56, 0x2b, 0xaf, 0x9b, 0xac, 0x06, 0x32, 0xdf,
	0x09, 0x26, 0x49, 0x3c, 0x50, 0xd1, 0x19, 0x75, 0x50, 0xca, 0xa9, 0x03, 0xa9, 0x9e, 0xca, 0x89,
	0x7a, 0x82, 0xb3, 0x8d, 0xf8, 0x80, 0xa6, 0x05, 0x45, 0xeb, 0xe7, 0x69, 0x04, 0x0f, 0x3e, 0x99,
	0x11, 0x58, 0x7f, 0x58, 0x60, 0xaf, 0xca, 0x1f, 0x18, 0x0a, 0xef, 0xe4, 0xf4, 0x28, 0x08, 0xdb,
	0x93, 0xa7, 0x22, 0x8c, 0xbd, 0x48, 0xbc, 0xc0, 0x92, 0x27, 0xea, 0xb4, 0xa8, 0xab, 0xd3, 0xd7,
	0x59, 0x73, 0xe4, 0x86, 0x27, 0x22, 0xf1, 0xa4, 0x4a, 0x14, 0xde, 0xd6, 0x41, 0xf3, 0xcd, 0x54,
	0x89, 0x95, 0x51, 0x89, 0x25, 0xd2, 0x88, 0xc3, 0xc9, 0xa9, 0x31, 0xeb, 0xd7, 0x8a, 0xec, 0x86,
	0xac, 0x91, 0xd6, 0xfe, 0xe3, 0x0c, 0x53, 0xdf, 0x8b, 0xc5, 0xc5, 0xbd, 0x28, 0xa7, 0x50, 0xd2,
	0xa7, 0xf0, 0x06, 0xdb, 0x90, 0x3f, 0xd3, 0xf7, 0x8e, 0x45, 0xec, 0x9d, 0xa9, 0x48, 0x6d, 0x0e,
	0x95, 0x7e, 0xb5, 0x3b, 0x3e, 0x05, 0x97, 0x08, 0x7e, 0x0f, 0x97, 0xae, 0xc9, 0xb3, 0x20, 0x68,
	0x21, 0x2e, 0xe2, 0xd0, 0xf5, 0x23, 0x20, 0xa5, 0xb6, 0x68, 0xf2, 0x0c, 0xa6, 0xb3, 0x63, 0xed,
	0x05, 0xd8, 0xf1, 0x80, 0x35, 0xf4, 0x8a, 0xa5, 0x87, 0x17, 0xfd, 0x40, 0xa9, 0xdc, 0xf9, 0xbf,
	0x2d, 0xb0, 0xd2, 0x41, 0xd7, 0x5e, 0xad, 0x50, 0xd5, 0x25, 0x43, 0xf1, 0xc2, 0x4b, 0x86, 0x52,
	0xf6, 0x92, 0x21, 0x55, 0x94, 0xe5, 0x8c, 0xa2, 0xd4, 0xa5, 0xaf, 0x92, 0x93, 0xff, 0x45, 0xe5,
	0x56, 0x7d, 0x11, 0xe5, 0xb6, 0xb6, 0x68, 0x9b, 0xfe, 0xa0, 0xcc, 0x4a, 0xa3, 0xce, 0x27, 0x34,
	0x2f, 0x47, 0x7c, 0x30, 0x9c, 0x9f, 0x91, 0x6d, 0x20, 0x0a, 0xf0, 0xf6, 0xf8, 0xc9, 0x90, 0x66,
	0xd5, 0xe4, 0x44, 0x61, 0x44, 0xd7, 0x8d, 0x5d, 0x52, 0x62, 0x64, 0x18, 0x52, 0x04, 0xf6, 0xf8,
	0x4e, 0x6f, 0x48, 0xce, 0x28, 0x14, 0x71, 0xd7, 0x7f, 0x6b, 0x48, 0x1e, 0x28, 0x14, 0x01, 0xe1,
	0xce, 0x88, 0xfc, 0x4e, 0x28, 0x02, 0x62, 0x3b, 0x7b, 0xe4, 0x73, 0x42, 0x11, 0x90, 0x76, 0xe7,
	0x3d, 0x72, 0x38, 0xa1, 0x88, 0x57, 0x36, 0x7c, 0x17, 0x75, 0x7b, 0x8d, 0x43, 0x11, 0x90, 0xed,
	0xce, 0x36, 0xba, 0x15, 0x35, 0x0e, 0x45, 0x40, 0x3a, 0xef, 0x73, 0x74, 0x28, 0x6a, 0x1c, 0x8a,
	0xa0, 0x83, 0x86, 0x0e, 0x5e, 0x8f, 0xd6, 0x78, 0x71, 0x88, 0xae, 0xd4, 0xfb, 0x9e, 0x3f, 0x09,
	0x9e, 0xa1, 0x9f, 0x50, 0xe1, 0x44, 0x65, 0xd6, 0xf1, 0x72, 0x6e, 0x1d, 0xaf, 0xb1, 0xea, 0x41,
	0x78, 0x22, 0xfc, 0xb8, 0x65, 0xca, 0x6f, 0x24, 0xa5, 0xbb, 0x30, 0x57, 0xb2, 0x2e, 0xcc, 0xbd,
	0x54, 0xdc, 0xaf, 0xa2, 0xb8, 0xab, 0xe0, 0xc9, 0xa8, 0x63, 0xaf, 0xf6, 0x60, 0x5e, 0x79, 0x11,
	0x29, 0xb9, 0xb6, 0x28, 0x25, 0x01, 0xab, 0x27, 0xfd, 0xff, 0x4c, 0x1c, 0x98, 0xdf, 0x2b, 0xb0,
	0xb2, 0xb3, 0x3a, 0x16, 0x90, 0x93, 0xcb, 0xe6, 0x85, 0x72, 0xd9, 0x4c, 0xe5, 0xf2, 0x2e, 0xbb,
	0x74, 0x28, 0xc2, 0xc4, 0x58, 0x8d, 0xdc, 0x13, 0xe5, 0xe9, 0xe7, 0xe0, 0x85, 0x1d, 0xa8, 0xc5,
	0xe0, 0xad, 0x1f, 0x95, 0x59, 0xa9, 0x3b, 0x74, 0x56, 0x8c, 0x2f, 0x8d, 0xa2, 0x80, 0x9d, 0xea,
	0x02, 0xfd, 0x90, 0xd3, 0x69, 0xad, 0xf8, 0x90, 0xc3, 0xfa, 0xef, 0xcf, 0xd0, 0xf6, 0xd0, 0xde,
	0x97, 0x14, 0xb4, 0x6b, 0xb7, 0xe9, 0x94, 0x56, 0x6c, 0xb7, 0x81, 0x1e, 0x75, 0xc8, 0x26, 0x17,
	0x47, 0x1d, 0xa0, 0x79, 0x97, 0xb6, 0x42, 0x91, 0x63, 0xbf, 0xbc, 0x4d, 0x1b, 0xa1, 0xc8, 0xdb,
	0x66, 0x83, 0x15, 0xbe, 0x4d, 0x6e, 0x77, 0xe1, 0xdb, 0x52, 0x8d, 0x46, 0xb3, 0xc0, 0x8f, 0xa4,
	0x9d, 0x93, 0x8e, 0x77, 0x06, 0x03, 0x7e, 0x3d, 0xec, 0xca, 0x98, 0x8a, 0x74, 0x81, 0x14, 0x89,
	0xe7, 0xab, 0xa1, 0xac, 0x91, 0x69, 0x06, 0x8a, 0x84, 0x9a, 0xa1, 0x23, 0x6b, 0x64, 0x8a, 0x81,
	0x22, 0xf1, 0x1b, 0x2e, 0x6b, 0x36, 0xe8, 0x1b, 0x49, 0x9a, 0x5f, 0x62, 0xf5, 0x87, 0x73, 0x11,
	0xe9, 0x4e, 0xb8, 0xa9, 0xc2, 0x7f, 0x43, 0x47, 0x55, 0xf1, 0xb4, 0x91, 0xb9, 0xc9, 0xd6, 0xda,
	0x7e, 0xf4, 0x4c, 0x84, 0x51, 0xcb, 0xc0, 0xf6, 0xad, 0xb4, 0x3d, 0x17, 0x11, 0xe6, 0x48, 0x71,
	0x31, 0x0e, 0xc2, 0x09, 0x57, 0x0d, 0xcd, 0xaf, 0xb1, 0xf5, 0xf6, 0x3c, 0x3e, 0x0d, 0x42, 0x19,
	0xd3, 0xb8, 0xbc, 0xe2, 0x3b, 0xbd, 0x31, 0x7e, 0x3b, 0x99, 0x60, 0x60, 0xd8, 0x9d, 0x46, 0x2d,
	0x73, 0xe5, 0xb7, 0x69, 0x63, 0xeb, 0x6f, 0x8a, 0xec, 0xf2, 0x42, 0x13, 0xb0, 0x27, 0x18, 0xa4,
	0x29, 0x48, 0x7b, 0x82, 0x11, 0x9a, 0x0b, 0xee, 0xbf, 0x74, 0x6f, 0x5b, 0x12, 0x7a, 0xd8, 0xb0,
	0x29, 0x0f, 0x51, 0xa4, 0x29, 0x33, 0xee, 0xb5, 0x86, 0x24, 0xf6, 0xab, 0x9a, 0xda, 0x2f, 0x94,
	0x44, 0x9b, 0x6e, 0xbb, 0x8a, 0x3d, 0x9b, 0xb4, 0x97, 0xbc, 0xb3, 0x04, 0xed, 0x05, 0xbf, 0x3d,
	0x6c, 0x0f, 0xb6, 0xe9, 0x82, 0x52, 0x12, 0xa8, 0x3d, 0x47, 0x9c, 0xae, 0x23, 0xa1, 0x68, 0xbe,
	0xc6, 0x4a, 0xce, 0x7e, 0x1b, 0x65, 0x64, 0x7d, 0xb3, 0x99, 0x72, 0xc5, 0xd9, 0x6f, 0x73, 0xa8,
	0xc1, 0x06, 0xfc, 0x90, 0x1c, 0x65, 0xbd, 0x01, 0x3f, 0xe4, 0x50, 0x63, 0xde, 0x62, 0xc5, 0xc1,
	0x23, 0xba, 0xbc, 0x6a, 0xa4, 0xf5, 0x83, 0x47, 0xbc, 0x38, 0x78, 0x24, 0xef, 0x8c, 0x46, 0x51,
	0x6b, 0xe3, 0x4e, 0x09, 0xc6, 0x0e, 0x65, 0xeb, 0xcf, 0x0a, 0xac, 0x2a, 0x7f, 0x02, 0x86, 0x39,
	0xd0, 0x78, 0x29, 0x09, 0x40, 0x39, 0xa2, 0xd2, 0x62, 0x4b, 0x42, 0x1a, 0xa0, 0xd0, 0x73, 0xa7,
	0xa4, 0x01, 0x88, 0x02, 0xe1, 0xe4, 0xe2, 0x38, 0x14, 0xd1, 0x29, 0x31, 0x55, 0x91, 0xd8, 0x8f,
	0x88, 0xc3, 0x73, 0xda, 0xed, 0x92, 0x80, 0x7e, 0xb6, 0x9f, 0xcf, 0xbc, 0x50, 0x90, 0xff, 0x41,
	0x14, 0xf4, 0x33, 0xf0, 0x7c, 0xef, 0x6c, 0x7e, 0x46, 0x6e, 0xb0, 0x22, 0xad, 0x89, 0x1c, 0x2f,
	0x3f, 0xcc, 0x5c, 0xc5, 0x16, 0x72, 0x57, 0xb1, 0x60, 0x30, 0xc0, 0x77, 0x54, 0x36, 0x95, 0x28,
	0x60, 0x81, 0x66, 0x4f, 0xcb, 0x2a, 0x13, 0x01, 0x27, 0x58, 0x4e, 0x45, 0xc8, 0xfa, 0x3a, 0xab,
	0x20, 0xdf, 0x40, 0x1e, 0xec, 0x50, 0x1c, 0x8b, 0x10, 0x6f, 0x2d, 0x48, 0x21, 0xa7, 0x48, 0xf2,
	0x71, 0x51, 0xfb, 0xf8, 0x3d, 0xb6, 0xae, 0xed, 0xb7, 0xff, 0x9c, 0x88, 0x5a, 0xff, 0x52, 0x62,
	0xd5, 0xee, 0x5e, 0x67, 0xb5, 0xbf, 0x9f, 0xb9, 0x77, 0x2f, 0x2e, 0xb9, 0x77, 0xdf, 0x73, 0xc3,
	0xc9, 0x33, 0x37, 0x14, 0xa3, 0x34, 0x56, 0x93, 0xc1, 0xc0, 0x56, 0x29, 0xba, 0x2f, 0x7c, 0x75,
	0xf1, 0xa2, 0x41, 0x7a, 0x2f, 0xfb, 0xb3, 0x38, 0xa2, 0xfd, 0x91, 0xc1, 0x40, 0xae, 0x1f, 0x79,
	0x13, 0x5a, 0x4f, 0x28, 0x62, 0xaa, 0x87, 0x18, 0xab, 0xf8, 0x06, 0x96, 0x53, 0x17, 0xb7, 0xa6,
	0xbb, 0xb8, 0x69, 0x2a, 0xa5, 0x3a, 0x71, 0x26, 0x34, 0xfc, 0xf6, 0xb7, 0x82, 0x79, 0x98, 0xd4,
	0xcb, 0x34, 0xae, 0x0c, 0x26, 0x73, 0xd7, 0x9e, 0xc7, 0x0e, 0x9c, 0xbc, 0xc2, 0x9e, 0x4d, 0x29,
	0x5d, 0x19, 0x4c, 0x6a, 0xec, 0xa9, 0x7b, 0xde, 0x3e, 0x91, 0xfd, 0xc8, 0xa8, 0x47, 0x06, 0x83,
	0x36, 0xb2, 0xcf, 0xbd, 0xf7, 0xe1, 0x68, 0x40, 0x31, 0x90, 0x0c, 0x06, 0x92, 0x21, 0xfb, 0xc4,
	0xc5, 0x95, 0xd1, 0x10, 0x0d, 0x81, 0x59, 0xef, 0x78, 0x53, 0x81, 0x5e, 0x4c, 0x83, 0x63, 0x59,
	0x0f, 0x92, 0x18, 0x99, 0x20, 0x09, 0xac, 0x70, 0xde, 0x9d, 0xee, 0x33, 0x96, 0xc2, 0x1f, 0xeb,
	0x26, 0x40, 0x29, 0xa9, 0x92, 0xe6, 0x64, 0xff, 0x63, 0x81, 0xe4, 0xe8, 0x05, 0x02, 0x17, 0x83,
	0xe8, 0x44, 0x8f, 0xa4, 0x11, 0x49, 0x47, 0x16, 0x69, 0x7a, 0x4a, 0xc9, 0x91, 0x45, 0xda, 0x9e,
	0x9b, 0x32, 0xf9, 0x0c, 0xb9, 0x25, 0xe3, 0xe1, 0x09, 0x8d, 0x1b, 0x55, 0xc0, 0xe9, 0x68, 0x12,
	0x52, 0x68, 0x2f, 0xa1, 0xf1, 0x5c, 0x06, 0x07, 0x0e, 0x77, 0x4c, 0xe9, 0x06, 0x52, 0xb1, 0x66,
	0xc1, 0x8b, 0x0f, 0x22, 0x72, 0x46, 0x79, 0xce, 0x0d, 0x59, 0x43, 0xaf, 0x00, 0x7e, 0xa0, 0x71,
	0x26, 0xde, 0xa1, 0x51, 0xfe, 0x38, 0xbc, 0xfb, 0x6e, 0x81, 0x95, 0xfa, 0xfd, 0xce, 0xea, 0xb4,
	0x8b, 0xae, 0xd3, 0xb6, 0x93, 0xbb, 0x32, 0xa7, 0x8d, 0xa6, 0xa0, 0xb7, 0xab, 0x9c, 0x92, 0xde,
	0x2e, 0x6e, 0x05, 0xa7, 0x9d, 0x5c, 0xdb, 0x3b, 0xd4, 0xa6, 0xc3, 0x95, 0x43, 0xd2, 0xe1, 0xf2,
	0x36, 0x4e, 0x5e, 0xd6, 0x56, 0xd5, 0x6d, 0x9c, 0x4c, 0x22, 0xf8, 0x95, 0x32, 0x2b, 0x0d, 0x57,
	0x3a, 0x6e, 0xaf, 0xb3, 0x66, 0x5f, 0xb8, 0x33, 0xba, 0x8e, 0x0e, 0x54, 0xd8, 0x23, 0x0b, 0xea,
	0xf1, 0xa9, 0x52, 0x36, 0x3e, 0x65, 0xb2, 0xf2, 0x20, 0x75, 0x9b, 0xb0, 0x8c, 0xce, 0x60, 0x1c,
	0xba, 0x71, 0x72, 0x5e, 0x52, 0xa4, 0xd4, 0xa8, 0x53, 0x35, 0x54, 0x2c, 0xc3, 0xf8, 0xec, 0x50,
	0x8c, 0xbd, 0x48, 0x85, 0x31, 0x2a, 0x3c, 0x05, 0x30, 0x5a, 0x12, 0x04, 0x71, 0x17, 0x36, 0x1c,
	0x6e, 0xff, 0x26, 0x4f, 0x01, 0x79, 0xca, 0x0d, 0xe2, 0xae, 0x17, 0xcd, 0x68, 0x78, 0x75, 0x19,
	0x07, 0xc9, 0xa2, 0x98, 0xb5, 0xa0, 0xb4, 0x70, 0xaf, 0x8b, 0xda, 0xa0, 0xc9, 0x75, 0xc8, 0x7c,
	0x8b, 0x99, 0x09, 0x99, 0xb2, 0x6b, 0x1d, 0x93, 0xc7, 0x96, 0xd4, 0x80, 0xf3, 0xba, 0x1f, 0x7a,
	0x27, 0x9e, 0x9f, 0x36, 0x6e, 0x60, 0xe3, 0x3c, 0x6c, 0xde, 0x63, 0x06, 0x5e, 0x52, 0x3d, 0xd5,
	0xfa, 0x6d, 0x62, 0xd3, 0x05, 0xdc, 0xfc, 0x02, 0xbb, 0x8c, 0xb2, 0x7c, 0xe6, 0xc5, 0x69, 0xe3,
	0x0d, 0x6c, 0xbc, 0x58, 0x01, 0xb3, 0xdf, 0x7e, 0x1e, 0x0b, 0x1f, 0xa6, 0xb8, 0x75, 0x1e, 0x8b,
	0x88, 0xd4, 0x47, 0x0e, 0xb5, 0x7e, 0x52, 0x60, 0x25, 0xa7, 0x67, 0xbf, 0x74, 0x0c, 0xf2, 0x1a,
	0xab, 0x0e, 0x44, 0x7c, 0x1a, 0x4c, 0x68, 0xf1, 0x89, 0x82, 0x2f, 0x64, 0x64, 0x4c, 0x06, 0x40,
	0xea, 0x5c, 0x91, 0xa0, 0xee, 0x7a, 0x91, 0x72, 0x6b, 0x49, 0x5a, 0x35, 0x64, 0xc1, 0x11, 0xae,
	0x2e, 0x71, 0x84, 0x61, 0x6d, 0x89, 0x76, 0x62, 0x37, 0x9e, 0x47, 0xe4, 0x34, 0xe5, 0x50, 0xeb,
	0xfb, 0x65, 0x56, 0xee, 0xed, 0x0e, 0xec, 0x97, 0xc8, 0x73, 0xba, 0xcb, 0x2e, 0x0d, 0xdc, 0xe7,
	0xaa, 0x3f, 0x0c, 0x7f, 0x94, 0xe4, 0x22, 0xe6, 0xe0, 0xcc, 0x09, 0xa4, 0x9c, 0x3b, 0x3b, 0x5a,
	0xac, 0xb1, 0x1b, 0x06, 0xf3, 0x99, 0x0a, 0x16, 0x55, 0x64, 0x66, 0x99, 0x8e, 0x99, 0xef, 0xb2,
	0xeb, 0xce, 0x1c, 0x73, 0x43, 0x64, 0xfc, 0xc5, 0x0e, 0x83, 0xb1, 0x88, 0x22, 0x38, 0x57, 0xca,
	0xc3, 0xc4, 0x45, 0xd5, 0x30, 0x46, 0x1e, 0x1c, 0xcd, 0xa3, 0xd8, 0x17, 0x51, 0x24, 0xaf, 0x6c,
	0xe5, 0x26, 0xc9, 0xc3, 0x30, 0x0e, 0xbc, 0x22, 0x79, 0xea, 0x4e, 0x71, 0x2a, 0x32, 0xf3, 0x31,
	0x83, 0x41, 0x6f, 0xf2, 0x31, 0x03, 0x0d, 0x4c, 0x44, 0xad, 0x3a, 0x2e, 0x5d, 0x1e, 0x36, 0x37,
	0xd9, 0x55, 0x79, 0xcf, 0xb2, 0x7f, 0x8c, 0x33, 0x91, 0x2e, 0x74, 0x44, 0x67, 0x96, 0xa5, 0x75,
	0x98, 0x6a, 0x41, 0xb8, 0xec, 0x2e, 0xa2, 0x33, 0x4c, 0x1e, 0x36, 0xbf, 0x41, 0x3c, 0x53, 0xbd,
	0x36, 0x32, 0xce, 0x3d, 0x2c, 0xe7, 0xd3, 0xfb, 0x5a, 0x03, 0x9e, 0x69, 0xad, 0x8b, 0x6a, 0x33,
	0x23, 0xaa, 0xd6, 0x8f, 0x0b, 0xec, 0xf2, 0xc2, 0xd7, 0x4b, 0xcd, 0xe1, 0x6d, 0xc6, 0xda, 0xf3,
	0xe7, 0xe4, 0xac, 0xab, 0x60, 0x6f, 0x8a, 0x2c, 0x9b, 0x4b, 0x69, 0xf9, 0x5c, 0xee, 0x31, 0x63,
	0x30, 0x9f, 0xc6, 0xde, 0xd8, 0x8d, 0x92, 0x80, 0xa1, 0xb4, 0x6a, 0x0b, 0xf8, 0x32, 0xfe, 0x57,
	0x96, 0xf2, 0xdf, 0x72, 0x65, 0xe8, 0x5a, 0xc5, 0xb2, 0x57, 0x48, 0xf7, 0xfd, 0xd4, 0xe6, 0x15,
	0x33, 0xf7, 0xb7, 0x7a, 0x1f, 0x79, 0xcb, 0xf7, 0x4f, 0x05, 0x66, 0x2e, 0xd6, 0xff, 0x54, 0xc2,
	0x0a, 0x16, 0x6b, 0xb4, 0xc7, 0xf1, 0xdc, 0x9d, 0x52, 0x1b, 0xf2, 0x20, 0x75, 0x2c, 0x17, 0x7a,
	0x28, 0xe7, 0x43, 0x0f, 0x66, 0x9f, 0x5d, 0x92, 0x54, 0x7b, 0xea, 0x9d, 0xf8, 0x49, 0xe2, 0xce,
	0xfa, 0xa6, 0x75, 0xe1, 0xdc, 0x92, 0x96, 0x3c, 0xff, 0xa9, 0xd5, 0x66, 0xaf, 0x7e, 0x44, 0x7b,
	0xbc, 0x24, 0xf4, 0xd5, 0x6c, 0xa1, 0x88, 0xc7, 0xbd, 0x67, 0x01, 0xcd, 0x0e, 0x8a, 0xd6, 0x29,
	0x2b, 0x3b, 0xc3, 0xf6, 0x2a, 0x45, 0xf3, 0x16, 0x33, 0xf7, 0xc3, 0x13, 0xd7, 0xf7, 0x3e, 0x74,
	0xe5, 0x69, 0x34, 0x09, 0x69, 0x37, 0xf8, 0x92, 0x9a, 0x44, 0x38, 0x4b, 0x5a, 0xf2, 0xe6, 0x29,
	0x63, 0x32, 0x38, 0xba, 0x3d, 0x3e, 0x0d, 0x56, 0xdf, 0x5a, 0x68, 0x09, 0xa2, 0x24, 0xc8, 0x5a,
	0x72, 0xe8, 0x2d, 0x56, 0x97, 0x01, 0xbf, 0x34, 0x6b, 0x22, 0x05, 0xac, 0x1f, 0x14, 0xd8, 0xcd,
	0x6c, 0xf8, 0xdc, 0x91, 0x79, 0x72, 0xf2, 0x24, 0xb0, 0xd2, 0x79, 0xc8, 0xc6, 0xc9, 0x8b, 0x2b,
	0xe2, 0xe4, 0xa5, 0x17, 0x08, 0x0c, 0x9f, 0xb0, 0x96, 0x1e, 0x26, 0xff, 0x18, 0xc3, 0x79, 0x33,
	0xbf, 0x09, 0x3e, 0xfa, 0x87, 0x7e, 0xab, 0xc4, 0xca, 0x7b, 0xa3, 0x95, 0x1e, 0x52, 0x92, 0x0c,
	0x5b, 0xcc, 0xbd, 0x67, 0xd0, 0x6c, 0x62, 0x3d, 0xb1, 0x89, 0x26, 0x2b, 0xef, 0x05, 0x51, 0x4c,
	0x0a, 0x00, 0xcb, 0xd0, 0xff, 0x41, 0x24, 0x42, 0x3c, 0x2f, 0x90, 0x4f, 0x9b, 0x02, 0x74, 0x0a,
	0x16, 0x21, 0x85, 0xd5, 0xeb, 0x5c, 0x91, 0xb0, 0xb2, 0x5c, 0x7c, 0xd0, 0x09, 0x82, 0x27, 0x9e,
	0x90, 0xbe, 0x6c, 0x9d, 0x6b, 0x88, 0xf4, 0x2c, 0x3e, 0x00, 0x7f, 0x4f, 0xf8, 0x31, 0x6d, 0x34,
	0x79, 0x42, 0x5a, 0xc0, 0x65, 0x68, 0xb5, 0x4f, 0xe7, 0x24, 0x28, 0xca, 0xaf, 0xa3, 0xec, 0xd7,
	0x4c, 0x7d, 0x9d, 0xc5, 0x31, 0xcb, 0x4e, 0x02, 0x28, 0xaa, 0xf2, 0xa4, 0xa4, 0x43, 0x78, 0xc0,
	0x41, 0x7b, 0x8c, 0xd2, 0x2e, 0xe3, 0x53, 0x1a, 0x92, 0xde, 0x18, 0x36, 0x97, 0xde, 0x18, 0x6e,
	0x68, 0x37, 0x86, 0xd6, 0xdf, 0x55, 0xd9, 0xc6, 0xa8, 0xef, 0xd0, 0x01, 0x4a, 0x4c, 0xa7, 0xc1,
	0x4b, 0xd8, 0xf6, 0x8b, 0x5d, 0xd6, 0xdb, 0x8c, 0xd1, 0x33, 0xba, 0xf4, 0xe0, 0xaa, 0x21, 0x98,
	0xe3, 0xee, 0xfa, 0x93, 0xe8, 0xd4, 0x7d, 0x22, 0xb4, 0xb4, 0xea, 0x2c, 0x28, 0x4f, 0xb7, 0x04,
	0x40, 0x3f, 0x74, 0x25, 0xa2, 0x63, 0xc0, 0xe2, 0x84, 0x56, 0x83, 0x91, 0xc6, 0x7b, 0x01, 0xc7,
	0x9c, 0x10, 0xd7, 0x9f, 0x04, 0x67, 0x14, 0x0b, 0x22, 0x0a, 0x73, 0xe0, 0xc1, 0x15, 0x80, 0xa3,
	0x0d, 0xfc, 0x8e, 0x74, 0x70, 0x33, 0x98, 0xdc, 0xe2, 0x44, 0x53, 0x8c, 0x28, 0x05, 0xc0, 0x91,
	0xea, 0x78, 0xb3, 0x53, 0x11, 0x3a, 0x73, 0x2f, 0xc6, 0xb1, 0x52, 0xa6, 0x73, 0x16, 0xc5, 0x77,
	0x0a, 0xca, 0x71, 0x84, 0x56, 0x0d, 0x7a, 0xa7, 0xa0, 0x61, 0x32, 0x77, 0xb1, 0x47, 0x8b, 0x08,
	0x45, 0xe0, 0xfd, 0xbe, 0xd3, 0xb1, 0x29, 0x20, 0x8f, 0x65, 0x3c, 0x11, 0xa7, 0x7d, 0xcb, 0xf0,
	0x62, 0x85, 0x67, 0x30, 0xb0, 0x84, 0x2a, 0x5d, 0x56, 0x6e, 0x1d, 0x79, 0xca, 0xad, 0xf0, 0x3c,
	0x0c, 0xeb, 0xe1, 0x78, 0x27, 0xbe, 0x1b, 0xcf, 0x43, 0xd1, 0x9e, 0x9e, 0xc8, 0x28, 0x62, 0x85,
	0x67, 0x41, 0xb4, 0xac, 0xf3, 0xd9, 0x2c, 0x08, 0x63, 0x31, 0x41, 0xdb, 0x2f, 0x23, 0x86, 0x15,
	0x9e, 0x87, 0x33, 0x2d, 0xed, 0xc0, 0xf3, 0xe3, 0xa8, 0x75, 0x25, 0xd7, 0x52, 0xc2, 0x20, 0x9e,
	0xed, 0xbe, 0x3d, 0x94, 0x11, 0xfe, 0x3a, 0x97, 0x04, 0xf0, 0xe0, 0x9b, 0xee, 0x7d, 0x0c, 0xe1,
	0xd7, 0x39, 0x14, 0x53, 0xe1, 0xbe, 0xb6, 0x54, 0xb8, 0xaf, 0xeb, 0xd7, 0xe1, 0xe9, 0xeb, 0x91,
	0xd6, 0x05, 0xaf, 0x47, 0x6e, 0x64, 0x5e, 0x8f, 0x68, 0x91, 0xf5, 0x9b, 0x17, 0xde, 0xf8, 0xbc,
	0x9a, 0xbd, 0xf1, 0xb9, 0xcd, 0x58, 0xb2, 0x6a, 0x51, 0xeb, 0x16, 0x4e, 0x4e, 0x43, 0xac, 0xdf,
	0x2e, 0xb0, 0xb5, 0x9e, 0xed, 0x88, 0x71, 0x7b, 0x6f, 0xf5, 0xc5, 0xa3, 0xba, 0x9b, 0x56, 0x17,
	0x8f, 0x8a, 0x46, 0x59, 0xb0, 0x93, 0x9c, 0x53, 0xc7, 0xee, 0xa9, 0xdb, 0xdf, 0x72, 0x72, 0xfb,
	0x0b, 0xc6, 0xb0, 0x3d, 0x8f, 0x4f, 0xc1, 0x18, 0xc9, 0x70, 0x3e, 0xda, 0x7a, 0xe9, 0x21, 0x2f,
	0xa9, 0xb1, 0x66, 0xac, 0x86, 0x03, 0xdb, 0x76, 0x56, 0xa9, 0x65, 0xfa, 0xf5, 0xe2, 0xc2, 0xaf,
	0x97, 0xd2, 0x5f, 0xb7, 0x58, 0xa3, 0x2f, 0xfc, 0x6d, 0x7f, 0x1c, 0x9e, 0xcf, 0x62, 0xa1, 0xee,
	0xa9, 0x33, 0x98, 0xf5, 0xbd, 0x22, 0xab, 0xee, 0x0a, 0x5f, 0x3c, 0x15, 0x2f, 0x7d, 0x3e, 0x7a,
	0x9d, 0x35, 0xc9, 0xa6, 0x64, 0xbc, 0x9d, 0x2c, 0x88, 0x21, 0xb7, 0xf6, 0x40, 0xbe, 0x4e, 0xa2,
	0x7c, 0xb0, 0x14, 0xc0, 0x4d, 0x1a, 0x7a, 0xc0, 0x8b, 0xa9, 0xfc, 0x8c, 0x4e, 0x4d, 0x39, 0x34,
	0x93, 0xb7, 0x53, 0xcd, 0xe5, 0xed, 0x18, 0xac, 0x74, 0x38, 0xec, 0x51, 0x0c, 0x14, 0x8a, 0xba,
	0x45, 0xac, 0x65, 0x2c, 0xa2, 0x9c, 0x71, 0xde, 0x22, 0x7e, 0xc8, 0x1a, 0x7a, 0x45, 0x1a, 0x64,
	0x2c, 0xe8, 0x71, 0xf0, 0x0b, 0xc2, 0x91, 0x4b, 0x2e, 0xa1, 0x2f, 0xba, 0x51, 0x55, 0x61, 0x93,
	0x8a, 0x16, 0x36, 0xf9, 0xe7, 0x02, 0xab, 0x1c, 0x3e, 0xea, 0xb7, 0x87, 0x2b, 0x96, 0xe1, 0x0e,
	0x5b, 0x3f, 0x74, 0xa7, 0xde, 0xa4, 0xd7, 0x85, 0xdf, 0x50, 0x0f, 0x10, 0x34, 0x48, 0xb1, 0xa1,
	0x94, 0xb2, 0x01, 0x4e, 0x68, 0x5b, 0x76, 0xb2, 0x01, 0x88, 0xfb, 0x19, 0x8c, 0xda, 0x74, 0x03,
	0xb0, 0x79, 0x6e, 0xa8, 0xd8, 0x9f, 0xc1, 0x60, 0x5f, 0xed, 0x6e, 0xd9, 0xf8, 0x18, 0x55, 0x4c,
	0xe8, 0xe0, 0xa6, 0x21, 0xa0, 0xef, 0x77, 0xb7, 0x6c, 0x54, 0x33, 0xf2, 0xe5, 0x45, 0xaf, 0xab,
	0xf4, 0x7d, 0x1e, 0xb7, 0xfe, 0xa1, 0xcc, 0x4a, 0x07, 0xce, 0xd6, 0x0b, 0xdf, 0x5b, 0x95, 0xf1,
	0xde, 0xea, 0x16, 0xab, 0x6f, 0x3f, 0x55, 0x66, 0x98, 0x9c, 0xb9, 0x04, 0xa0, 0x64, 0x21, 0x3f,
	0x3a, 0x16, 0xa1, 0xfe, 0xd2, 0x4c, 0xc7, 0xa0, 0x87, 0xae, 0x17, 0xca, 0x47, 0xc0, 0x2a, 0xfd,
	0x24, 0x01, 0x30, 0xa4, 0xe0, 0x4f, 0x66, 0xa0, 0xfe, 0xc8, 0x63, 0x94, 0x42, 0x96, 0x43, 0x41,
	0xe4, 0xbb, 0xe2, 0xa9, 0x97, 0x1c, 0x58, 0x68, 0x9a, 0x59, 0x10, 0xa4, 0x62, 0x6b, 0x1e, 0x25,
	0xef, 0x18, 0x24, 0x81, 0xa3, 0x54, 0x13, 0x74, 0xc4, 0x98, 0x9e, 0xe2, 0x65, 0xb0, 0xcc, 0x03,
	0xc3, 0x83, 0x48, 0x8c, 0xc9, 0x33, 0xc9, 0x82, 0xa8, 0x77, 0x45, 0x3c, 0x9f, 0xd1, 0x1d, 0xb2,
	0x24, 0x12, 0xe9, 0x92, 0xd7, 0xc8, 0xf2, 0xd6, 0x05, 0xb4, 0xae, 0x0c, 0x22, 0xc8, 0x03, 0x23,
	0x51, 0xe8, 0x9a, 0x85, 0x47, 0x24, 0xa4, 0x1b, 0x32, 0xbc, 0x94, 0x00, 0x30, 0x8a, 0x83, 0xf0,
	0x48, 0xbb, 0xe2, 0xb9, 0x24, 0x93, 0x23, 0x32, 0x20, 0x48, 0xe4, 0x41, 0x78, 0xa4, 0x8e, 0xd9,
	0x78, 0xe9, 0xdc, 0xe4, 0x3a, 0x44, 0xfd, 0x38, 0xb1, 0x1b, 0xc6, 0x3b, 0xa1, 0x7b, 0x26, 0x73,
	0xd3, 0x64, 0x3f, 0x29, 0x68, 0x3e, 0x60, 0xd7, 0x0e, 0xc2, 0xa3, 0x4e, 0x30, 0x3b, 0xdf, 0x3f,
	0x56, 0x4b, 0x26, 0x37, 0x95, 0x89, 0xcd, 0x2f, 0xa8, 0x95, 0xc1, 0x96, 0x60, 0x38, 0x3f, 0xeb,
	0x8a, 0x68, 0x8c, 0xd7, 0xd4, 0x4d, 0xae, 0x21, 0xd6, 0x5f, 0x14, 0x59, 0xa9, 0xdf, 0x19, 0xac,
	0x76, 0x73, 0x07, 0xee, 0x89, 0x37, 0x56, 0x99, 0x30, 0x48, 0x2c, 0x79, 0x4d, 0x55, 0x5a, 0xfa,
	0x9a, 0x2a, 0x77, 0x73, 0x5d, 0x5e, 0x4c, 0xde, 0x5a, 0x4c, 0x8f, 0xaa, 0x2c, 0x4d, 0x8f, 0x5a,
	0x7c, 0x97, 0x55, 0x5d, 0xfa, 0x2e, 0xeb, 0x0d, 0xb6, 0x31, 0x0a, 0x62, 0x77, 0x9a, 0x66, 0x4a,
	0x49, 0x11, 0xcc, 0xa1, 0xe8, 0xba, 0x9e, 0xba, 0xbe, 0x2f, 0xa6, 0x18, 0x7a, 0xaf, 0x91, 0xeb,
	0x9a, 0x42, 0x2a, 0x79, 0x12, 0x9a, 0x8b, 0x09, 0xa5, 0x2c, 0x68, 0x88, 0xf5, 0xc3, 0x02, 0x2b,
	0x0f, 0xec, 0xbe, 0xb3, 0x9a, 0x81, 0x32, 0x03, 0x8f, 0x18, 0x28, 0xb3, 0xef, 0x5e, 0x24, 0x7f,
	0x4f, 0x26, 0xf2, 0x8e, 0x9f, 0x6c, 0x05, 0x71, 0x1c, 0x9c, 0x91, 0x76, 0xd2, 0x21, 0x75, 0xf5,
	0x58, 0x49, 0xf2, 0x37, 0xad, 0xbf, 0x2e, 0xb0, 0xfa, 0x20, 0x98, 0x1c, 0xcd, 0xa3, 0xd5, 0x49,
	0x23, 0xef, 0xb0, 0x57, 0xf4, 0x08, 0x79, 0xfe, 0xb0, 0xb8, 0xbc, 0x12, 0x4c, 0xb7, 0xb2, 0x2c,
	0xda, 0x27, 0x72, 0xfc, 0x4b, 0x6a, 0x2e, 0x54, 0xf6, 0xf8, 0x24, 0xcb, 0x8b, 0xb5, 0x3e, 0x68,
	0xe1, 0xb3, 0xa8, 0xf5, 0xab, 0x45, 0x56, 0xdd, 0x77, 0xec, 0x9d, 0xa7, 0x9b, 0x2f, 0x6d, 0x88,
	0x97, 0x1c, 0xa5, 0x61, 0x01, 0xa4, 0x89, 0xcd, 0x0c, 0x2e, 0x83, 0xa1, 0x97, 0x83, 0x87, 0x4d,
	0x4a, 0x27, 0x6e, 0xf2, 0x84, 0xc6, 0x2c, 0x99, 0x50, 0xb8, 0x74, 0xd9, 0xd0, 0xe4, 0x44, 0x65,
	0x22, 0x82, 0x6b, 0x8b, 0xd9, 0x24, 0xed, 0x39, 0x8e, 0x44, 0x2a, 0x3e, 0xa2, 0xf0, 0x1f, 0x01,
	0x32, 0x3e, 0x0f, 0xe9, 0xbe, 0x1c, 0x6a, 0x7d, 0x47, 0xb1, 0xe2, 0xfe, 0x7f, 0x79, 0x56, 0xdc,
	0x64, 0xb5, 0x9e, 0x1f, 0xc5, 0xae, 0x3f, 0x56, 0xcc, 0x48, 0xe8, 0x8c, 0x73, 0x59, 0xcf, 0x3a,
	0x97, 0xd6, 0x8f, 0x2a, 0xac, 0xb4, 0xb5, 0xd3, 0x7d, 0xe9, 0xf9, 0xdf, 0x66, 0xac, 0xeb, 0xb9,
	0x27, 0x7e, 0x10, 0xc5, 0xde, 0x98, 0xb8, 0xa0, 0x21, 0x68, 0x3a, 0x62, 0x37, 0x56, 0xaa, 0x4a,
	0x12, 0xc9, 0xfd, 0x84, 0x34, 0xfe, 0xf2, 0x7e, 0x02, 0x5c, 0x1b, 0xcf, 0x77, 0xa7, 0x2a, 0x29,
	0x1f, 0x09, 0xf3, 0x5d, 0x76, 0x9d, 0x2e, 0x5a, 0xec, 0xa9, 0xeb, 0x8b, 0x9e, 0x3f, 0x11, 0x33,
	0xe1, 0x83, 0x34, 0x53, 0x36, 0xc8, 0x45, 0xd5, 0xb0, 0xdb, 0x61, 0xb9, 0xed, 0x50, 0x44, 0xd0,
	0x9a, 0xd2, 0xf6, 0x35, 0x08, 0x8f, 0x02, 0x02, 0x1f, 0x58, 0xd5, 0x29, 0xe1, 0x1f, 0x29, 0x3c,
	0xb8, 0xce, 0xa7, 0xb1, 0x87, 0x86, 0x98, 0x32, 0xa9, 0x34, 0x04, 0xdc, 0x8f, 0xae, 0x88, 0xc5,
	0x38, 0x96, 0xd8, 0xd4, 0x4b, 0x1e, 0xb5, 0x2e, 0xe0, 0x18, 0xfa, 0x3e, 0xef, 0x7a, 0xd1, 0x38,
	0xf4, 0xce, 0x3c, 0x1f, 0x6f, 0x7e, 0xe4, 0x79, 0x2f, 0x0f, 0x9b, 0x5f, 0x60, 0x97, 0xbf, 0x15,
	0xcc, 0xc3, 0x6c, 0x5b, 0x69, 0x45, 0x17, 0x2b, 0xcc, 0x4d, 0x76, 0xb5, 0x2b, 0x22, 0x2f, 0x14,
	0x93, 0x81, 0xe7, 0x8f, 0x9e, 0x27, 0x56, 0x51, 0x66, 0x9f, 0x2c, 0xad, 0x03, 0xfd, 0xc4, 0xc5,
	0x07, 0x73, 0xaa, 0xe0, 0xe9, 0x47, 0x97, 0xa4, 0x7e, 0x5a, 0x5a, 0x69, 0x7e, 0x83, 0xdd, 0xd0,
	0x2a, 0xb6, 0xc7, 0xa7, 0x81, 0xf6, 0xa5, 0xcc, 0xfc, 0xba, 0xb8, 0x81, 0xf9, 0x0e, 0x63, 0xc0,
	0x72, 0xca, 0xf5, 0xbd, 0x9c, 0x79, 0x63, 0xb6, 0xb5, 0xd3, 0x4d, 0xeb, 0xb8, 0xd6, 0xce, 0xfa,
	0x05, 0xd6, 0xcc, 0x54, 0xe2, 0x4b, 0xe4, 0x79, 0x7c, 0xaa, 0x45, 0x4a, 0x13, 0x1a, 0x04, 0xe7,
	0x3d, 0x71, 0x9e, 0xa4, 0x1d, 0x49, 0xe2, 0x85, 0x2d, 0xea, 0xb2, 0xa7, 0x4c, 0x3f, 0x2c, 0xb3,
	0xd2, 0x2e, 0xdf, 0x5e, 0xfd, 0x6e, 0x49, 0x6d, 0x3f, 0x25, 0x64, 0xd2, 0x4b, 0xce, 0xc3, 0x2a,
	0x49, 0xd4, 0xf3, 0x4f, 0x54, 0x43, 0x79, 0xf9, 0x98, 0x43, 0x41, 0xf0, 0xde, 0x13, 0xe7, 0xaa,
	0x8d, 0xb4, 0x4f, 0x1a, 0x22, 0x6f, 0xb7, 0x3f, 0x50, 0xf5, 0x74, 0xdd, 0x93, 0x22, 0x20, 0x42,
	0x4e, 0x1c, 0x7a, 0x63, 0xfa, 0x23, 0x25, 0x54, 0x28, 0xb4, 0x9d, 0x16, 0x2b, 0x30, 0x32, 0x3f,
	0x7e, 0xa2, 0x7a, 0x93, 0xbb, 0x49, 0x43, 0xe8, 0x42, 0x6d, 0x8e, 0xfb, 0x5c, 0xdd, 0x7d, 0x26,
	0x61, 0xaf, 0x2c, 0x9e, 0x9e, 0x4b, 0xea, 0xfa, 0xb9, 0x44, 0x53, 0x1b, 0x2c, 0xab, 0x36, 0xf4,
	0xe3, 0xd5, 0xfa, 0x47, 0x3c, 0x8b, 0x68, 0x2c, 0x6a, 0x7c, 0xf2, 0x6a, 0xc8, 0xbf, 0x4c, 0x73,
	0x25, 0xdf, 0x13, 0xe7, 0xe4, 0x59, 0x42, 0x51, 0x9d, 0x52, 0xa5, 0x27, 0x89, 0xa7, 0x54, 0x83,
	0x95, 0xda, 0xe3, 0x27, 0xe4, 0x37, 0x42, 0xd1, 0xfc, 0x3c, 0x5b, 0xa3, 0x15, 0x20, 0xc9, 0x54,
	0x37, 0xff, 0xbb, 0x7c, 0x9b, 0x2a, 0xb8, 0x6a, 0x61, 0xfd, 0x65, 0x81, 0xb1, 0x14, 0x07, 0x5f,
	0x93, 0xdc, 0xef, 0x1d, 0xf7, 0xcc, 0x9b, 0xaa, 0x6c, 0x97, 0x2c, 0x88, 0x11, 0x23, 0xbe, 0x4d,
	0x43, 0x56, 0x6f, 0xf7, 0x14, 0x40, 0xb5, 0x99, 0xc3, 0x6c, 0x0a, 0xe0, 0x55, 0xa9, 0xfc, 0xb1,
	0x9e, 0x7f, 0x1c, 0x84, 0x67, 0x6e, 0xf2, 0xae, 0xad, 0xc1, 0x97, 0xd4, 0x98, 0x9f, 0x61, 0xe5,
	0xa1, 0x78, 0xae, 0x82, 0xf7, 0x4b, 0xa6, 0x82, 0xd5, 0xd6, 0x6f, 0x16, 0x58, 0x79, 0xa7, 0xdb,
	0xed, 0xad, 0x90, 0x6e, 0x8b, 0x35, 0xd0, 0x5d, 0x56, 0x2b, 0x4f, 0xb7, 0x0f, 0x3a, 0x96, 0x49,
	0xf6, 0x29, 0x2d, 0x26, 0xfb, 0x7c, 0x9c, 0x3f, 0xa2, 0xb1, 0x7e, 0x50, 0x60, 0xa5, 0xed, 0xf6,
	0x0b, 0xdc, 0x2e, 0x6a, 0x99, 0xeb, 0x65, 0x95, 0x3b, 0xd8, 0x53, 0x57, 0xa6, 0xc5, 0xde, 0xe4,
	0xa3, 0x4e, 0xc3, 0xf9, 0x7f, 0x6f, 0x50, 0xd9, 0xf0, 0x5a, 0xf6, 0x58, 0x42, 0x5b, 0x7f, 0x54,
	0x64, 0xd5, 0x43, 0xce, 0xed, 0x9f, 0xbe, 0xa3, 0x74, 0xe8, 0x85, 0xf1, 0xdc, 0x9d, 0xf2, 0x18,
	0xac, 0x3f, 0x79, 0x07, 0x3a, 0x96, 0x61, 0x6c, 0x25, 0xc7, 0x58, 0x8c, 0x11, 0xcf, 0xfd, 0xb8,
	0x67, 0x63, 0xee, 0x06, 0xfd, 0x35, 0x89, 0x06, 0x65, 0x94, 0xe5, 0x5a, 0x4e, 0x59, 0xe2, 0x5f,
	0x3a, 0x3c, 0x15, 0x61, 0xcf, 0x57, 0xef, 0x97, 0x12, 0x3a, 0xb3, 0xf1, 0xea, 0xb9, 0x8d, 0x77,
	0x8b, 0xd5, 0x65, 0xef, 0xf2, 0xdf, 0x3a, 0x4a, 0xc0, 0x81, 0x04, 0xb8, 0xf7, 0xeb, 0x0d, 0x39,
	0x51, 0xb3, 0xc9, 0xea, 0xc3, 0xce, 0x63, 0xa9, 0xb4, 0x8d, 0xff, 0x65, 0x36, 0x58, 0x6d, 0xd8,
	0x79, 0x8c, 0xff, 0xc8, 0x66, 0x14, 0xcc, 0x75, 0xb6, 0x36, 0xec, 0x3c, 0xde, 0x99, 0x06, 0xcf,
	0x8c, 0xa2, 0x79, 0x99, 0x35, 0x87, 0x9d, 0xc7, 0xe9, 0x1f, 0x65, 0x19, 0x25, 0xf3, 0x12, 0x5b,
	0x1f, 0x76, 0x1e, 0xab, 0xbf, 0x4b, 0x32, 0xca, 0xa6, 0xc9, 0x36, 0x86, 0x9d, 0xc7, 0xda, 0x9f,
	0x07, 0x19, 0x15, 0xf3, 0x2a, 0x33, 0x86, 0x9d, 0xc7, 0x99, 0xbf, 0xd3, 0x31, 0xaa, 0xf4, 0xa9,
	0x7a, 0x07, 0x6b, 0xac, 0x99, 0x8c, 0x55, 0x87, 0x9d, 0xc7, 0x6d, 0x6e, 0x1b, 0x35, 0x1a, 0x05,
	0xfe, 0x91, 0x88, 0x51, 0xd7, 0xa8, 0xb7, 0x0d, 0x46, 0x1f, 0xaa, 0x7f, 0x81, 0x30, 0xd6, 0xcd,
	0x57, 0xd8, 0x65, 0x05, 0x24, 0xaf, 0xd1, 0x8d, 0x86, 0xd9, 0x62, 0x57, 0x17, 0xe0, 0xc3, 0xbd,
	0x91, 0xd1, 0x34, 0xaf, 0xb3, 0x2b, 0x0b, 0x35, 0x7b, 0x23, 0x63, 0x63, 0xe9, 0x27, 0x83, 0x9d,
	0x2d, 0xe3, 0x92, 0x79, 0x87, 0xdd, 0x52, 0x35, 0xcb, 0x5e, 0xa2, 0x1b, 0x86, 0x69, 0xb0, 0x86,
	0x6a, 0xd1, 0x76, 0xb6, 0xfb, 0xc6, 0x65, 0xf3, 0x06, 0x7b, 0x85, 0x98, 0x93, 0x7d, 0xf1, 0x69,
	0x98, 0xc4, 0x92, 0xcc, 0x03, 0x69, 0xe3, 0x0a, 0x31, 0x38, 0x7d, 0xfb, 0x6c, 0x5c, 0x35, 0x6f,
	0xb3, 0x9b, 0x4b, 0xfb, 0xc0, 0x7b, 0x6d, 0xe3, 0x15, 0xe2, 0xb7, 0xf6, 0x9a, 0xd8, 0xb8, 0x46,
	0xd3, 0xcb, 0xbf, 0x30, 0x36, 0xae, 0x9b, 0x9f, 0x62, 0x37, 0x96, 0x76, 0x06, 0x2a, 0xc9, 0x68,
	0x99, 0x37, 0xd9, 0x35, 0xfa, 0xf9, 0xdc, 0xe3, 0x53, 0xe3, 0x06, 0xf5, 0x99, 0x7f, 0x10, 0x6a,
	0xdc, 0x34, 0xaf, 0x31, 0x93, 0x2a, 0xb4, 0xa7, 0x90, 0xc6, 0xab, 0x6a, 0xf2, 0x0b, 0x6f, 0x0e,
	0x8d, 0x5b, 0x24, 0x54, 0x3d, 0xfb, 0xe9, 0x3b, 0xc6, 0xa7, 0x68, 0xce, 0xe9, 0xdb, 0x33, 0xe3,
	0x76, 0x5a, 0xff, 0xc0, 0x78, 0x8d, 0xc4, 0x53, 0xbe, 0xd4, 0x31, 0xee, 0xe8, 0xe4, 0x03, 0xe3,
	0xd3, 0xa6, 0xc5, 0x6e, 0x27, 0xe4, 0xd2, 0x47, 0x2e, 0x86, 0x45, 0x4b, 0x77, 0xe1, 0xfb, 0x12,
	0xe3, 0x7f, 0x9b, 0x57, 0xd8, 0xa5, 0xa4, 0x05, 0x8d, 0xe2, 0x75, 0x12, 0xc7, 0x83, 0xae, 0x6d,
	0x7c, 0x86, 0xca, 0xa3, 0x8e, 0x6d, 0xbc, 0x41, 0xeb, 0x9c, 0xa4, 0x9a, 0x1b, 0x9f, 0xa5, 0xf1,
	0x3a, 0xc0, 0xfc, 0xbb, 0xd4, 0xb4, 0x3b, 0x74, 0x8c, 0xcf, 0x29, 0x71, 0xca, 0x27, 0xdb, 0x1a,
	0xf7, 0x68, 0x1a, 0x32, 0x61, 0xd4, 0xf8, 0xbc, 0x46, 0xf2, 0x43, 0xe3, 0x0b, 0x4a, 0xde, 0x87,
	0xce, 0xe0, 0x91, 0xf1, 0x26, 0x2d, 0xb1, 0x96, 0x09, 0x69, 0xbc, 0xa5, 0x3e, 0xc0, 0x7c, 0x46,
	0xe3, 0x8b, 0xc4, 0xc4, 0x34, 0xcb, 0xcd, 0xf8, 0x92, 0xde, 0xe2, 0x81, 0xf1, 0x36, 0x4d, 0x51,
	0xcf, 0xe6, 0x32, 0x36, 0x69, 0xac, 0xfd, 0x7e, 0xc7, 0xb8, 0x4f, 0xe5, 0xe1, 0xc8, 0x36, 0xde,
	0xa1, 0xb2, 0xd3, 0xb3, 0x8d, 0x2f, 0xab, 0xc5, 0xd8, 0x1d, 0xd8, 0xc6, 0x03, 0x9a, 0xd0, 0x42,
	0x16, 0x81, 0xf1, 0x15, 0xc5, 0x42, 0xed, 0x1a, 0xd9, 0x78, 0x97, 0x64, 0x60, 0xf1, 0x6e, 0xd9,
	0xf8, 0xaa, 0x5a, 0xb8, 0x8b, 0xaf, 0x9d, 0x8d, 0xaf, 0x29, 0xbe, 0x0e, 0xdb, 0xb6, 0xf1, 0x75,
	0x25, 0x27, 0xc9, 0xd5, 0xaf, 0xf1, 0x0d, 0xf3, 0xd3, 0xec, 0x53, 0x0b, 0x8b, 0xaf, 0xdf, 0x89,
	0x1a, 0xff, 0xc7, 0x7c, 0x8d, 0xbd, 0x9a, 0x5b, 0xfb, 0x4c, 0x83, 0xff, 0x4b, 0xbf, 0xb1, 0x37,
	0x1a, 0xd9, 0xc6, 0xff, 0x23, 0x45, 0x92, 0xbd, 0x5f, 0x33, 0xfe, 0xbf, 0xb9, 0xc1, 0x18, 0x8e,
	0x15, 0x6f, 0x05, 0x8c, 0x36, 0x29, 0x20, 0x15, 0x8c, 0x37, 0xb6, 0x88, 0xd7, 0x32, 0x3e, 0x6c,
	0x74, 0x34, 0x5e, 0xa8, 0x50, 0x89, 0xd1, 0xa5, 0x35, 0xc5, 0x30, 0xae, 0xb1, 0xad, 0x84, 0xcb,
	0xd9, 0x32, 0x76, 0xd4, 0x2a, 0x74, 0x06, 0xc6, 0x2e, 0x0d, 0x67, 0x60, 0xf7, 0x1d, 0x63, 0x8f,
	0x24, 0x2d, 0x09, 0x65, 0x18, 0x3d, 0xfa, 0x21, 0x19, 0x0a, 0x30, 0xbe, 0xa9, 0x93, 0xf7, 0x8d,
	0xf7, 0xa8, 0xa3, 0xad, 0x9d, 0xae, 0xd1, 0xa7, 0xf2, 0x2e, 0xdf, 0x36, 0x06, 0x4a, 0x89, 0x77,
	0xbb, 0x3d, 0x63, 0x48, 0x15, 0xdb, 0x6d, 0xdb, 0xd8, 0xa7, 0xef, 0xa5, 0xc1, 0x34, 0xec, 0xa3,
	0x2a, 0xfe, 0x31, 0xe8, 0xfd, 0xff, 0x08, 0x00, 0x00, 0xff, 0xff, 0x0c, 0x09, 0xa1, 0xb6, 0x28,
	0x54, 0x00, 0x00,
}
