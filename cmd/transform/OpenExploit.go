package transform

import (
	"fmt"
	maltego "github.com/dreadl0ck/netcap/maltego"
	"io"
	"log"
	"net/http"
	"os"
	"os/exec"
	"path/filepath"
	"runtime"
)

func OpenExploit() {

	var (
		lt              = maltego.ParseLocalArguments(os.Args)
		trx             = &maltego.MaltegoTransform{}
		openCommandName = os.Getenv("NC_MALTEGO_OPEN_FILE_CMD")
		exploitDirPath  = os.Getenv("NC_MALTEGO_EXPLOIT_DIRECTORY")
		args            []string
	)
	if exploitDirPath == "" {
		exploitDirPath = "/usr/local/etc/netcap"
	}

	// if no command has been supplied via environment variable
	// then default to:
	// - open for macOS
	// - gio open for linux
	if openCommandName == "" {
		if runtime.GOOS == "darwin" {
			openCommandName = "open"
		} else { // linux
			openCommandName = "gio"
			args = append(args, "open")
		}
	}

	filePath := filepath.Join(exploitDirPath, lt.Values["file"])

	log.Println("open path:", filePath)

	f, err := os.OpenFile(filePath, os.O_RDONLY, outDirPermission)
	if err != nil {
		log.Fatal(err)
	}
	defer f.Close()

	var buf = make([]byte, 512)
	_, err = io.ReadFull(f, buf)
	if err != nil && err != io.EOF && err != io.ErrUnexpectedEOF {
		log.Fatal(err)
	}

	// check if file is executable to prevent accidental execution
	ctype := http.DetectContentType(buf)
	log.Println("ctype:", ctype)
	if ctype == "application/octet-stream" {
		trx.AddUIMessage("completed!", "Inform")
		fmt.Println(trx.ReturnOutput())
		return
	}

	log.Println("command for opening files:", openCommandName)
	args = append(args, filePath)

	out, err := exec.Command(openCommandName, args...).CombinedOutput()
	if err != nil {
		log.Println(string(out))
		log.Fatal(err)
	}
	log.Println(string(out))

	trx.AddUIMessage("completed!", "Inform")
	fmt.Println(trx.ReturnOutput())
}
